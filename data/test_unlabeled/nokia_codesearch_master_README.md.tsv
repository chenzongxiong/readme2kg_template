#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=# Code search  This project contains the code to reproduce the experiments in the paper \[Neural Code Search Revisited: Enhancing Code Snippet Retrieval through Natural Language Intent\](https://arxiv.org/abs/2008.12193).
1-1	0-1	#	_	_
1-2	2-6	Code	_	_
1-3	7-13	search	_	_
1-4	15-19	This	_	_
1-5	20-27	project	_	_
1-6	28-36	contains	_	_
1-7	37-40	the	_	_
1-8	41-45	code	_	_
1-9	46-48	to	_	_
1-10	49-58	reproduce	_	_
1-11	59-62	the	_	_
1-12	63-74	experiments	_	_
1-13	75-77	in	_	_
1-14	78-81	the	_	_
1-15	82-87	paper	_	_
1-16	88-89	\[	_	_
1-17	89-95	Neural	_	_
1-18	96-100	Code	_	_
1-19	101-107	Search	_	_
1-20	108-117	Revisited	_	_
1-21	117-118	:	_	_
1-22	119-128	Enhancing	_	_
1-23	129-133	Code	_	_
1-24	134-141	Snippet	_	_
1-25	142-151	Retrieval	_	_
1-26	152-159	through	_	_
1-27	160-167	Natural	_	_
1-28	168-176	Language	_	_
1-29	177-183	Intent	_	_
1-30	183-184	\]	_	_
1-31	184-185	(	_	_
1-32	185-190	https	_	_
1-33	190-191	:	_	_
1-34	191-192	/	_	_
1-35	192-193	/	_	_
1-36	193-202	arxiv.org	_	_
1-37	202-203	/	_	_
1-38	203-206	abs	_	_
1-39	206-207	/	_	_
1-40	207-217	2008.12193	_	_
1-41	217-218	)	_	_
1-42	218-219	.	_	_

#Text=It implements retrieval systems for annotated code snippets: pairs of a code snippet and a short natural language description.
2-1	220-222	It	_	_
2-2	223-233	implements	_	_
2-3	234-243	retrieval	_	_
2-4	244-251	systems	_	_
2-5	252-255	for	_	_
2-6	256-265	annotated	_	_
2-7	266-270	code	_	_
2-8	271-279	snippets	_	_
2-9	279-280	:	_	_
2-10	281-286	pairs	_	_
2-11	287-289	of	_	_
2-12	290-291	a	_	_
2-13	292-296	code	_	_
2-14	297-304	snippet	_	_
2-15	305-308	and	_	_
2-16	309-310	a	_	_
2-17	311-316	short	_	_
2-18	317-324	natural	_	_
2-19	325-333	language	_	_
2-20	334-345	description	_	_
2-21	345-346	.	_	_

#Text=Our pretrained models and datasets are hosted on Zenodo (https://zenodo.org/record/4001602).
3-1	347-350	Our	_	_
3-2	351-361	pretrained	_	_
3-3	362-368	models	_	_
3-4	369-372	and	_	_
3-5	373-381	datasets	_	_
3-6	382-385	are	_	_
3-7	386-392	hosted	_	_
3-8	393-395	on	_	_
3-9	396-402	Zenodo	_	_
3-10	403-404	(	_	_
3-11	404-409	https	_	_
3-12	409-410	:	_	_
3-13	410-411	/	_	_
3-14	411-412	/	_	_
3-15	412-422	zenodo.org	_	_
3-16	422-423	/	_	_
3-17	423-429	record	_	_
3-18	429-430	/	_	_
3-19	430-437	4001602	_	_
3-20	437-438	)	_	_
3-21	438-439	.	_	_

#Text=The models and datasets will be downloaded automatically when calling `load\_model`, `load\_snippet\_collection`, etc.
4-1	440-443	The	_	_
4-2	444-450	models	_	_
4-3	451-454	and	_	_
4-4	455-463	datasets	_	_
4-5	464-468	will	_	_
4-6	469-471	be	_	_
4-7	472-482	downloaded	_	_
4-8	483-496	automatically	_	_
4-9	497-501	when	_	_
4-10	502-509	calling	_	_
4-11	510-511	`	_	_
4-12	511-521	load\_model	_	_
4-13	521-522	`	_	_
4-14	522-523	,	_	_
4-15	524-525	`	_	_
4-16	525-548	load\_snippet\_collection	_	_
4-17	548-549	`	_	_
4-18	549-550	,	_	_
4-19	551-554	etc	_	_
4-20	554-555	.	_	_

#Text=(see the code examples below).
5-1	556-557	(	_	_
5-2	557-560	see	_	_
5-3	561-564	the	_	_
5-4	565-569	code	_	_
5-5	570-578	examples	_	_
5-6	579-584	below	_	_
5-7	584-585	)	_	_
5-8	585-586	.	_	_

#Text=In addition, the project also implements some \*code-only\* retrieval models (BM25, NCS, UNIF) for snippet collections that do not come with descriptions.
6-1	588-590	In	_	_
6-2	591-599	addition	_	_
6-3	599-600	,	_	_
6-4	601-604	the	_	_
6-5	605-612	project	_	_
6-6	613-617	also	_	_
6-7	618-628	implements	_	_
6-8	629-633	some	_	_
6-9	634-635	\*	_	_
6-10	635-644	code-only	_	_
6-11	644-645	\*	_	_
6-12	646-655	retrieval	_	_
6-13	656-662	models	_	_
6-14	663-664	(	_	_
6-15	664-668	BM25	_	_
6-16	668-669	,	_	_
6-17	670-673	NCS	_	_
6-18	673-674	,	_	_
6-19	675-679	UNIF	_	_
6-20	679-680	)	_	_
6-21	681-684	for	_	_
6-22	685-692	snippet	_	_
6-23	693-704	collections	_	_
6-24	705-709	that	_	_
6-25	710-712	do	_	_
6-26	713-716	not	_	_
6-27	717-721	come	_	_
6-28	722-726	with	_	_
6-29	727-739	descriptions	_	_
6-30	739-740	.	_	_

#Text=The experiments in the paper are done on Python snippets, but the code preprocessing currently also supports java, javascript, and bash.
7-1	742-745	The	_	_
7-2	746-757	experiments	_	_
7-3	758-760	in	_	_
7-4	761-764	the	_	_
7-5	765-770	paper	_	_
7-6	771-774	are	_	_
7-7	775-779	done	_	_
7-8	780-782	on	_	_
7-9	783-789	Python	_	_
7-10	790-798	snippets	_	_
7-11	798-799	,	_	_
7-12	800-803	but	_	_
7-13	804-807	the	_	_
7-14	808-812	code	_	_
7-15	813-826	preprocessing	_	_
7-16	827-836	currently	_	_
7-17	837-841	also	_	_
7-18	842-850	supports	_	_
7-19	851-855	java	_	_
7-20	855-856	,	_	_
7-21	857-867	javascript	_	_
7-22	867-868	,	_	_
7-23	869-872	and	_	_
7-24	873-877	bash	_	_
7-25	877-878	.	_	_

#Text=The project is developed by a research team in the \[Application Platforms and Software Systems Lab\](https://www.bell-labs.com/our-research/areas/applications-and-platforms/) of \[Nokia Bell Labs\](https://www.bell-labs.com/).   ## Installation  1.
8-1	880-883	The	_	_
8-2	884-891	project	_	_
8-3	892-894	is	_	_
8-4	895-904	developed	_	_
8-5	905-907	by	_	_
8-6	908-909	a	_	_
8-7	910-918	research	_	_
8-8	919-923	team	_	_
8-9	924-926	in	_	_
8-10	927-930	the	_	_
8-11	931-932	\[	_	_
8-12	932-943	Application	_	_
8-13	944-953	Platforms	_	_
8-14	954-957	and	_	_
8-15	958-966	Software	_	_
8-16	967-974	Systems	_	_
8-17	975-978	Lab	_	_
8-18	978-979	\]	_	_
8-19	979-980	(	_	_
8-20	980-985	https	_	_
8-21	985-986	:	_	_
8-22	986-987	/	_	_
8-23	987-988	/	_	_
8-24	988-1005	www.bell-labs.com	_	_
8-25	1005-1006	/	_	_
8-26	1006-1018	our-research	_	_
8-27	1018-1019	/	_	_
8-28	1019-1024	areas	_	_
8-29	1024-1025	/	_	_
8-30	1025-1051	applications-and-platforms	_	_
8-31	1051-1052	/	_	_
8-32	1052-1053	)	_	_
8-33	1054-1056	of	_	_
8-34	1057-1058	\[	_	_
8-35	1058-1063	Nokia	_	_
8-36	1064-1068	Bell	_	_
8-37	1069-1073	Labs	_	_
8-38	1073-1074	\]	_	_
8-39	1074-1075	(	_	_
8-40	1075-1080	https	_	_
8-41	1080-1081	:	_	_
8-42	1081-1082	/	_	_
8-43	1082-1083	/	_	_
8-44	1083-1100	www.bell-labs.com	_	_
8-45	1100-1101	/	_	_
8-46	1101-1102	)	_	_
8-47	1102-1103	.	_	_
8-48	1106-1107	#	_	_
8-49	1107-1108	#	_	_
8-50	1109-1121	Installation	_	_
8-51	1123-1124	1	_	_
8-52	1124-1125	.	_	_

#Text=Install the codesearch library: `pip install .` 2.
9-1	1126-1133	Install	_	_
9-2	1134-1137	the	_	_
9-3	1138-1148	codesearch	_	_
9-4	1149-1156	library	_	_
9-5	1156-1157	:	_	_
9-6	1158-1159	`	_	_
9-7	1159-1162	pip	_	_
9-8	1163-1170	install	_	_
9-9	1171-1172	.	_	_
9-10	1172-1173	`	_	_
9-11	1174-1175	2	_	_
9-12	1175-1176	.	_	_

#Text=Install the tree-sitter parsers (for preprocessing the code snippets): e.g., `codesearch install\_parsers python java` or simply `codesearch install\_parsers` to install parsers for all supported languages.
10-1	1177-1184	Install	_	_
10-2	1185-1188	the	_	_
10-3	1189-1200	tree-sitter	_	_
10-4	1201-1208	parsers	_	_
10-5	1209-1210	(	_	_
10-6	1210-1213	for	_	_
10-7	1214-1227	preprocessing	_	_
10-8	1228-1231	the	_	_
10-9	1232-1236	code	_	_
10-10	1237-1245	snippets	_	_
10-11	1245-1246	)	_	_
10-12	1246-1247	:	_	_
10-13	1248-1251	e.g	_	_
10-14	1251-1252	.	_	_
10-15	1252-1253	,	_	_
10-16	1254-1255	`	_	_
10-17	1255-1265	codesearch	_	_
10-18	1266-1281	install\_parsers	_	_
10-19	1282-1288	python	_	_
10-20	1289-1293	java	_	_
10-21	1293-1294	`	_	_
10-22	1295-1297	or	_	_
10-23	1298-1304	simply	_	_
10-24	1305-1306	`	_	_
10-25	1306-1316	codesearch	_	_
10-26	1317-1332	install\_parsers	_	_
10-27	1332-1333	`	_	_
10-28	1334-1336	to	_	_
10-29	1337-1344	install	_	_
10-30	1345-1352	parsers	_	_
10-31	1353-1356	for	_	_
10-32	1357-1360	all	_	_
10-33	1361-1370	supported	_	_
10-34	1371-1380	languages	_	_
10-35	1380-1381	.	_	_

#Text=By default, parsers are installed under the `codesearch/parsers` directory this can be customized by setting the `TREE\_SITTER\_DIR` variable. 3.
11-1	1382-1384	By	_	_
11-2	1385-1392	default	_	_
11-3	1392-1393	,	_	_
11-4	1394-1401	parsers	_	_
11-5	1402-1405	are	_	_
11-6	1406-1415	installed	_	_
11-7	1416-1421	under	_	_
11-8	1422-1425	the	_	_
11-9	1426-1427	`	_	_
11-10	1427-1437	codesearch	_	_
11-11	1437-1438	/	_	_
11-12	1438-1445	parsers	_	_
11-13	1445-1446	`	_	_
11-14	1447-1456	directory	_	_
11-15	1457-1461	this	_	_
11-16	1462-1465	can	_	_
11-17	1466-1468	be	_	_
11-18	1469-1479	customized	_	_
11-19	1480-1482	by	_	_
11-20	1483-1490	setting	_	_
11-21	1491-1494	the	_	_
11-22	1495-1496	`	_	_
11-23	1496-1511	TREE\_SITTER\_DIR	_	_
11-24	1511-1512	`	_	_
11-25	1513-1521	variable	_	_
11-26	1521-1522	.	_	_
11-27	1523-1524	3	_	_
11-28	1524-1525	.	_	_

#Text=Install spacy (for preprocessing descriptions/code comments): `python -m spacy download en\_core\_web\_md`   ## Code structure  ``` codesearch ├── codesearch          // Contains the library modules: model code, utilities to download and evaluate models, etc. ├── nbs                 // Contains examples notebooks and notebooks to reproduce the experiments ├── tests               // Contains some unit tests, mostly for verifying the code preprocessing ```  ## Models  We provide some pretrained embedding models to create a retrieval system.
12-1	1526-1533	Install	_	_
12-2	1534-1539	spacy	_	_
12-3	1540-1541	(	_	_
12-4	1541-1544	for	_	_
12-5	1545-1558	preprocessing	_	_
12-6	1559-1571	descriptions	_	_
12-7	1571-1572	/	_	_
12-8	1572-1576	code	_	_
12-9	1577-1585	comments	_	_
12-10	1585-1586	)	_	_
12-11	1586-1587	:	_	_
12-12	1588-1589	`	_	_
12-13	1589-1595	python	_	_
12-14	1596-1597	-	_	_
12-15	1597-1598	m	_	_
12-16	1599-1604	spacy	_	_
12-17	1605-1613	download	_	_
12-18	1614-1628	en\_core\_web\_md	_	_
12-19	1628-1629	`	_	_
12-20	1632-1633	#	_	_
12-21	1633-1634	#	_	_
12-22	1635-1639	Code	_	_
12-23	1640-1649	structure	_	_
12-24	1651-1652	`	_	_
12-25	1652-1653	`	_	_
12-26	1653-1654	`	_	_
12-27	1655-1665	codesearch	_	_
12-28	1666-1667	├	_	_
12-29	1667-1668	─	_	_
12-30	1668-1669	─	_	_
12-31	1670-1680	codesearch	_	_
12-32	1690-1691	/	_	_
12-33	1691-1692	/	_	_
12-34	1693-1701	Contains	_	_
12-35	1702-1705	the	_	_
12-36	1706-1713	library	_	_
12-37	1714-1721	modules	_	_
12-38	1721-1722	:	_	_
12-39	1723-1728	model	_	_
12-40	1729-1733	code	_	_
12-41	1733-1734	,	_	_
12-42	1735-1744	utilities	_	_
12-43	1745-1747	to	_	_
12-44	1748-1756	download	_	_
12-45	1757-1760	and	_	_
12-46	1761-1769	evaluate	_	_
12-47	1770-1776	models	_	_
12-48	1776-1777	,	_	_
12-49	1778-1781	etc	_	_
12-50	1781-1782	.	_	_
12-51	1783-1784	├	_	_
12-52	1784-1785	─	_	_
12-53	1785-1786	─	_	_
12-54	1787-1790	nbs	_	_
12-55	1807-1808	/	_	_
12-56	1808-1809	/	_	_
12-57	1810-1818	Contains	_	_
12-58	1819-1827	examples	_	_
12-59	1828-1837	notebooks	_	_
12-60	1838-1841	and	_	_
12-61	1842-1851	notebooks	_	_
12-62	1852-1854	to	_	_
12-63	1855-1864	reproduce	_	_
12-64	1865-1868	the	_	_
12-65	1869-1880	experiments	_	_
12-66	1881-1882	├	_	_
12-67	1882-1883	─	_	_
12-68	1883-1884	─	_	_
12-69	1885-1890	tests	_	_
12-70	1905-1906	/	_	_
12-71	1906-1907	/	_	_
12-72	1908-1916	Contains	_	_
12-73	1917-1921	some	_	_
12-74	1922-1926	unit	_	_
12-75	1927-1932	tests	_	_
12-76	1932-1933	,	_	_
12-77	1934-1940	mostly	_	_
12-78	1941-1944	for	_	_
12-79	1945-1954	verifying	_	_
12-80	1955-1958	the	_	_
12-81	1959-1963	code	_	_
12-82	1964-1977	preprocessing	_	_
12-83	1978-1979	`	_	_
12-84	1979-1980	`	_	_
12-85	1980-1981	`	_	_
12-86	1983-1984	#	_	_
12-87	1984-1985	#	_	_
12-88	1986-1992	Models	_	_
12-89	1994-1996	We	_	_
12-90	1997-2004	provide	_	_
12-91	2005-2009	some	_	_
12-92	2010-2020	pretrained	_	_
12-93	2021-2030	embedding	_	_
12-94	2031-2037	models	_	_
12-95	2038-2040	to	_	_
12-96	2041-2047	create	_	_
12-97	2048-2049	a	_	_
12-98	2050-2059	retrieval	_	_
12-99	2060-2066	system	_	_
12-100	2066-2067	.	_	_

#Text=The pretrained models also expose a consistent interface to embed snippets and queries:  #### Example: Query a snippet collection with a pretrained embedding model  ```python from codesearch.utils import load\_model from codesearch.embedding\_retrieval import EmbeddingRetrievalModel  query = "plot a bar chart" snippets = \[{                           # a dummy snippet collection with 1 snippet     "id": "1",     "description": "Hello world",     "code": "print('hello world')",     "language": "python"     }\]  embedding\_model = load\_model("use-embedder-pacs") retrieval\_model = EmbeddingRetrievalModel(embedding\_model) retrieval\_model.add\_snippets(snippets) retrieval\_model.query(query) ```  #### Example: Embed snippets or queries with a pre-trained embedding model  ```python from codesearch.utils import load\_model  model\_name = "use-embedder-pacs" queries = \["plot a bar chart"\] snippets = \[{     "description": "Hello world",     "code": "print('hello world')",     "language": "python"     }\]  embedding\_model = load\_model(model\_name) query\_embs = embedding\_model.embed\_queries(queries) snippet\_embs = embedding\_model.embed\_snippets(snippets) ```  ### Available models  Below you find a table with the pretrained models.
13-1	2068-2071	The	_	_
13-2	2072-2082	pretrained	_	_
13-3	2083-2089	models	_	_
13-4	2090-2094	also	_	_
13-5	2095-2101	expose	_	_
13-6	2102-2103	a	_	_
13-7	2104-2114	consistent	_	_
13-8	2115-2124	interface	_	_
13-9	2125-2127	to	_	_
13-10	2128-2133	embed	_	_
13-11	2134-2142	snippets	_	_
13-12	2143-2146	and	_	_
13-13	2147-2154	queries	_	_
13-14	2154-2155	:	_	_
13-15	2157-2158	#	_	_
13-16	2158-2159	#	_	_
13-17	2159-2160	#	_	_
13-18	2160-2161	#	_	_
13-19	2162-2169	Example	_	_
13-20	2169-2170	:	_	_
13-21	2171-2176	Query	_	_
13-22	2177-2178	a	_	_
13-23	2179-2186	snippet	_	_
13-24	2187-2197	collection	_	_
13-25	2198-2202	with	_	_
13-26	2203-2204	a	_	_
13-27	2205-2215	pretrained	_	_
13-28	2216-2225	embedding	_	_
13-29	2226-2231	model	_	_
13-30	2233-2234	`	_	_
13-31	2234-2235	`	_	_
13-32	2235-2236	`	_	_
13-33	2236-2242	python	_	_
13-34	2243-2247	from	_	_
13-35	2248-2264	codesearch.utils	_	_
13-36	2265-2271	import	_	_
13-37	2272-2282	load\_model	_	_
13-38	2283-2287	from	_	_
13-39	2288-2318	codesearch.embedding\_retrieval	_	_
13-40	2319-2325	import	_	_
13-41	2326-2349	EmbeddingRetrievalModel	_	_
13-42	2351-2356	query	_	_
13-43	2357-2358	=	_	_
13-44	2359-2360	"	_	_
13-45	2360-2364	plot	_	_
13-46	2365-2366	a	_	_
13-47	2367-2370	bar	_	_
13-48	2371-2376	chart	_	_
13-49	2376-2377	"	_	_
13-50	2378-2386	snippets	_	_
13-51	2387-2388	=	_	_
13-52	2389-2390	\[	_	_
13-53	2390-2391	{	_	_
13-54	2418-2419	#	_	_
13-55	2420-2421	a	_	_
13-56	2422-2427	dummy	_	_
13-57	2428-2435	snippet	_	_
13-58	2436-2446	collection	_	_
13-59	2447-2451	with	_	_
13-60	2452-2453	1	_	_
13-61	2454-2461	snippet	_	_
13-62	2466-2467	"	_	_
13-63	2467-2469	id	_	_
13-64	2469-2470	"	_	_
13-65	2470-2471	:	_	_
13-66	2472-2473	"	_	_
13-67	2473-2474	1	_	_
13-68	2474-2475	"	_	_
13-69	2475-2476	,	_	_
13-70	2481-2482	"	_	_
13-71	2482-2493	description	_	_
13-72	2493-2494	"	_	_
13-73	2494-2495	:	_	_
13-74	2496-2497	"	_	_
13-75	2497-2502	Hello	_	_
13-76	2503-2508	world	_	_
13-77	2508-2509	"	_	_
13-78	2509-2510	,	_	_
13-79	2515-2516	"	_	_
13-80	2516-2520	code	_	_
13-81	2520-2521	"	_	_
13-82	2521-2522	:	_	_
13-83	2523-2524	"	_	_
13-84	2524-2529	print	_	_
13-85	2529-2530	(	_	_
13-86	2530-2531	'	_	_
13-87	2531-2536	hello	_	_
13-88	2537-2542	world	_	_
13-89	2542-2543	'	_	_
13-90	2543-2544	)	_	_
13-91	2544-2545	"	_	_
13-92	2545-2546	,	_	_
13-93	2551-2552	"	_	_
13-94	2552-2560	language	_	_
13-95	2560-2561	"	_	_
13-96	2561-2562	:	_	_
13-97	2563-2564	"	_	_
13-98	2564-2570	python	_	_
13-99	2570-2571	"	_	_
13-100	2576-2577	}	_	_
13-101	2577-2578	\]	_	_
13-102	2580-2595	embedding\_model	_	_
13-103	2596-2597	=	_	_
13-104	2598-2608	load\_model	_	_
13-105	2608-2609	(	_	_
13-106	2609-2610	"	_	_
13-107	2610-2627	use-embedder-pacs	_	_
13-108	2627-2628	"	_	_
13-109	2628-2629	)	_	_
13-110	2630-2645	retrieval\_model	_	_
13-111	2646-2647	=	_	_
13-112	2648-2671	EmbeddingRetrievalModel	_	_
13-113	2671-2672	(	_	_
13-114	2672-2687	embedding\_model	_	_
13-115	2687-2688	)	_	_
13-116	2689-2717	retrieval\_model.add\_snippets	_	_
13-117	2717-2718	(	_	_
13-118	2718-2726	snippets	_	_
13-119	2726-2727	)	_	_
13-120	2728-2749	retrieval\_model.query	_	_
13-121	2749-2750	(	_	_
13-122	2750-2755	query	_	_
13-123	2755-2756	)	_	_
13-124	2757-2758	`	_	_
13-125	2758-2759	`	_	_
13-126	2759-2760	`	_	_
13-127	2762-2763	#	_	_
13-128	2763-2764	#	_	_
13-129	2764-2765	#	_	_
13-130	2765-2766	#	_	_
13-131	2767-2774	Example	_	_
13-132	2774-2775	:	_	_
13-133	2776-2781	Embed	_	_
13-134	2782-2790	snippets	_	_
13-135	2791-2793	or	_	_
13-136	2794-2801	queries	_	_
13-137	2802-2806	with	_	_
13-138	2807-2808	a	_	_
13-139	2809-2820	pre-trained	_	_
13-140	2821-2830	embedding	_	_
13-141	2831-2836	model	_	_
13-142	2838-2839	`	_	_
13-143	2839-2840	`	_	_
13-144	2840-2841	`	_	_
13-145	2841-2847	python	_	_
13-146	2848-2852	from	_	_
13-147	2853-2869	codesearch.utils	_	_
13-147	2853-2863	codesearch	_	_
13-148	2870-2876	import	_	_
13-149	2877-2887	load\_model	_	_
13-150	2889-2899	model\_name	_	_
13-151	2900-2901	=	_	_
13-152	2902-2903	"	_	_
13-153	2903-2920	use-embedder-pacs	_	_
13-154	2920-2921	"	_	_
13-155	2922-2929	queries	_	_
13-156	2930-2931	=	_	_
13-157	2932-2933	\[	_	_
13-158	2933-2934	"	_	_
13-159	2934-2938	plot	_	_
13-160	2939-2940	a	_	_
13-161	2941-2944	bar	_	_
13-162	2945-2950	chart	_	_
13-163	2950-2951	"	_	_
13-164	2951-2952	\]	_	_
13-165	2953-2961	snippets	_	_
13-166	2962-2963	=	_	_
13-167	2964-2965	\[	_	_
13-168	2965-2966	{	_	_
13-169	2971-2972	"	_	_
13-170	2972-2983	description	_	_
13-171	2983-2984	"	_	_
13-172	2984-2985	:	_	_
13-173	2986-2987	"	_	_
13-174	2987-2992	Hello	_	_
13-175	2993-2998	world	_	_
13-176	2998-2999	"	_	_
13-177	2999-3000	,	_	_
13-178	3005-3006	"	_	_
13-179	3006-3010	code	_	_
13-180	3010-3011	"	_	_
13-181	3011-3012	:	_	_
13-182	3013-3014	"	_	_
13-183	3014-3019	print	_	_
13-184	3019-3020	(	_	_
13-185	3020-3021	'	_	_
13-186	3021-3026	hello	_	_
13-187	3027-3032	world	_	_
13-188	3032-3033	'	_	_
13-189	3033-3034	)	_	_
13-190	3034-3035	"	_	_
13-191	3035-3036	,	_	_
13-192	3041-3042	"	_	_
13-193	3042-3050	language	_	_
13-194	3050-3051	"	_	_
13-195	3051-3052	:	_	_
13-196	3053-3054	"	_	_
13-197	3054-3060	python	_	_
13-198	3060-3061	"	_	_
13-199	3066-3067	}	_	_
13-200	3067-3068	\]	_	_
13-201	3070-3085	embedding\_model	_	_
13-202	3086-3087	=	_	_
13-203	3088-3098	load\_model	_	_
13-204	3098-3099	(	_	_
13-205	3099-3109	model\_name	_	_
13-206	3109-3110	)	_	_
13-207	3111-3121	query\_embs	_	_
13-208	3122-3123	=	_	_
13-209	3124-3153	embedding\_model.embed\_queries	_	_
13-210	3153-3154	(	_	_
13-211	3154-3161	queries	_	_
13-212	3161-3162	)	_	_
13-213	3163-3175	snippet\_embs	_	_
13-214	3176-3177	=	_	_
13-215	3178-3208	embedding\_model.embed\_snippets	_	_
13-216	3208-3209	(	_	_
13-217	3209-3217	snippets	_	_
13-218	3217-3218	)	_	_
13-219	3219-3220	`	_	_
13-220	3220-3221	`	_	_
13-221	3221-3222	`	_	_
13-222	3224-3225	#	_	_
13-223	3225-3226	#	_	_
13-224	3226-3227	#	_	_
13-225	3228-3237	Available	_	_
13-226	3238-3244	models	_	_
13-227	3246-3251	Below	_	_
13-228	3252-3255	you	_	_
13-229	3256-3260	find	_	_
13-230	3261-3262	a	_	_
13-231	3263-3268	table	_	_
13-232	3269-3273	with	_	_
13-233	3274-3277	the	_	_
13-234	3278-3288	pretrained	_	_
13-235	3289-3295	models	_	_
13-236	3295-3296	.	_	_

#Text=For each model, we mention based on what information it computes a snippet embedding: the description and/or the code
14-1	3297-3300	For	_	_
14-2	3301-3305	each	_	_
14-3	3306-3311	model	_	_
14-4	3311-3312	,	_	_
14-5	3313-3315	we	_	_
14-6	3316-3323	mention	_	_
14-7	3324-3329	based	_	_
14-8	3330-3332	on	_	_
14-9	3333-3337	what	_	_
14-10	3338-3349	information	_	_
14-11	3350-3352	it	_	_
14-12	3353-3361	computes	_	_
14-13	3362-3363	a	_	_
14-14	3364-3371	snippet	_	_
14-15	3372-3381	embedding	_	_
14-16	3381-3382	:	_	_
14-17	3383-3386	the	_	_
14-18	3387-3398	description	_	_
14-19	3399-3402	and	_	_
14-20	3402-3403	/	_	_
14-21	3403-3405	or	_	_
14-22	3406-3409	the	_	_
14-23	3410-3414	code	_	_

#Text=.
15-1	3414-3415	.	_	_

#Text=\| name                       \| inputs             \| training data                                          \| notebook                    \| \|----------------------------\|--------------------\|--------------------------------------------------------\|-----------------------------\| \| ncs-embedder-so-ds-feb20      \| code               \| so-ds-feb20                                            \| nbs/ncs/ncs.ipynb           \| \| ncs-embedder-staqc-py      \| code               \| staqc-py-cleaned                              \| nbs/ncs/ncs.ipynb           \| \| tnbow-embedder-so-ds-feb20 \| description        \| so-python-question-titles-feb20                        \| nbs/tnbow/tnbow.ipynb       \| \| use-embedder-pacs          \| description        \| so-duplicates-pacsv1-train                             \| nbs/tuse/tuse\_tuned.ipynb   \| \| ensemble-embedder-pacs     \| description + code \| staqc-py-cleaned + so-duplicates-pacs-train \| nbs/ensemble/ensemble.ipynb \|  ## Datasets  This project provides a consistent interface to download and load datasets related to code search.  ### Snippet collections  ####  Example: Load a snippet collection  ```python from codesearch.data import load\_snippet\_collection collection\_name = "so-ds-feb20" snippets = load\_snippet\_collection(collection\_name) ```  #### Available snippet collections In the table below you find which snippet collections can be loaded.
16-1	3418-3419	\|	_	_
16-2	3420-3424	name	_	_
16-3	3447-3448	\|	_	_
16-4	3449-3455	inputs	_	_
16-5	3468-3469	\|	_	_
16-6	3470-3478	training	_	_
16-7	3479-3483	data	_	_
16-8	3525-3526	\|	_	_
16-9	3527-3535	notebook	_	_
16-10	3555-3556	\|	_	_
16-11	3557-3558	\|	_	_
16-12	3558-3559	-	_	_
16-13	3559-3560	-	_	_
16-14	3560-3561	-	_	_
16-15	3561-3562	-	_	_
16-16	3562-3563	-	_	_
16-17	3563-3564	-	_	_
16-18	3564-3565	-	_	_
16-19	3565-3566	-	_	_
16-20	3566-3567	-	_	_
16-21	3567-3568	-	_	_
16-22	3568-3569	-	_	_
16-23	3569-3570	-	_	_
16-24	3570-3571	-	_	_
16-25	3571-3572	-	_	_
16-26	3572-3573	-	_	_
16-27	3573-3574	-	_	_
16-28	3574-3575	-	_	_
16-29	3575-3576	-	_	_
16-30	3576-3577	-	_	_
16-31	3577-3578	-	_	_
16-32	3578-3579	-	_	_
16-33	3579-3580	-	_	_
16-34	3580-3581	-	_	_
16-35	3581-3582	-	_	_
16-36	3582-3583	-	_	_
16-37	3583-3584	-	_	_
16-38	3584-3585	-	_	_
16-39	3585-3586	-	_	_
16-40	3586-3587	\|	_	_
16-41	3587-3588	-	_	_
16-42	3588-3589	-	_	_
16-43	3589-3590	-	_	_
16-44	3590-3591	-	_	_
16-45	3591-3592	-	_	_
16-46	3592-3593	-	_	_
16-47	3593-3594	-	_	_
16-48	3594-3595	-	_	_
16-49	3595-3596	-	_	_
16-50	3596-3597	-	_	_
16-51	3597-3598	-	_	_
16-52	3598-3599	-	_	_
16-53	3599-3600	-	_	_
16-54	3600-3601	-	_	_
16-55	3601-3602	-	_	_
16-56	3602-3603	-	_	_
16-57	3603-3604	-	_	_
16-58	3604-3605	-	_	_
16-59	3605-3606	-	_	_
16-60	3606-3607	-	_	_
16-61	3607-3608	\|	_	_
16-62	3608-3609	-	_	_
16-63	3609-3610	-	_	_
16-64	3610-3611	-	_	_
16-65	3611-3612	-	_	_
16-66	3612-3613	-	_	_
16-67	3613-3614	-	_	_
16-68	3614-3615	-	_	_
16-69	3615-3616	-	_	_
16-70	3616-3617	-	_	_
16-71	3617-3618	-	_	_
16-72	3618-3619	-	_	_
16-73	3619-3620	-	_	_
16-74	3620-3621	-	_	_
16-75	3621-3622	-	_	_
16-76	3622-3623	-	_	_
16-77	3623-3624	-	_	_
16-78	3624-3625	-	_	_
16-79	3625-3626	-	_	_
16-80	3626-3627	-	_	_
16-81	3627-3628	-	_	_
16-82	3628-3629	-	_	_
16-83	3629-3630	-	_	_
16-84	3630-3631	-	_	_
16-85	3631-3632	-	_	_
16-86	3632-3633	-	_	_
16-87	3633-3634	-	_	_
16-88	3634-3635	-	_	_
16-89	3635-3636	-	_	_
16-90	3636-3637	-	_	_
16-91	3637-3638	-	_	_
16-92	3638-3639	-	_	_
16-93	3639-3640	-	_	_
16-94	3640-3641	-	_	_
16-95	3641-3642	-	_	_
16-96	3642-3643	-	_	_
16-97	3643-3644	-	_	_
16-98	3644-3645	-	_	_
16-99	3645-3646	-	_	_
16-100	3646-3647	-	_	_
16-101	3647-3648	-	_	_
16-102	3648-3649	-	_	_
16-103	3649-3650	-	_	_
16-104	3650-3651	-	_	_
16-105	3651-3652	-	_	_
16-106	3652-3653	-	_	_
16-107	3653-3654	-	_	_
16-108	3654-3655	-	_	_
16-109	3655-3656	-	_	_
16-110	3656-3657	-	_	_
16-111	3657-3658	-	_	_
16-112	3658-3659	-	_	_
16-113	3659-3660	-	_	_
16-114	3660-3661	-	_	_
16-115	3661-3662	-	_	_
16-116	3662-3663	-	_	_
16-117	3663-3664	-	_	_
16-118	3664-3665	\|	_	_
16-119	3665-3666	-	_	_
16-120	3666-3667	-	_	_
16-121	3667-3668	-	_	_
16-122	3668-3669	-	_	_
16-123	3669-3670	-	_	_
16-124	3670-3671	-	_	_
16-125	3671-3672	-	_	_
16-126	3672-3673	-	_	_
16-127	3673-3674	-	_	_
16-128	3674-3675	-	_	_
16-129	3675-3676	-	_	_
16-130	3676-3677	-	_	_
16-131	3677-3678	-	_	_
16-132	3678-3679	-	_	_
16-133	3679-3680	-	_	_
16-134	3680-3681	-	_	_
16-135	3681-3682	-	_	_
16-136	3682-3683	-	_	_
16-137	3683-3684	-	_	_
16-138	3684-3685	-	_	_
16-139	3685-3686	-	_	_
16-140	3686-3687	-	_	_
16-141	3687-3688	-	_	_
16-142	3688-3689	-	_	_
16-143	3689-3690	-	_	_
16-144	3690-3691	-	_	_
16-145	3691-3692	-	_	_
16-146	3692-3693	-	_	_
16-147	3693-3694	-	_	_
16-148	3694-3695	\|	_	_
16-149	3696-3697	\|	_	_
16-150	3698-3722	ncs-embedder-so-ds-feb20	_	_
16-150	3711-3722	so-ds-feb20	_	_
16-151	3728-3729	\|	_	_
16-152	3730-3734	code	_	_
16-153	3749-3750	\|	_	_
16-154	3751-3762	so-ds-feb20	_	_
16-155	3806-3807	\|	_	_
16-156	3808-3811	nbs	_	_
16-157	3811-3812	/	_	_
16-158	3812-3815	ncs	_	_
16-159	3815-3816	/	_	_
16-160	3816-3825	ncs.ipynb	_	_
16-161	3836-3837	\|	_	_
16-162	3838-3839	\|	_	_
16-163	3840-3861	ncs-embedder-staqc-py	_	_
16-163	3853-3861	staqc-py	_	_
16-164	3867-3868	\|	_	_
16-165	3869-3873	code	_	_
16-166	3888-3889	\|	_	_
16-167	3890-3906	staqc-py-cleaned	_	_
16-168	3936-3937	\|	_	_
16-169	3938-3941	nbs	_	_
16-170	3941-3942	/	_	_
16-171	3942-3945	ncs	_	_
16-172	3945-3946	/	_	_
16-173	3946-3955	ncs.ipynb	_	_
16-174	3966-3967	\|	_	_
16-175	3968-3969	\|	_	_
16-176	3970-3996	tnbow-embedder-so-ds-feb20	_	_
16-176	3985-3996	so-ds-feb20	_	_
16-177	3997-3998	\|	_	_
16-178	3999-4010	description	_	_
16-179	4018-4019	\|	_	_
16-180	4020-4051	so-python-question-titles-feb20	_	_
16-181	4075-4076	\|	_	_
16-182	4077-4080	nbs	_	_
16-183	4080-4081	/	_	_
16-184	4081-4086	tnbow	_	_
16-185	4086-4087	/	_	_
16-186	4087-4098	tnbow.ipynb	_	_
16-187	4105-4106	\|	_	_
16-188	4107-4108	\|	_	_
16-189	4109-4126	use-embedder-pacs	_	_
16-190	4136-4137	\|	_	_
16-191	4138-4149	description	_	_
16-192	4157-4158	\|	_	_
16-193	4159-4179	so-duplicates-pacsv1	_	_
16-194	4179-4180	-	_	_
16-195	4180-4185	train	_	_
16-196	4214-4215	\|	_	_
16-197	4216-4219	nbs	_	_
16-198	4219-4220	/	_	_
16-199	4220-4224	tuse	_	_
16-200	4224-4225	/	_	_
16-201	4225-4241	tuse\_tuned.ipynb	_	_
16-202	4244-4245	\|	_	_
16-203	4246-4247	\|	_	_
16-204	4248-4270	ensemble-embedder-pacs	_	_
16-205	4275-4276	\|	_	_
16-206	4277-4288	description	_	_
16-207	4289-4290	+	_	_
16-208	4291-4295	code	_	_
16-209	4296-4297	\|	_	_
16-210	4298-4314	staqc-py-cleaned	_	_
16-211	4315-4316	+	_	_
16-212	4317-4341	so-duplicates-pacs-train	_	_
16-213	4342-4343	\|	_	_
16-214	4344-4347	nbs	_	_
16-215	4347-4348	/	_	_
16-216	4348-4356	ensemble	_	_
16-217	4356-4357	/	_	_
16-218	4357-4371	ensemble.ipynb	_	_
16-219	4372-4373	\|	_	_
16-220	4375-4376	#	_	_
16-221	4376-4377	#	_	_
16-222	4378-4386	Datasets	_	_
16-223	4388-4392	This	_	_
16-224	4393-4400	project	_	_
16-225	4401-4409	provides	_	_
16-226	4410-4411	a	_	_
16-227	4412-4422	consistent	_	_
16-228	4423-4432	interface	_	_
16-229	4433-4435	to	_	_
16-230	4436-4444	download	_	_
16-231	4445-4448	and	_	_
16-232	4449-4453	load	_	_
16-233	4454-4462	datasets	_	_
16-234	4463-4470	related	_	_
16-235	4471-4473	to	_	_
16-236	4474-4478	code	_	_
16-237	4479-4485	search	_	_
16-238	4485-4486	.	_	_
16-239	4488-4489	#	_	_
16-240	4489-4490	#	_	_
16-241	4490-4491	#	_	_
16-242	4492-4499	Snippet	_	_
16-243	4500-4511	collections	_	_
16-244	4513-4514	#	_	_
16-245	4514-4515	#	_	_
16-246	4515-4516	#	_	_
16-247	4516-4517	#	_	_
16-248	4519-4526	Example	_	_
16-249	4526-4527	:	_	_
16-250	4528-4532	Load	_	_
16-251	4533-4534	a	_	_
16-252	4535-4542	snippet	_	_
16-253	4543-4553	collection	_	_
16-254	4555-4556	`	_	_
16-255	4556-4557	`	_	_
16-256	4557-4558	`	_	_
16-257	4558-4564	python	_	_
16-258	4565-4569	from	_	_
16-259	4570-4585	codesearch.data	_	_
16-259	4570-4580	codesearch	_	_
16-260	4586-4592	import	_	_
16-261	4593-4616	load\_snippet\_collection	_	_
16-262	4617-4632	collection\_name	_	_
16-263	4633-4634	=	_	_
16-264	4635-4636	"	_	_
16-265	4636-4647	so-ds-feb20	_	_
16-266	4647-4648	"	_	_
16-267	4649-4657	snippets	_	_
16-268	4658-4659	=	_	_
16-269	4660-4683	load\_snippet\_collection	_	_
16-270	4683-4684	(	_	_
16-271	4684-4699	collection\_name	_	_
16-272	4699-4700	)	_	_
16-273	4701-4702	`	_	_
16-274	4702-4703	`	_	_
16-275	4703-4704	`	_	_
16-276	4706-4707	#	_	_
16-277	4707-4708	#	_	_
16-278	4708-4709	#	_	_
16-279	4709-4710	#	_	_
16-280	4711-4720	Available	_	_
16-281	4721-4728	snippet	_	_
16-282	4729-4740	collections	_	_
16-283	4741-4743	In	_	_
16-284	4744-4747	the	_	_
16-285	4748-4753	table	_	_
16-286	4754-4759	below	_	_
16-287	4760-4763	you	_	_
16-288	4764-4768	find	_	_
16-289	4769-4774	which	_	_
16-290	4775-4782	snippet	_	_
16-291	4783-4794	collections	_	_
16-292	4795-4798	can	_	_
16-293	4799-4801	be	_	_
16-294	4802-4808	loaded	_	_
16-295	4808-4809	.	_	_

#Text=The staqc-py-cleaned, conala-curated, and codesearchnet collections are derived from existing datasets.
17-1	4810-4813	The	_	_
17-2	4814-4830	staqc-py-cleaned	_	_
17-3	4830-4831	,	_	_
17-4	4832-4846	conala-curated	_	_
17-5	4846-4847	,	_	_
17-6	4848-4851	and	_	_
17-7	4852-4865	codesearchnet	_	_
17-8	4866-4877	collections	_	_
17-9	4878-4881	are	_	_
17-10	4882-4889	derived	_	_
17-11	4890-4894	from	_	_
17-12	4895-4903	existing	_	_
17-13	4904-4912	datasets	_	_
17-14	4912-4913	.	_	_

#Text=For staqc-py and conala-curated we did some additional processing, for the codesearchnet collections we merely load the original dataset in a format that is consistent with our code.
18-1	4914-4917	For	_	_
18-2	4918-4926	staqc-py	_	_
18-3	4927-4930	and	_	_
18-4	4931-4945	conala-curated	_	_
18-5	4946-4948	we	_	_
18-6	4949-4952	did	_	_
18-7	4953-4957	some	_	_
18-8	4958-4968	additional	_	_
18-9	4969-4979	processing	_	_
18-10	4979-4980	,	_	_
18-11	4981-4984	for	_	_
18-12	4985-4988	the	_	_
18-13	4989-5002	codesearchnet	_	_
18-14	5003-5014	collections	_	_
18-15	5015-5017	we	_	_
18-16	5018-5024	merely	_	_
18-17	5025-5029	load	_	_
18-18	5030-5033	the	_	_
18-19	5034-5042	original	_	_
18-20	5043-5050	dataset	_	_
18-21	5051-5053	in	_	_
18-22	5054-5055	a	_	_
18-23	5056-5062	format	_	_
18-24	5063-5067	that	_	_
18-25	5068-5070	is	_	_
18-26	5071-5081	consistent	_	_
18-27	5082-5086	with	_	_
18-28	5087-5090	our	_	_
18-29	5091-5095	code	_	_
18-30	5095-5096	.	_	_

#Text=If you were to use any of these datasets in your research, please make sure to cite the respective works
19-1	5099-5101	If	_	_
19-2	5102-5105	you	_	_
19-3	5106-5110	were	_	_
19-4	5111-5113	to	_	_
19-5	5114-5117	use	_	_
19-6	5118-5121	any	_	_
19-7	5122-5124	of	_	_
19-8	5125-5130	these	_	_
19-9	5131-5139	datasets	_	_
19-10	5140-5142	in	_	_
19-11	5143-5147	your	_	_
19-12	5148-5156	research	_	_
19-13	5156-5157	,	_	_
19-14	5158-5164	please	_	_
19-15	5165-5169	make	_	_
19-16	5170-5174	sure	_	_
19-17	5175-5177	to	_	_
19-18	5178-5182	cite	_	_
19-19	5183-5186	the	_	_
19-20	5187-5197	respective	_	_
19-21	5198-5203	works	_	_

#Text=.
20-1	5203-5204	.	_	_

#Text=\| name                                          \| description                                                                                                                  \| \|-----------------------------------------------\|------------------------------------------------------------------------------------------------------------------------------\| \| so-ds-feb20                                   \| Mined from Python Stack Overflow posts related to data science.
21-1	5206-5207	\|	_	_
21-2	5208-5212	name	_	_
21-3	5254-5255	\|	_	_
21-4	5256-5267	description	_	_
21-5	5381-5382	\|	_	_
21-6	5383-5384	\|	_	_
21-7	5384-5385	-	_	_
21-8	5385-5386	-	_	_
21-9	5386-5387	-	_	_
21-10	5387-5388	-	_	_
21-11	5388-5389	-	_	_
21-12	5389-5390	-	_	_
21-13	5390-5391	-	_	_
21-14	5391-5392	-	_	_
21-15	5392-5393	-	_	_
21-16	5393-5394	-	_	_
21-17	5394-5395	-	_	_
21-18	5395-5396	-	_	_
21-19	5396-5397	-	_	_
21-20	5397-5398	-	_	_
21-21	5398-5399	-	_	_
21-22	5399-5400	-	_	_
21-23	5400-5401	-	_	_
21-24	5401-5402	-	_	_
21-25	5402-5403	-	_	_
21-26	5403-5404	-	_	_
21-27	5404-5405	-	_	_
21-28	5405-5406	-	_	_
21-29	5406-5407	-	_	_
21-30	5407-5408	-	_	_
21-31	5408-5409	-	_	_
21-32	5409-5410	-	_	_
21-33	5410-5411	-	_	_
21-34	5411-5412	-	_	_
21-35	5412-5413	-	_	_
21-36	5413-5414	-	_	_
21-37	5414-5415	-	_	_
21-38	5415-5416	-	_	_
21-39	5416-5417	-	_	_
21-40	5417-5418	-	_	_
21-41	5418-5419	-	_	_
21-42	5419-5420	-	_	_
21-43	5420-5421	-	_	_
21-44	5421-5422	-	_	_
21-45	5422-5423	-	_	_
21-46	5423-5424	-	_	_
21-47	5424-5425	-	_	_
21-48	5425-5426	-	_	_
21-49	5426-5427	-	_	_
21-50	5427-5428	-	_	_
21-51	5428-5429	-	_	_
21-52	5429-5430	-	_	_
21-53	5430-5431	-	_	_
21-54	5431-5432	\|	_	_
21-55	5432-5433	-	_	_
21-56	5433-5434	-	_	_
21-57	5434-5435	-	_	_
21-58	5435-5436	-	_	_
21-59	5436-5437	-	_	_
21-60	5437-5438	-	_	_
21-61	5438-5439	-	_	_
21-62	5439-5440	-	_	_
21-63	5440-5441	-	_	_
21-64	5441-5442	-	_	_
21-65	5442-5443	-	_	_
21-66	5443-5444	-	_	_
21-67	5444-5445	-	_	_
21-68	5445-5446	-	_	_
21-69	5446-5447	-	_	_
21-70	5447-5448	-	_	_
21-71	5448-5449	-	_	_
21-72	5449-5450	-	_	_
21-73	5450-5451	-	_	_
21-74	5451-5452	-	_	_
21-75	5452-5453	-	_	_
21-76	5453-5454	-	_	_
21-77	5454-5455	-	_	_
21-78	5455-5456	-	_	_
21-79	5456-5457	-	_	_
21-80	5457-5458	-	_	_
21-81	5458-5459	-	_	_
21-82	5459-5460	-	_	_
21-83	5460-5461	-	_	_
21-84	5461-5462	-	_	_
21-85	5462-5463	-	_	_
21-86	5463-5464	-	_	_
21-87	5464-5465	-	_	_
21-88	5465-5466	-	_	_
21-89	5466-5467	-	_	_
21-90	5467-5468	-	_	_
21-91	5468-5469	-	_	_
21-92	5469-5470	-	_	_
21-93	5470-5471	-	_	_
21-94	5471-5472	-	_	_
21-95	5472-5473	-	_	_
21-96	5473-5474	-	_	_
21-97	5474-5475	-	_	_
21-98	5475-5476	-	_	_
21-99	5476-5477	-	_	_
21-100	5477-5478	-	_	_
21-101	5478-5479	-	_	_
21-102	5479-5480	-	_	_
21-103	5480-5481	-	_	_
21-104	5481-5482	-	_	_
21-105	5482-5483	-	_	_
21-106	5483-5484	-	_	_
21-107	5484-5485	-	_	_
21-108	5485-5486	-	_	_
21-109	5486-5487	-	_	_
21-110	5487-5488	-	_	_
21-111	5488-5489	-	_	_
21-112	5489-5490	-	_	_
21-113	5490-5491	-	_	_
21-114	5491-5492	-	_	_
21-115	5492-5493	-	_	_
21-116	5493-5494	-	_	_
21-117	5494-5495	-	_	_
21-118	5495-5496	-	_	_
21-119	5496-5497	-	_	_
21-120	5497-5498	-	_	_
21-121	5498-5499	-	_	_
21-122	5499-5500	-	_	_
21-123	5500-5501	-	_	_
21-124	5501-5502	-	_	_
21-125	5502-5503	-	_	_
21-126	5503-5504	-	_	_
21-127	5504-5505	-	_	_
21-128	5505-5506	-	_	_
21-129	5506-5507	-	_	_
21-130	5507-5508	-	_	_
21-131	5508-5509	-	_	_
21-132	5509-5510	-	_	_
21-133	5510-5511	-	_	_
21-134	5511-5512	-	_	_
21-135	5512-5513	-	_	_
21-136	5513-5514	-	_	_
21-137	5514-5515	-	_	_
21-138	5515-5516	-	_	_
21-139	5516-5517	-	_	_
21-140	5517-5518	-	_	_
21-141	5518-5519	-	_	_
21-142	5519-5520	-	_	_
21-143	5520-5521	-	_	_
21-144	5521-5522	-	_	_
21-145	5522-5523	-	_	_
21-146	5523-5524	-	_	_
21-147	5524-5525	-	_	_
21-148	5525-5526	-	_	_
21-149	5526-5527	-	_	_
21-150	5527-5528	-	_	_
21-151	5528-5529	-	_	_
21-152	5529-5530	-	_	_
21-153	5530-5531	-	_	_
21-154	5531-5532	-	_	_
21-155	5532-5533	-	_	_
21-156	5533-5534	-	_	_
21-157	5534-5535	-	_	_
21-158	5535-5536	-	_	_
21-159	5536-5537	-	_	_
21-160	5537-5538	-	_	_
21-161	5538-5539	-	_	_
21-162	5539-5540	-	_	_
21-163	5540-5541	-	_	_
21-164	5541-5542	-	_	_
21-165	5542-5543	-	_	_
21-166	5543-5544	-	_	_
21-167	5544-5545	-	_	_
21-168	5545-5546	-	_	_
21-169	5546-5547	-	_	_
21-170	5547-5548	-	_	_
21-171	5548-5549	-	_	_
21-172	5549-5550	-	_	_
21-173	5550-5551	-	_	_
21-174	5551-5552	-	_	_
21-175	5552-5553	-	_	_
21-176	5553-5554	-	_	_
21-177	5554-5555	-	_	_
21-178	5555-5556	-	_	_
21-179	5556-5557	-	_	_
21-180	5557-5558	-	_	_
21-181	5558-5559	\|	_	_
21-182	5560-5561	\|	_	_
21-183	5562-5573	so-ds-feb20	_	_
21-184	5608-5609	\|	_	_
21-185	5610-5615	Mined	_	_
21-186	5616-5620	from	_	_
21-187	5621-5627	Python	_	_
21-188	5628-5633	Stack	_	_
21-189	5634-5642	Overflow	_	_
21-190	5643-5648	posts	_	_
21-191	5649-5656	related	_	_
21-192	5657-5659	to	_	_
21-193	5660-5664	data	_	_
21-194	5665-5672	science	_	_
21-195	5672-5673	.	_	_

#Text=Stack Overflow dumps can be found here: https://archive.org/details/stackexchange, \[LICENSE\](https://creativecommons.org/licenses/by-sa/4.0/)                                                             \| \| staqc-py-cleaned                     \| Derived from the Python StaQC snippets (additional cleaning was done as decribed in the paper).
22-1	5674-5679	Stack	_	_
22-2	5680-5688	Overflow	_	_
22-3	5689-5694	dumps	_	_
22-4	5695-5698	can	_	_
22-5	5699-5701	be	_	_
22-6	5702-5707	found	_	_
22-7	5708-5712	here	_	_
22-8	5712-5713	:	_	_
22-9	5714-5719	https	_	_
22-10	5719-5720	:	_	_
22-11	5720-5721	/	_	_
22-12	5721-5722	/	_	_
22-13	5722-5733	archive.org	_	_
22-14	5733-5734	/	_	_
22-15	5734-5741	details	_	_
22-16	5741-5742	/	_	_
22-17	5742-5755	stackexchange	_	_
22-18	5755-5756	,	_	_
22-19	5757-5758	\[	_	_
22-20	5758-5765	LICENSE	_	_
22-21	5765-5766	\]	_	_
22-22	5766-5767	(	_	_
22-23	5767-5772	https	_	_
22-24	5772-5773	:	_	_
22-25	5773-5774	/	_	_
22-26	5774-5775	/	_	_
22-27	5775-5794	creativecommons.org	_	_
22-28	5794-5795	/	_	_
22-29	5795-5803	licenses	_	_
22-30	5803-5804	/	_	_
22-31	5804-5809	by-sa	_	_
22-32	5809-5810	/	_	_
22-33	5810-5813	4.0	_	_
22-34	5813-5814	/	_	_
22-35	5814-5815	)	_	_
22-36	5876-5877	\|	_	_
22-37	5878-5879	\|	_	_
22-38	5880-5896	staqc-py-cleaned	_	_
22-39	5917-5918	\|	_	_
22-40	5919-5926	Derived	_	_
22-41	5927-5931	from	_	_
22-42	5932-5935	the	_	_
22-43	5936-5942	Python	_	_
22-44	5943-5948	StaQC	_	_
22-45	5949-5957	snippets	_	_
22-46	5958-5959	(	_	_
22-47	5959-5969	additional	_	_
22-48	5970-5978	cleaning	_	_
22-49	5979-5982	was	_	_
22-50	5983-5987	done	_	_
22-51	5988-5990	as	_	_
22-52	5991-5999	decribed	_	_
22-53	6000-6002	in	_	_
22-54	6003-6006	the	_	_
22-55	6007-6012	paper	_	_
22-56	6012-6013	)	_	_
22-57	6013-6014	.	_	_

#Text=See https://github.com/LittleYUYU/StackOverflow-Question-Code-Dataset, \[LICENSE\](https://github.com/LittleYUYU/StackOverflow-Question-Code-Dataset/blob/master/LICENSE.txt)                               \| \| conala-curated                                \| Derived from the curated snippets of the CoNaLa benchmark.
23-1	6015-6018	See	_	_
23-2	6019-6024	https	_	_
23-3	6024-6025	:	_	_
23-4	6025-6026	/	_	_
23-5	6026-6027	/	_	_
23-6	6027-6037	github.com	_	_
23-7	6037-6038	/	_	_
23-8	6038-6048	LittleYUYU	_	_
23-9	6048-6049	/	_	_
23-10	6049-6084	StackOverflow-Question-Code-Dataset	_	_
23-11	6084-6085	,	_	_
23-12	6086-6087	\[	_	_
23-13	6087-6094	LICENSE	_	_
23-14	6094-6095	\]	_	_
23-15	6095-6096	(	_	_
23-16	6096-6101	https	_	_
23-17	6101-6102	:	_	_
23-18	6102-6103	/	_	_
23-19	6103-6104	/	_	_
23-20	6104-6114	github.com	_	_
23-21	6114-6115	/	_	_
23-22	6115-6125	LittleYUYU	_	_
23-23	6125-6126	/	_	_
23-24	6126-6161	StackOverflow-Question-Code-Dataset	_	_
23-24	6126-6139	StackOverflow	_	_
23-25	6161-6162	/	_	_
23-26	6162-6166	blob	_	_
23-27	6166-6167	/	_	_
23-28	6167-6173	master	_	_
23-29	6173-6174	/	_	_
23-30	6174-6185	LICENSE.txt	_	_
23-31	6185-6186	)	_	_
23-32	6217-6218	\|	_	_
23-33	6219-6220	\|	_	_
23-34	6221-6235	conala-curated	_	_
23-35	6267-6268	\|	_	_
23-36	6269-6276	Derived	_	_
23-37	6277-6281	from	_	_
23-38	6282-6285	the	_	_
23-39	6286-6293	curated	_	_
23-40	6294-6302	snippets	_	_
23-41	6303-6305	of	_	_
23-42	6306-6309	the	_	_
23-43	6310-6316	CoNaLa	_	_
23-44	6317-6326	benchmark	_	_
23-45	6326-6327	.	_	_

#Text=See https://conala-corpus.github.io/ , \[LICENSE\](https://creativecommons.org/licenses/by-sa/4.0/)                                                                                         \| \| codesearchnet-{language}-{train\\\|valid\\\|test} \| The CodeSearchNet snippet collections used for training/MRR validation/MRR testing.
24-1	6328-6331	See	_	_
24-2	6332-6337	https	_	_
24-3	6337-6338	:	_	_
24-4	6338-6339	/	_	_
24-5	6339-6340	/	_	_
24-6	6340-6363	conala-corpus.github.io	_	_
24-6	6340-6346	conala	_	_
24-7	6363-6364	/	_	_
24-8	6365-6366	,	_	_
24-9	6367-6368	\[	_	_
24-10	6368-6375	LICENSE	_	_
24-11	6375-6376	\]	_	_
24-12	6376-6377	(	_	_
24-13	6377-6382	https	_	_
24-14	6382-6383	:	_	_
24-15	6383-6384	/	_	_
24-16	6384-6385	/	_	_
24-17	6385-6404	creativecommons.org	_	_
24-18	6404-6405	/	_	_
24-19	6405-6413	licenses	_	_
24-20	6413-6414	/	_	_
24-21	6414-6419	by-sa	_	_
24-22	6419-6420	/	_	_
24-23	6420-6423	4.0	_	_
24-24	6423-6424	/	_	_
24-25	6424-6425	)	_	_
24-26	6514-6515	\|	_	_
24-27	6516-6517	\|	_	_
24-28	6518-6531	codesearchnet	_	_
24-29	6531-6532	-	_	_
24-30	6532-6533	{	_	_
24-31	6533-6541	language	_	_
24-32	6541-6542	}	_	_
24-33	6542-6543	-	_	_
24-34	6543-6544	{	_	_
24-35	6544-6549	train	_	_
24-36	6549-6550	\\	_	_
24-37	6550-6551	\|	_	_
24-38	6551-6556	valid	_	_
24-39	6556-6557	\\	_	_
24-40	6557-6558	\|	_	_
24-41	6558-6562	test	_	_
24-42	6562-6563	}	_	_
24-43	6564-6565	\|	_	_
24-44	6566-6569	The	_	_
24-45	6570-6583	CodeSearchNet	_	_
24-46	6584-6591	snippet	_	_
24-47	6592-6603	collections	_	_
24-48	6604-6608	used	_	_
24-49	6609-6612	for	_	_
24-50	6613-6621	training	_	_
24-51	6621-6622	/	_	_
24-52	6622-6625	MRR	_	_
24-53	6626-6636	validation	_	_
24-54	6636-6637	/	_	_
24-55	6637-6640	MRR	_	_
24-56	6641-6648	testing	_	_
24-57	6648-6649	.	_	_

#Text=See https://github.com/github/CodeSearchNet.
25-1	6650-6653	See	_	_
25-2	6654-6659	https	_	_
25-3	6659-6660	:	_	_
25-4	6660-6661	/	_	_
25-5	6661-6662	/	_	_
25-6	6662-6672	github.com	_	_
25-7	6672-6673	/	_	_
25-8	6673-6679	github	_	_
25-9	6679-6680	/	_	_
25-10	6680-6693	CodeSearchNet	_	_
25-11	6693-6694	.	_	_

#Text=Licenses of the individial snippets can be found in pkl files
26-1	6695-6703	Licenses	_	_
26-2	6704-6706	of	_	_
26-3	6707-6710	the	_	_
26-4	6711-6721	individial	_	_
26-5	6722-6730	snippets	_	_
26-6	6731-6734	can	_	_
26-7	6735-6737	be	_	_
26-8	6738-6743	found	_	_
26-9	6744-6746	in	_	_
26-10	6747-6750	pkl	_	_
26-11	6751-6756	files	_	_

#Text=.
27-1	6756-6757	.	_	_

#Text=\| \| codesearchnet-{language}                      \| The CodeSearchNet snippet collections used for the weights and biases benchmark.
28-1	6800-6801	\|	_	_
28-2	6802-6803	\|	_	_
28-3	6804-6817	codesearchnet	_	_
28-4	6817-6818	-	_	_
28-5	6818-6819	{	_	_
28-6	6819-6827	language	_	_
28-7	6827-6828	}	_	_
28-8	6850-6851	\|	_	_
28-9	6852-6855	The	_	_
28-10	6856-6869	CodeSearchNet	_	_
28-11	6870-6877	snippet	_	_
28-12	6878-6889	collections	_	_
28-13	6890-6894	used	_	_
28-14	6895-6898	for	_	_
28-15	6899-6902	the	_	_
28-16	6903-6910	weights	_	_
28-17	6911-6914	and	_	_
28-18	6915-6921	biases	_	_
28-19	6922-6931	benchmark	_	_
28-20	6931-6932	.	_	_

#Text=See https://github.com/github/CodeSearchNet.
29-1	6933-6936	See	_	_
29-2	6937-6942	https	_	_
29-3	6942-6943	:	_	_
29-4	6943-6944	/	_	_
29-5	6944-6945	/	_	_
29-6	6945-6955	github.com	_	_
29-7	6955-6956	/	_	_
29-8	6956-6962	github	_	_
29-9	6962-6963	/	_	_
29-10	6963-6976	CodeSearchNet	_	_
29-11	6976-6977	.	_	_

#Text=Licenses of the individial snippets can be found in pkl files.
30-1	6978-6986	Licenses	_	_
30-2	6987-6989	of	_	_
30-3	6990-6993	the	_	_
30-4	6994-7004	individial	_	_
30-5	7005-7013	snippets	_	_
30-6	7014-7017	can	_	_
30-7	7018-7020	be	_	_
30-8	7021-7026	found	_	_
30-9	7027-7029	in	_	_
30-10	7030-7033	pkl	_	_
30-11	7034-7039	files	_	_
30-12	7039-7040	.	_	_

#Text=\*\*Note\*\*: not all of these snippets have descriptions \|  ### Evaluation data Evaluation datasets link queries to relevant snippets in one of the above snippet collections.   #### Example: load an evaluation dataset ```python from codesearch.data import load\_eval\_dataset queries, query2ids = load\_eval\_dataset("so-ds-feb20-valid") ```  #### Available evaluation datasets \| name                           \| description                                                                     \| \|--------------------------------\|---------------------------------------------------------------------------------\| \| so-ds-feb20-{valid\\\|test}      \| Queries paired to relevant snippets in the so-ds-feb20 snippet collection
31-1	7041-7042	\*	_	_
31-2	7042-7043	\*	_	_
31-3	7043-7047	Note	_	_
31-4	7047-7048	\*	_	_
31-5	7048-7049	\*	_	_
31-6	7049-7050	:	_	_
31-7	7051-7054	not	_	_
31-8	7055-7058	all	_	_
31-9	7059-7061	of	_	_
31-10	7062-7067	these	_	_
31-11	7068-7076	snippets	_	_
31-12	7077-7081	have	_	_
31-13	7082-7094	descriptions	_	_
31-14	7095-7096	\|	_	_
31-15	7098-7099	#	_	_
31-16	7099-7100	#	_	_
31-17	7100-7101	#	_	_
31-18	7102-7112	Evaluation	_	_
31-19	7113-7117	data	_	_
31-20	7118-7128	Evaluation	_	_
31-21	7129-7137	datasets	_	_
31-22	7138-7142	link	_	_
31-23	7143-7150	queries	_	_
31-24	7151-7153	to	_	_
31-25	7154-7162	relevant	_	_
31-26	7163-7171	snippets	_	_
31-27	7172-7174	in	_	_
31-28	7175-7178	one	_	_
31-29	7179-7181	of	_	_
31-30	7182-7185	the	_	_
31-31	7186-7191	above	_	_
31-32	7192-7199	snippet	_	_
31-33	7200-7211	collections	_	_
31-34	7211-7212	.	_	_
31-35	7215-7216	#	_	_
31-36	7216-7217	#	_	_
31-37	7217-7218	#	_	_
31-38	7218-7219	#	_	_
31-39	7220-7227	Example	_	_
31-40	7227-7228	:	_	_
31-41	7229-7233	load	_	_
31-42	7234-7236	an	_	_
31-43	7237-7247	evaluation	_	_
31-44	7248-7255	dataset	_	_
31-45	7256-7257	`	_	_
31-46	7257-7258	`	_	_
31-47	7258-7259	`	_	_
31-48	7259-7265	python	_	_
31-49	7266-7270	from	_	_
31-50	7271-7286	codesearch.data	_	_
31-51	7287-7293	import	_	_
31-52	7294-7311	load\_eval\_dataset	_	_
31-53	7312-7319	queries	_	_
31-54	7319-7320	,	_	_
31-55	7321-7330	query2ids	_	_
31-56	7331-7332	=	_	_
31-57	7333-7350	load\_eval\_dataset	_	_
31-58	7350-7351	(	_	_
31-59	7351-7352	"	_	_
31-60	7352-7363	so-ds-feb20	_	_
31-61	7363-7364	-	_	_
31-62	7364-7369	valid	_	_
31-63	7369-7370	"	_	_
31-64	7370-7371	)	_	_
31-65	7372-7373	`	_	_
31-66	7373-7374	`	_	_
31-67	7374-7375	`	_	_
31-68	7377-7378	#	_	_
31-69	7378-7379	#	_	_
31-70	7379-7380	#	_	_
31-71	7380-7381	#	_	_
31-72	7382-7391	Available	_	_
31-73	7392-7402	evaluation	_	_
31-74	7403-7411	datasets	_	_
31-75	7412-7413	\|	_	_
31-76	7414-7418	name	_	_
31-77	7445-7446	\|	_	_
31-78	7447-7458	description	_	_
31-79	7527-7528	\|	_	_
31-80	7529-7530	\|	_	_
31-81	7530-7531	-	_	_
31-82	7531-7532	-	_	_
31-83	7532-7533	-	_	_
31-84	7533-7534	-	_	_
31-85	7534-7535	-	_	_
31-86	7535-7536	-	_	_
31-87	7536-7537	-	_	_
31-88	7537-7538	-	_	_
31-89	7538-7539	-	_	_
31-90	7539-7540	-	_	_
31-91	7540-7541	-	_	_
31-92	7541-7542	-	_	_
31-93	7542-7543	-	_	_
31-94	7543-7544	-	_	_
31-95	7544-7545	-	_	_
31-96	7545-7546	-	_	_
31-97	7546-7547	-	_	_
31-98	7547-7548	-	_	_
31-99	7548-7549	-	_	_
31-100	7549-7550	-	_	_
31-101	7550-7551	-	_	_
31-102	7551-7552	-	_	_
31-103	7552-7553	-	_	_
31-104	7553-7554	-	_	_
31-105	7554-7555	-	_	_
31-106	7555-7556	-	_	_
31-107	7556-7557	-	_	_
31-108	7557-7558	-	_	_
31-109	7558-7559	-	_	_
31-110	7559-7560	-	_	_
31-111	7560-7561	-	_	_
31-112	7561-7562	-	_	_
31-113	7562-7563	\|	_	_
31-114	7563-7564	-	_	_
31-115	7564-7565	-	_	_
31-116	7565-7566	-	_	_
31-117	7566-7567	-	_	_
31-118	7567-7568	-	_	_
31-119	7568-7569	-	_	_
31-120	7569-7570	-	_	_
31-121	7570-7571	-	_	_
31-122	7571-7572	-	_	_
31-123	7572-7573	-	_	_
31-124	7573-7574	-	_	_
31-125	7574-7575	-	_	_
31-126	7575-7576	-	_	_
31-127	7576-7577	-	_	_
31-128	7577-7578	-	_	_
31-129	7578-7579	-	_	_
31-130	7579-7580	-	_	_
31-131	7580-7581	-	_	_
31-132	7581-7582	-	_	_
31-133	7582-7583	-	_	_
31-134	7583-7584	-	_	_
31-135	7584-7585	-	_	_
31-136	7585-7586	-	_	_
31-137	7586-7587	-	_	_
31-138	7587-7588	-	_	_
31-139	7588-7589	-	_	_
31-140	7589-7590	-	_	_
31-141	7590-7591	-	_	_
31-142	7591-7592	-	_	_
31-143	7592-7593	-	_	_
31-144	7593-7594	-	_	_
31-145	7594-7595	-	_	_
31-146	7595-7596	-	_	_
31-147	7596-7597	-	_	_
31-148	7597-7598	-	_	_
31-149	7598-7599	-	_	_
31-150	7599-7600	-	_	_
31-151	7600-7601	-	_	_
31-152	7601-7602	-	_	_
31-153	7602-7603	-	_	_
31-154	7603-7604	-	_	_
31-155	7604-7605	-	_	_
31-156	7605-7606	-	_	_
31-157	7606-7607	-	_	_
31-158	7607-7608	-	_	_
31-159	7608-7609	-	_	_
31-160	7609-7610	-	_	_
31-161	7610-7611	-	_	_
31-162	7611-7612	-	_	_
31-163	7612-7613	-	_	_
31-164	7613-7614	-	_	_
31-165	7614-7615	-	_	_
31-166	7615-7616	-	_	_
31-167	7616-7617	-	_	_
31-168	7617-7618	-	_	_
31-169	7618-7619	-	_	_
31-170	7619-7620	-	_	_
31-171	7620-7621	-	_	_
31-172	7621-7622	-	_	_
31-173	7622-7623	-	_	_
31-174	7623-7624	-	_	_
31-175	7624-7625	-	_	_
31-176	7625-7626	-	_	_
31-177	7626-7627	-	_	_
31-178	7627-7628	-	_	_
31-179	7628-7629	-	_	_
31-180	7629-7630	-	_	_
31-181	7630-7631	-	_	_
31-182	7631-7632	-	_	_
31-183	7632-7633	-	_	_
31-184	7633-7634	-	_	_
31-185	7634-7635	-	_	_
31-186	7635-7636	-	_	_
31-187	7636-7637	-	_	_
31-188	7637-7638	-	_	_
31-189	7638-7639	-	_	_
31-190	7639-7640	-	_	_
31-191	7640-7641	-	_	_
31-192	7641-7642	-	_	_
31-193	7642-7643	-	_	_
31-194	7643-7644	-	_	_
31-195	7644-7645	\|	_	_
31-196	7646-7647	\|	_	_
31-197	7648-7659	so-ds-feb20	_	_
31-198	7659-7660	-	_	_
31-199	7660-7661	{	_	_
31-200	7661-7666	valid	_	_
31-201	7666-7667	\\	_	_
31-202	7667-7668	\|	_	_
31-203	7668-7672	test	_	_
31-204	7672-7673	}	_	_
31-205	7679-7680	\|	_	_
31-206	7681-7688	Queries	_	_
31-207	7689-7695	paired	_	_
31-208	7696-7698	to	_	_
31-209	7699-7707	relevant	_	_
31-210	7708-7716	snippets	_	_
31-211	7717-7719	in	_	_
31-212	7720-7723	the	_	_
31-213	7724-7735	so-ds-feb20	_	_
31-214	7736-7743	snippet	_	_
31-215	7744-7754	collection	_	_

#Text=.
32-1	7754-7755	.	_	_

#Text=\| \| staqc-py-cleaned-{valid\\\|test} \| Queries paired to relevant snippets in the staqc-py-cleaned snippet collection. \| \| conala-curated-0.5-test        \| Queries paired to relevant snippets in the CoNaLa benchmark                     \|   It is also possible to load a snippet collection as evaluation data.
33-1	7761-7762	\|	_	_
33-2	7763-7764	\|	_	_
33-3	7765-7781	staqc-py-cleaned	_	_
33-4	7781-7782	-	_	_
33-5	7782-7783	{	_	_
33-6	7783-7788	valid	_	_
33-7	7788-7789	\\	_	_
33-8	7789-7790	\|	_	_
33-9	7790-7794	test	_	_
33-10	7794-7795	}	_	_
33-11	7796-7797	\|	_	_
33-12	7798-7805	Queries	_	_
33-13	7806-7812	paired	_	_
33-14	7813-7815	to	_	_
33-15	7816-7824	relevant	_	_
33-16	7825-7833	snippets	_	_
33-17	7834-7836	in	_	_
33-18	7837-7840	the	_	_
33-19	7841-7857	staqc-py-cleaned	_	_
33-20	7858-7865	snippet	_	_
33-21	7866-7876	collection	_	_
33-22	7876-7877	.	_	_
33-23	7878-7879	\|	_	_
33-24	7880-7881	\|	_	_
33-25	7882-7896	conala-curated	_	_
33-26	7896-7897	-	_	_
33-27	7897-7900	0.5	_	_
33-28	7900-7901	-	_	_
33-29	7901-7905	test	_	_
33-30	7913-7914	\|	_	_
33-31	7915-7922	Queries	_	_
33-32	7923-7929	paired	_	_
33-33	7930-7932	to	_	_
33-34	7933-7941	relevant	_	_
33-35	7942-7950	snippets	_	_
33-36	7951-7953	in	_	_
33-37	7954-7957	the	_	_
33-38	7958-7964	CoNaLa	_	_
33-39	7965-7974	benchmark	_	_
33-40	7995-7996	\|	_	_
33-41	7999-8001	It	_	_
33-42	8002-8004	is	_	_
33-43	8005-8009	also	_	_
33-44	8010-8018	possible	_	_
33-45	8019-8021	to	_	_
33-46	8022-8026	load	_	_
33-47	8027-8028	a	_	_
33-48	8029-8036	snippet	_	_
33-49	8037-8047	collection	_	_
33-50	8048-8050	as	_	_
33-51	8051-8061	evaluation	_	_
33-52	8062-8066	data	_	_
33-53	8066-8067	.	_	_

#Text=The descriptions will be used as queries.
34-1	8068-8071	The	_	_
34-2	8072-8084	descriptions	_	_
34-3	8085-8089	will	_	_
34-4	8090-8092	be	_	_
34-5	8093-8097	used	_	_
34-6	8098-8100	as	_	_
34-7	8101-8108	queries	_	_
34-8	8108-8109	.	_	_

#Text=Note that this only makes sense to evaluate code-only models (i.e., models that do not use the description field).  #### Example: load a snippet collection as evaluation data ```python queries, query2ids = load\_eval\_dataset("codesearchnet-python-valid") ```   ### Training data  The different models we implement use different kinds of training data.
35-1	8110-8114	Note	_	_
35-2	8115-8119	that	_	_
35-3	8120-8124	this	_	_
35-4	8125-8129	only	_	_
35-5	8130-8135	makes	_	_
35-6	8136-8141	sense	_	_
35-7	8142-8144	to	_	_
35-8	8145-8153	evaluate	_	_
35-9	8154-8163	code-only	_	_
35-10	8164-8170	models	_	_
35-11	8171-8172	(	_	_
35-12	8172-8175	i.e	_	_
35-13	8175-8176	.	_	_
35-14	8176-8177	,	_	_
35-15	8178-8184	models	_	_
35-16	8185-8189	that	_	_
35-17	8190-8192	do	_	_
35-18	8193-8196	not	_	_
35-19	8197-8200	use	_	_
35-20	8201-8204	the	_	_
35-21	8205-8216	description	_	_
35-22	8217-8222	field	_	_
35-23	8222-8223	)	_	_
35-24	8223-8224	.	_	_
35-25	8226-8227	#	_	_
35-26	8227-8228	#	_	_
35-27	8228-8229	#	_	_
35-28	8229-8230	#	_	_
35-29	8231-8238	Example	_	_
35-30	8238-8239	:	_	_
35-31	8240-8244	load	_	_
35-32	8245-8246	a	_	_
35-33	8247-8254	snippet	_	_
35-34	8255-8265	collection	_	_
35-35	8266-8268	as	_	_
35-36	8269-8279	evaluation	_	_
35-37	8280-8284	data	_	_
35-38	8285-8286	`	_	_
35-39	8286-8287	`	_	_
35-40	8287-8288	`	_	_
35-41	8288-8294	python	_	_
35-42	8295-8302	queries	_	_
35-43	8302-8303	,	_	_
35-44	8304-8313	query2ids	_	_
35-45	8314-8315	=	_	_
35-46	8316-8333	load\_eval\_dataset	_	_
35-47	8333-8334	(	_	_
35-48	8334-8335	"	_	_
35-49	8335-8361	codesearchnet-python-valid	_	_
35-50	8361-8362	"	_	_
35-51	8362-8363	)	_	_
35-52	8364-8365	`	_	_
35-53	8365-8366	`	_	_
35-54	8366-8367	`	_	_
35-55	8370-8371	#	_	_
35-56	8371-8372	#	_	_
35-57	8372-8373	#	_	_
35-58	8374-8382	Training	_	_
35-59	8383-8387	data	_	_
35-60	8389-8392	The	_	_
35-61	8393-8402	different	_	_
35-62	8403-8409	models	_	_
35-63	8410-8412	we	_	_
35-64	8413-8422	implement	_	_
35-65	8423-8426	use	_	_
35-66	8427-8436	different	_	_
35-67	8437-8442	kinds	_	_
35-68	8443-8445	of	_	_
35-69	8446-8454	training	_	_
35-70	8455-8459	data	_	_
35-71	8459-8460	.	_	_

#Text=Code-only models are trained on pairs of code snippets and descriptions.
36-1	8461-8470	Code-only	_	_
36-2	8471-8477	models	_	_
36-3	8478-8481	are	_	_
36-4	8482-8489	trained	_	_
36-5	8490-8492	on	_	_
36-6	8493-8498	pairs	_	_
36-7	8499-8501	of	_	_
36-8	8502-8506	code	_	_
36-9	8507-8515	snippets	_	_
36-10	8516-8519	and	_	_
36-11	8520-8532	descriptions	_	_
36-12	8532-8533	.	_	_

#Text=For these models, the snippet collections are used as training data (of course you should never train on a snippet collection when you intent to use that load that collection as evaluation data as well).
37-1	8534-8537	For	_	_
37-2	8538-8543	these	_	_
37-3	8544-8550	models	_	_
37-4	8550-8551	,	_	_
37-5	8552-8555	the	_	_
37-6	8556-8563	snippet	_	_
37-7	8564-8575	collections	_	_
37-8	8576-8579	are	_	_
37-9	8580-8584	used	_	_
37-10	8585-8587	as	_	_
37-11	8588-8596	training	_	_
37-12	8597-8601	data	_	_
37-13	8602-8603	(	_	_
37-14	8603-8605	of	_	_
37-15	8606-8612	course	_	_
37-16	8613-8616	you	_	_
37-17	8617-8623	should	_	_
37-18	8624-8629	never	_	_
37-19	8630-8635	train	_	_
37-20	8636-8638	on	_	_
37-21	8639-8640	a	_	_
37-22	8641-8648	snippet	_	_
37-23	8649-8659	collection	_	_
37-24	8660-8664	when	_	_
37-25	8665-8668	you	_	_
37-26	8669-8675	intent	_	_
37-27	8676-8678	to	_	_
37-28	8679-8682	use	_	_
37-29	8683-8687	that	_	_
37-30	8688-8692	load	_	_
37-31	8693-8697	that	_	_
37-32	8698-8708	collection	_	_
37-33	8709-8711	as	_	_
37-34	8712-8722	evaluation	_	_
37-35	8723-8727	data	_	_
37-36	8728-8730	as	_	_
37-37	8731-8735	well	_	_
37-38	8735-8736	)	_	_
37-39	8736-8737	.	_	_

#Text=The USE model is fine-tuned on titles of duplicate Stack Overflow posts.
38-1	8738-8741	The	_	_
38-2	8742-8745	USE	_	_
38-3	8746-8751	model	_	_
38-4	8752-8754	is	_	_
38-5	8755-8765	fine-tuned	_	_
38-6	8766-8768	on	_	_
38-7	8769-8775	titles	_	_
38-8	8776-8778	of	_	_
38-9	8779-8788	duplicate	_	_
38-10	8789-8794	Stack	_	_
38-11	8795-8803	Overflow	_	_
38-12	8804-8809	posts	_	_
38-13	8809-8810	.	_	_

#Text=You can take a look our notebooks (e.g., nbs/ncs/ncs.ipynb, nbs/tuse/tuse\_tuned) to find out how the training is done/how the training data is loaded.
39-1	8811-8814	You	_	_
39-2	8815-8818	can	_	_
39-3	8819-8823	take	_	_
39-4	8824-8825	a	_	_
39-5	8826-8830	look	_	_
39-6	8831-8834	our	_	_
39-7	8835-8844	notebooks	_	_
39-8	8845-8846	(	_	_
39-9	8846-8849	e.g	_	_
39-10	8849-8850	.	_	_
39-11	8850-8851	,	_	_
39-12	8852-8855	nbs	_	_
39-13	8855-8856	/	_	_
39-14	8856-8859	ncs	_	_
39-15	8859-8860	/	_	_
39-16	8860-8869	ncs.ipynb	_	_
39-17	8869-8870	,	_	_
39-18	8871-8874	nbs	_	_
39-19	8874-8875	/	_	_
39-20	8875-8879	tuse	_	_
39-21	8879-8880	/	_	_
39-22	8880-8890	tuse\_tuned	_	_
39-23	8890-8891	)	_	_
39-24	8892-8894	to	_	_
39-25	8895-8899	find	_	_
39-26	8900-8903	out	_	_
39-27	8904-8907	how	_	_
39-28	8908-8911	the	_	_
39-29	8912-8920	training	_	_
39-30	8921-8923	is	_	_
39-31	8924-8928	done	_	_
39-32	8928-8929	/	_	_
39-33	8929-8932	how	_	_
39-34	8933-8936	the	_	_
39-35	8937-8945	training	_	_
39-36	8946-8950	data	_	_
39-37	8951-8953	is	_	_
39-38	8954-8960	loaded	_	_
39-39	8960-8961	.	_	_

#Text=To download and load the title pairs from Stack Overflow duplicate posts run:  ```python from codesearch.data import load\_train\_dataset duplicate\_records = load\_train\_dataset("so-duplicates-pacs-train") ```  These duplicate records have been filtered to ensure that there is no overlap with the `so-ds-feb20` and `staqc-py` evaluation datasets.
40-1	8963-8965	To	_	_
40-2	8966-8974	download	_	_
40-3	8975-8978	and	_	_
40-4	8979-8983	load	_	_
40-5	8984-8987	the	_	_
40-6	8988-8993	title	_	_
40-7	8994-8999	pairs	_	_
40-8	9000-9004	from	_	_
40-9	9005-9010	Stack	_	_
40-10	9011-9019	Overflow	_	_
40-11	9020-9029	duplicate	_	_
40-12	9030-9035	posts	_	_
40-13	9036-9039	run	_	_
40-14	9039-9040	:	_	_
40-15	9042-9043	`	_	_
40-16	9043-9044	`	_	_
40-17	9044-9045	`	_	_
40-18	9045-9051	python	_	_
40-19	9052-9056	from	_	_
40-20	9057-9072	codesearch.data	_	_
40-20	9057-9067	codesearch	_	_
40-21	9073-9079	import	_	_
40-22	9080-9098	load\_train\_dataset	_	_
40-23	9099-9116	duplicate\_records	_	_
40-24	9117-9118	=	_	_
40-25	9119-9137	load\_train\_dataset	_	_
40-26	9137-9138	(	_	_
40-27	9138-9139	"	_	_
40-28	9139-9163	so-duplicates-pacs-train	_	_
40-29	9163-9164	"	_	_
40-30	9164-9165	)	_	_
40-31	9166-9167	`	_	_
40-32	9167-9168	`	_	_
40-33	9168-9169	`	_	_
40-34	9171-9176	These	_	_
40-35	9177-9186	duplicate	_	_
40-36	9187-9194	records	_	_
40-37	9195-9199	have	_	_
40-38	9200-9204	been	_	_
40-39	9205-9213	filtered	_	_
40-40	9214-9216	to	_	_
40-41	9217-9223	ensure	_	_
40-42	9224-9228	that	_	_
40-43	9229-9234	there	_	_
40-44	9235-9237	is	_	_
40-45	9238-9240	no	_	_
40-46	9241-9248	overlap	_	_
40-47	9249-9253	with	_	_
40-48	9254-9257	the	_	_
40-49	9258-9259	`	_	_
40-50	9259-9270	so-ds-feb20	_	_
40-51	9270-9271	`	_	_
40-52	9272-9275	and	_	_
40-53	9276-9277	`	_	_
40-54	9277-9285	staqc-py	_	_
40-55	9285-9286	`	_	_
40-56	9287-9297	evaluation	_	_
40-57	9298-9306	datasets	_	_
40-58	9306-9307	.	_	_

#Text=To download a text file with Stack Overflow post titles tagged with Python (used for the TNBOW baseline) run:   ```python from codesearch.data import load\_train\_dataset filename = load\_train\_dataset("so-python-question-titles-feb20") ```  ## Demo notebook   You can run the demo notebook `nbs/demo/demo.ipynb` to quickly try out any of the pretrained models on one of the snippet collections.  ## Benchmark on PACS  To replicate the results of our paper or evaluate your own model on the PACS benchmark, have a look at `nbs/evaluate.ipynb` and `codesearch/benchmark.ipynb`.
41-1	9309-9311	To	_	_
41-2	9312-9320	download	_	_
41-3	9321-9322	a	_	_
41-4	9323-9327	text	_	_
41-5	9328-9332	file	_	_
41-6	9333-9337	with	_	_
41-7	9338-9343	Stack	_	_
41-8	9344-9352	Overflow	_	_
41-9	9353-9357	post	_	_
41-10	9358-9364	titles	_	_
41-11	9365-9371	tagged	_	_
41-12	9372-9376	with	_	_
41-13	9377-9383	Python	_	_
41-14	9384-9385	(	_	_
41-15	9385-9389	used	_	_
41-16	9390-9393	for	_	_
41-17	9394-9397	the	_	_
41-18	9398-9403	TNBOW	_	_
41-19	9404-9412	baseline	_	_
41-20	9412-9413	)	_	_
41-21	9414-9417	run	_	_
41-22	9417-9418	:	_	_
41-23	9421-9422	`	_	_
41-24	9422-9423	`	_	_
41-25	9423-9424	`	_	_
41-26	9424-9430	python	_	_
41-27	9431-9435	from	_	_
41-28	9436-9451	codesearch.data	_	_
41-28	9436-9446	codesearch	_	_
41-29	9452-9458	import	_	_
41-30	9459-9477	load\_train\_dataset	_	_
41-31	9478-9486	filename	_	_
41-32	9487-9488	=	_	_
41-33	9489-9507	load\_train\_dataset	_	_
41-34	9507-9508	(	_	_
41-35	9508-9509	"	_	_
41-36	9509-9540	so-python-question-titles-feb20	_	_
41-37	9540-9541	"	_	_
41-38	9541-9542	)	_	_
41-39	9543-9544	`	_	_
41-40	9544-9545	`	_	_
41-41	9545-9546	`	_	_
41-42	9548-9549	#	_	_
41-43	9549-9550	#	_	_
41-44	9551-9555	Demo	_	_
41-45	9556-9564	notebook	_	_
41-46	9567-9570	You	_	_
41-47	9571-9574	can	_	_
41-48	9575-9578	run	_	_
41-49	9579-9582	the	_	_
41-50	9583-9587	demo	_	_
41-51	9588-9596	notebook	_	_
41-52	9597-9598	`	_	_
41-53	9598-9601	nbs	_	_
41-54	9601-9602	/	_	_
41-55	9602-9606	demo	_	_
41-56	9606-9607	/	_	_
41-57	9607-9617	demo.ipynb	_	_
41-58	9617-9618	`	_	_
41-59	9619-9621	to	_	_
41-60	9622-9629	quickly	_	_
41-61	9630-9633	try	_	_
41-62	9634-9637	out	_	_
41-63	9638-9641	any	_	_
41-64	9642-9644	of	_	_
41-65	9645-9648	the	_	_
41-66	9649-9659	pretrained	_	_
41-67	9660-9666	models	_	_
41-68	9667-9669	on	_	_
41-69	9670-9673	one	_	_
41-70	9674-9676	of	_	_
41-71	9677-9680	the	_	_
41-72	9681-9688	snippet	_	_
41-73	9689-9700	collections	_	_
41-74	9700-9701	.	_	_
41-75	9703-9704	#	_	_
41-76	9704-9705	#	_	_
41-77	9706-9715	Benchmark	_	_
41-78	9716-9718	on	_	_
41-79	9719-9723	PACS	_	_
41-80	9725-9727	To	_	_
41-81	9728-9737	replicate	_	_
41-82	9738-9741	the	_	_
41-83	9742-9749	results	_	_
41-84	9750-9752	of	_	_
41-85	9753-9756	our	_	_
41-86	9757-9762	paper	_	_
41-87	9763-9765	or	_	_
41-88	9766-9774	evaluate	_	_
41-89	9775-9779	your	_	_
41-90	9780-9783	own	_	_
41-91	9784-9789	model	_	_
41-92	9790-9792	on	_	_
41-93	9793-9796	the	_	_
41-94	9797-9801	PACS	_	_
41-95	9802-9811	benchmark	_	_
41-96	9811-9812	,	_	_
41-97	9813-9817	have	_	_
41-98	9818-9819	a	_	_
41-99	9820-9824	look	_	_
41-100	9825-9827	at	_	_
41-101	9828-9829	`	_	_
41-102	9829-9832	nbs	_	_
41-103	9832-9833	/	_	_
41-104	9833-9847	evaluate.ipynb	_	_
41-105	9847-9848	`	_	_
41-106	9849-9852	and	_	_
41-107	9853-9854	`	_	_
41-108	9854-9864	codesearch	_	_
41-109	9864-9865	/	_	_
41-110	9865-9880	benchmark.ipynb	_	_
41-111	9880-9881	`	_	_
41-112	9881-9882	.	_	_

#Text=A custom embedding model class should implement the `embed\_snippets` and `embed\_queries` functions (similar to `codesearch/tuse/tuse\_embedder.py`, `codesearch/tnbow/tnbow\_embedder.py`, `codesearch/ncs/ncs\_embedder.py` etc.).  #### Example: Benchmark a model on PACS  ```python from codesearch.benchmark import benchmark\_on\_pacs  benchmark\_on\_pacs(     model\_path=model\_path, # one of the pretrained model names or a path to a model that can be loaded with `codesearch.utils.load\_model`     output\_dir=output\_dir ) ```
42-1	9883-9884	A	_	_
42-2	9885-9891	custom	_	_
42-3	9892-9901	embedding	_	_
42-4	9902-9907	model	_	_
42-5	9908-9913	class	_	_
42-6	9914-9920	should	_	_
42-7	9921-9930	implement	_	_
42-8	9931-9934	the	_	_
42-9	9935-9936	`	_	_
42-10	9936-9950	embed\_snippets	_	_
42-11	9950-9951	`	_	_
42-12	9952-9955	and	_	_
42-13	9956-9957	`	_	_
42-14	9957-9970	embed\_queries	_	_
42-15	9970-9971	`	_	_
42-16	9972-9981	functions	_	_
42-17	9982-9983	(	_	_
42-18	9983-9990	similar	_	_
42-19	9991-9993	to	_	_
42-20	9994-9995	`	_	_
42-21	9995-10005	codesearch	_	_
42-22	10005-10006	/	_	_
42-23	10006-10010	tuse	_	_
42-24	10010-10011	/	_	_
42-25	10011-10027	tuse\_embedder.py	_	_
42-26	10027-10028	`	_	_
42-27	10028-10029	,	_	_
42-28	10030-10031	`	_	_
42-29	10031-10041	codesearch	_	_
42-30	10041-10042	/	_	_
42-31	10042-10047	tnbow	_	_
42-32	10047-10048	/	_	_
42-33	10048-10065	tnbow\_embedder.py	_	_
42-34	10065-10066	`	_	_
42-35	10066-10067	,	_	_
42-36	10068-10069	`	_	_
42-37	10069-10079	codesearch	_	_
42-38	10079-10080	/	_	_
42-39	10080-10083	ncs	_	_
42-40	10083-10084	/	_	_
42-41	10084-10099	ncs\_embedder.py	_	_
42-42	10099-10100	`	_	_
42-43	10101-10104	etc	_	_
42-44	10104-10105	.	_	_
42-45	10105-10106	)	_	_
42-46	10106-10107	.	_	_
42-47	10109-10110	#	_	_
42-48	10110-10111	#	_	_
42-49	10111-10112	#	_	_
42-50	10112-10113	#	_	_
42-51	10114-10121	Example	_	_
42-52	10121-10122	:	_	_
42-53	10123-10132	Benchmark	_	_
42-54	10133-10134	a	_	_
42-55	10135-10140	model	_	_
42-56	10141-10143	on	_	_
42-57	10144-10148	PACS	_	_
42-58	10150-10151	`	_	_
42-59	10151-10152	`	_	_
42-60	10152-10153	`	_	_
42-61	10153-10159	python	_	_
42-62	10160-10164	from	_	_
42-63	10165-10185	codesearch.benchmark	_	_
42-63	10165-10175	codesearch	_	_
42-64	10186-10192	import	_	_
42-65	10193-10210	benchmark\_on\_pacs	_	_
42-65	10206-10210	pacs	_	_
42-66	10212-10229	benchmark\_on\_pacs	_	_
42-66	10225-10229	pacs	_	_
42-67	10229-10230	(	_	_
42-68	10235-10245	model\_path	_	_
42-69	10245-10246	=	_	_
42-70	10246-10256	model\_path	_	_
42-71	10256-10257	,	_	_
42-72	10258-10259	#	_	_
42-73	10260-10263	one	_	_
42-74	10264-10266	of	_	_
42-75	10267-10270	the	_	_
42-76	10271-10281	pretrained	_	_
42-77	10282-10287	model	_	_
42-78	10288-10293	names	_	_
42-79	10294-10296	or	_	_
42-80	10297-10298	a	_	_
42-81	10299-10303	path	_	_
42-82	10304-10306	to	_	_
42-83	10307-10308	a	_	_
42-84	10309-10314	model	_	_
42-85	10315-10319	that	_	_
42-86	10320-10323	can	_	_
42-87	10324-10326	be	_	_
42-88	10327-10333	loaded	_	_
42-89	10334-10338	with	_	_
42-90	10339-10340	`	_	_
42-91	10340-10367	codesearch.utils.load\_model	_	_
42-91	10340-10350	codesearch	_	_
42-92	10367-10368	`	_	_
42-93	10373-10383	output\_dir	_	_
42-94	10383-10384	=	_	_
42-95	10384-10394	output\_dir	_	_
42-96	10395-10396	)	_	_
42-97	10397-10398	`	_	_
42-98	10398-10399	`	_	_
42-99	10399-10400	`	_	_