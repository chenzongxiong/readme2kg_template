#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text= 
0-0	0-1	 	_	_

#Text=# VN-EGNN: E(3)-Equivariant Graph Neural Networks with Virtual Nodes Enhance Protein Binding Site Identification  \[!
1-1	1-2	#	_	_
1-2	3-10	VN-EGNN	_	_
1-3	10-11	:	_	_
1-4	12-13	E	_	_
1-5	13-14	(	_	_
1-6	14-15	3	_	_
1-7	15-16	)	_	_
1-8	16-17	-	_	_
1-9	17-28	Equivariant	_	_
1-10	29-34	Graph	_	_
1-11	35-41	Neural	_	_
1-12	42-50	Networks	_	_
1-13	51-55	with	_	_
1-14	56-63	Virtual	_	_
1-15	64-69	Nodes	_	_
1-16	70-77	Enhance	_	_
1-17	78-85	Protein	_	_
1-18	86-93	Binding	_	_
1-19	94-98	Site	_	_
1-20	99-113	Identification	_	_
1-21	115-116	\[	_	_
1-22	116-117	!	_	_

#Text=\[Open in HuggingFace\](https://huggingface.co/datasets/huggingface/badges/raw/main/open-in-hf-spaces-sm.svg)\](https://huggingface.co/spaces/ml-jku/vnegnn) \[!
2-1	117-118	\[	_	_
2-2	118-122	Open	_	_
2-3	123-125	in	_	_
2-4	126-137	HuggingFace	_	_
2-5	137-138	\]	_	_
2-6	138-139	(	_	_
2-7	139-144	https	_	_
2-8	144-145	:	_	_
2-9	145-146	/	_	_
2-10	146-147	/	_	_
2-11	147-161	huggingface.co	_	_
2-12	161-162	/	_	_
2-13	162-170	datasets	_	_
2-14	170-171	/	_	_
2-15	171-182	huggingface	_	_
2-16	182-183	/	_	_
2-17	183-189	badges	_	_
2-18	189-190	/	_	_
2-19	190-193	raw	_	_
2-20	193-194	/	_	_
2-21	194-198	main	_	_
2-22	198-199	/	_	_
2-23	199-223	open-in-hf-spaces-sm.svg	_	_
2-24	223-224	)	_	_
2-25	224-225	\]	_	_
2-26	225-226	(	_	_
2-27	226-231	https	_	_
2-28	231-232	:	_	_
2-29	232-233	/	_	_
2-30	233-234	/	_	_
2-31	234-248	huggingface.co	_	_
2-32	248-249	/	_	_
2-33	249-255	spaces	_	_
2-34	255-256	/	_	_
2-35	256-262	ml-jku	_	_
2-36	262-263	/	_	_
2-37	263-269	vnegnn	_	_
2-38	269-270	)	_	_
2-39	271-272	\[	_	_
2-40	272-273	!	_	_

#Text=\[\](https://img.shields.io/badge/paper-arxiv2310.06763-red?
3-1	273-274	\[	_	_
3-2	274-275	\]	_	_
3-3	275-276	(	_	_
3-4	276-281	https	_	_
3-5	281-282	:	_	_
3-6	282-283	/	_	_
3-7	283-284	/	_	_
3-8	284-298	img.shields.io	_	_
3-9	298-299	/	_	_
3-10	299-304	badge	_	_
3-11	304-305	/	_	_
3-12	305-326	paper-arxiv2310.06763	_	_
3-13	326-327	-	_	_
3-14	327-330	red	_	_
3-15	330-331	?	_	_

#Text=style=plastic&logo=GitBook)\](https://arxiv.org/abs/2404.07194) \[!
4-1	331-336	style	_	_
4-2	336-337	=	_	_
4-3	337-344	plastic	_	_
4-4	344-345	&	_	_
4-5	345-349	logo	_	_
4-6	349-350	=	_	_
4-7	350-357	GitBook	_	_
4-8	357-358	)	_	_
4-9	358-359	\]	_	_
4-10	359-360	(	_	_
4-11	360-365	https	_	_
4-12	365-366	:	_	_
4-13	366-367	/	_	_
4-14	367-368	/	_	_
4-15	368-377	arxiv.org	_	_
4-16	377-378	/	_	_
4-17	378-381	abs	_	_
4-18	381-382	/	_	_
4-19	382-392	2404.07194	_	_
4-20	392-393	)	_	_
4-21	394-395	\[	_	_
4-22	395-396	!	_	_

#Text=\[\](https://img.shields.io/badge/model-pink?
5-1	396-397	\[	_	_
5-2	397-398	\]	_	_
5-3	398-399	(	_	_
5-4	399-404	https	_	_
5-5	404-405	:	_	_
5-6	405-406	/	_	_
5-7	406-407	/	_	_
5-8	407-421	img.shields.io	_	_
5-9	421-422	/	_	_
5-10	422-427	badge	_	_
5-11	427-428	/	_	_
5-12	428-438	model-pink	_	_
5-13	438-439	?	_	_

#Text=style=plastic&logo=themodelsresource)\](https://huggingface.co/fses91/VNEGNN-MODEL) \[!
6-1	439-444	style	_	_
6-2	444-445	=	_	_
6-3	445-452	plastic	_	_
6-4	452-453	&	_	_
6-5	453-457	logo	_	_
6-6	457-458	=	_	_
6-7	458-475	themodelsresource	_	_
6-8	475-476	)	_	_
6-9	476-477	\]	_	_
6-10	477-478	(	_	_
6-11	478-483	https	_	_
6-12	483-484	:	_	_
6-13	484-485	/	_	_
6-14	485-486	/	_	_
6-15	486-500	huggingface.co	_	_
6-16	500-501	/	_	_
6-17	501-507	fses91	_	_
6-18	507-508	/	_	_
6-19	508-520	VNEGNN-MODEL	_	_
6-19	508-514	VNEGNN	_	_
6-20	520-521	)	_	_
6-21	522-523	\[	_	_
6-22	523-524	!	_	_

#Text=\[\](https://img.shields.io/badge/project\_page-blue?
7-1	524-525	\[	_	_
7-2	525-526	\]	_	_
7-3	526-527	(	_	_
7-4	527-532	https	_	_
7-5	532-533	:	_	_
7-6	533-534	/	_	_
7-7	534-535	/	_	_
7-8	535-549	img.shields.io	_	_
7-9	549-550	/	_	_
7-10	550-555	badge	_	_
7-11	555-556	/	_	_
7-12	556-573	project\_page-blue	_	_
7-13	573-574	?	_	_

#Text=style=plastic&logo=internetcomputer)\](https://linktr.ee/vnegnn)  ## News  ðŸ”¥  \*\*\*April 10 2024\*\*\*:  \*The trained VNEGNN model and processed dataset are released, as in the paper!
8-1	574-579	style	_	_
8-2	579-580	=	_	_
8-3	580-587	plastic	_	_
8-4	587-588	&	_	_
8-5	588-592	logo	_	_
8-6	592-593	=	_	_
8-7	593-609	internetcomputer	_	_
8-8	609-610	)	_	_
8-9	610-611	\]	_	_
8-10	611-612	(	_	_
8-11	612-617	https	_	_
8-12	617-618	:	_	_
8-13	618-619	/	_	_
8-14	619-620	/	_	_
8-15	620-629	linktr.ee	_	_
8-16	629-630	/	_	_
8-17	630-636	vnegnn	_	_
8-18	636-637	)	_	_
8-19	639-640	#	_	_
8-20	640-641	#	_	_
8-21	642-646	News	_	_
8-22	648-650	ðŸ”¥	_	_
8-23	651-652	\*	_	_
8-24	652-653	\*	_	_
8-25	653-654	\*	_	_
8-26	654-659	April	_	_
8-27	660-662	10	_	_
8-28	663-667	2024	_	_
8-29	667-668	\*	_	_
8-30	668-669	\*	_	_
8-31	669-670	\*	_	_
8-32	670-671	:	_	_
8-33	673-674	\*	_	_
8-34	674-677	The	_	_
8-35	678-685	trained	_	_
8-36	686-692	VNEGNN	_	_
8-37	693-698	model	_	_
8-38	699-702	and	_	_
8-39	703-712	processed	_	_
8-40	713-720	dataset	_	_
8-41	721-724	are	_	_
8-42	725-733	released	_	_
8-43	733-734	,	_	_
8-44	735-737	as	_	_
8-45	738-740	in	_	_
8-46	741-744	the	_	_
8-47	745-750	paper	_	_
8-48	750-751	!	_	_

#Text=\*  ## Overview  Implementation of the VN-EGNN, state-of-the-art method for protein binding site identfication, by Florian Sestak, Lisa Schneckenreiter, Johannes Brandstetter, Sepp Hochreiter, Andreas Mayr, GÃ¼nter Klambauer.
9-1	751-752	\*	_	_
9-2	754-755	#	_	_
9-3	755-756	#	_	_
9-4	757-765	Overview	_	_
9-5	767-781	Implementation	_	_
9-6	782-784	of	_	_
9-7	785-788	the	_	_
9-8	789-796	VN-EGNN	_	_
9-9	796-797	,	_	_
9-10	798-814	state-of-the-art	_	_
9-11	815-821	method	_	_
9-12	822-825	for	_	_
9-13	826-833	protein	_	_
9-14	834-841	binding	_	_
9-15	842-846	site	_	_
9-16	847-860	identfication	_	_
9-17	860-861	,	_	_
9-18	862-864	by	_	_
9-19	865-872	Florian	_	_
9-20	873-879	Sestak	_	_
9-21	879-880	,	_	_
9-22	881-885	Lisa	_	_
9-23	886-901	Schneckenreiter	_	_
9-24	901-902	,	_	_
9-25	903-911	Johannes	_	_
9-26	912-924	Brandstetter	_	_
9-27	924-925	,	_	_
9-28	926-930	Sepp	_	_
9-29	931-941	Hochreiter	_	_
9-30	941-942	,	_	_
9-31	943-950	Andreas	_	_
9-32	951-955	Mayr	_	_
9-33	955-956	,	_	_
9-34	957-963	GÃ¼nter	_	_
9-35	964-973	Klambauer	_	_
9-36	973-974	.	_	_

#Text=This repository contains all code, instructions and model weights necessary to run the method or to retrain a model.
10-1	975-979	This	_	_
10-2	980-990	repository	_	_
10-3	991-999	contains	_	_
10-4	1000-1003	all	_	_
10-5	1004-1008	code	_	_
10-6	1008-1009	,	_	_
10-7	1010-1022	instructions	_	_
10-8	1023-1026	and	_	_
10-9	1027-1032	model	_	_
10-10	1033-1040	weights	_	_
10-11	1041-1050	necessary	_	_
10-12	1051-1053	to	_	_
10-13	1054-1057	run	_	_
10-14	1058-1061	the	_	_
10-15	1062-1068	method	_	_
10-16	1069-1071	or	_	_
10-17	1072-1074	to	_	_
10-18	1075-1082	retrain	_	_
10-19	1083-1084	a	_	_
10-20	1085-1090	model	_	_
10-21	1090-1091	.	_	_

#Text=If you have any question, feel free to open an issue or reach out to: <sestak@ml.jku.at>.  !
11-1	1092-1094	If	_	_
11-2	1095-1098	you	_	_
11-3	1099-1103	have	_	_
11-4	1104-1107	any	_	_
11-5	1108-1116	question	_	_
11-6	1116-1117	,	_	_
11-7	1118-1122	feel	_	_
11-8	1123-1127	free	_	_
11-9	1128-1130	to	_	_
11-10	1131-1135	open	_	_
11-11	1136-1138	an	_	_
11-12	1139-1144	issue	_	_
11-13	1145-1147	or	_	_
11-14	1148-1153	reach	_	_
11-15	1154-1157	out	_	_
11-16	1158-1160	to	_	_
11-17	1160-1161	:	_	_
11-18	1162-1163	<	_	_
11-19	1163-1169	sestak	_	_
11-20	1169-1170	@	_	_
11-21	1170-1179	ml.jku.at	_	_
11-22	1179-1180	>	_	_
11-23	1180-1181	.	_	_
11-24	1183-1184	!	_	_

#Text=\[\](visualizations/overview.jpg)  ## Installation  \[!
12-1	1184-1185	\[	_	_
12-2	1185-1186	\]	_	_
12-3	1186-1187	(	_	_
12-4	1187-1201	visualizations	_	_
12-5	1201-1202	/	_	_
12-6	1202-1214	overview.jpg	_	_
12-7	1214-1215	)	_	_
12-8	1217-1218	#	_	_
12-9	1218-1219	#	_	_
12-10	1220-1232	Installation	_	_
12-11	1234-1235	\[	_	_
12-12	1235-1236	!	_	_

#Text=\[\](https://img.shields.io/badge/PyTorch-2.1.2-ee4c2c?
13-1	1236-1237	\[	_	_
13-2	1237-1238	\]	_	_
13-3	1238-1239	(	_	_
13-4	1239-1244	https	_	_
13-5	1244-1245	:	_	_
13-6	1245-1246	/	_	_
13-7	1246-1247	/	_	_
13-8	1247-1261	img.shields.io	_	_
13-9	1261-1262	/	_	_
13-10	1262-1267	badge	_	_
13-11	1267-1268	/	_	_
13-12	1268-1275	PyTorch	_	_
13-13	1275-1276	-	_	_
13-14	1276-1281	2.1.2	_	_
13-15	1281-1282	-	_	_
13-16	1282-1288	ee4c2c	_	_
13-17	1288-1289	?	_	_

#Text=logo=pytorch&logoColor=white)\](https://pytorch.org/get-started/locally/) \[!
14-1	1289-1293	logo	_	_
14-2	1293-1294	=	_	_
14-3	1294-1301	pytorch	_	_
14-4	1301-1302	&	_	_
14-5	1302-1311	logoColor	_	_
14-6	1311-1312	=	_	_
14-7	1312-1317	white	_	_
14-8	1317-1318	)	_	_
14-9	1318-1319	\]	_	_
14-10	1319-1320	(	_	_
14-11	1320-1325	https	_	_
14-12	1325-1326	:	_	_
14-13	1326-1327	/	_	_
14-14	1327-1328	/	_	_
14-15	1328-1339	pytorch.org	_	_
14-15	1328-1335	pytorch	_	_
14-16	1339-1340	/	_	_
14-17	1340-1351	get-started	_	_
14-18	1351-1352	/	_	_
14-19	1352-1359	locally	_	_
14-20	1359-1360	/	_	_
14-21	1360-1361	)	_	_
14-22	1362-1363	\[	_	_
14-23	1363-1364	!	_	_

#Text=\[lightning\](https://img.shields.io/badge/-Lightning\_2.2.1-792ee5?
15-1	1364-1365	\[	_	_
15-2	1365-1374	lightning	_	_
15-3	1374-1375	\]	_	_
15-4	1375-1376	(	_	_
15-5	1376-1381	https	_	_
15-6	1381-1382	:	_	_
15-7	1382-1383	/	_	_
15-8	1383-1384	/	_	_
15-9	1384-1398	img.shields.io	_	_
15-10	1398-1399	/	_	_
15-11	1399-1404	badge	_	_
15-12	1404-1405	/	_	_
15-13	1405-1406	-	_	_
15-14	1406-1415	Lightning	_	_
15-15	1415-1416	\_	_	_
15-16	1416-1421	2.2.1	_	_
15-17	1421-1422	-	_	_
15-18	1422-1428	792ee5	_	_
15-19	1428-1429	?	_	_

#Text=logo=pytorchlightning&logoColor=white)\](https://pytorchlightning.ai/) \[!
16-1	1429-1433	logo	_	_
16-2	1433-1434	=	_	_
16-3	1434-1450	pytorchlightning	_	_
16-4	1450-1451	&	_	_
16-5	1451-1460	logoColor	_	_
16-6	1460-1461	=	_	_
16-7	1461-1466	white	_	_
16-8	1466-1467	)	_	_
16-9	1467-1468	\]	_	_
16-10	1468-1469	(	_	_
16-11	1469-1474	https	_	_
16-12	1474-1475	:	_	_
16-13	1475-1476	/	_	_
16-14	1476-1477	/	_	_
16-15	1477-1496	pytorchlightning.ai	_	_
16-15	1477-1493	pytorchlightning	_	_
16-16	1496-1497	/	_	_
16-17	1497-1498	)	_	_
16-18	1499-1500	\[	_	_
16-19	1500-1501	!	_	_

#Text=\[hydra\](https://img.shields.io/badge/Config-Hydra\_1.3-89b8cd)\](https://hydra.cc/) \[!
17-1	1501-1502	\[	_	_
17-2	1502-1507	hydra	_	_
17-3	1507-1508	\]	_	_
17-4	1508-1509	(	_	_
17-5	1509-1514	https	_	_
17-6	1514-1515	:	_	_
17-7	1515-1516	/	_	_
17-8	1516-1517	/	_	_
17-9	1517-1531	img.shields.io	_	_
17-10	1531-1532	/	_	_
17-11	1532-1537	badge	_	_
17-12	1537-1538	/	_	_
17-13	1538-1550	Config-Hydra	_	_
17-13	1545-1550	Hydra	_	_
17-14	1550-1551	\_	_	_
17-15	1551-1554	1.3	_	_
17-16	1554-1555	-	_	_
17-17	1555-1561	89b8cd	_	_
17-18	1561-1562	)	_	_
17-19	1562-1563	\]	_	_
17-20	1563-1564	(	_	_
17-21	1564-1569	https	_	_
17-22	1569-1570	:	_	_
17-23	1570-1571	/	_	_
17-24	1571-1572	/	_	_
17-25	1572-1580	hydra.cc	_	_
17-25	1572-1577	hydra	_	_
17-26	1580-1581	/	_	_
17-27	1581-1582	)	_	_
17-28	1583-1584	\[	_	_
17-29	1584-1585	!	_	_

#Text=\[black\](https://img.shields.io/badge/Code%20Style-Black-black.svg?
18-1	1585-1586	\[	_	_
18-2	1586-1591	black	_	_
18-3	1591-1592	\]	_	_
18-4	1592-1593	(	_	_
18-5	1593-1598	https	_	_
18-6	1598-1599	:	_	_
18-7	1599-1600	/	_	_
18-8	1600-1601	/	_	_
18-9	1601-1615	img.shields.io	_	_
18-10	1615-1616	/	_	_
18-11	1616-1621	badge	_	_
18-12	1621-1622	/	_	_
18-13	1622-1626	Code	_	_
18-14	1626-1627	%	_	_
18-15	1627-1650	20Style-Black-black.svg	_	_
18-15	1635-1640	Black	_	_
18-15	1641-1646	black	_	_
18-16	1650-1651	?	_	_

#Text=labelColor=gray)\](https://black.readthedocs.io/en/stable/) \[!
19-1	1651-1661	labelColor	_	_
19-2	1661-1662	=	_	_
19-3	1662-1666	gray	_	_
19-4	1666-1667	)	_	_
19-5	1667-1668	\]	_	_
19-6	1668-1669	(	_	_
19-7	1669-1674	https	_	_
19-8	1674-1675	:	_	_
19-9	1675-1676	/	_	_
19-10	1676-1677	/	_	_
19-11	1677-1697	black.readthedocs.io	_	_
19-11	1677-1682	black	_	_
19-12	1697-1698	/	_	_
19-13	1698-1700	en	_	_
19-14	1700-1701	/	_	_
19-15	1701-1707	stable	_	_
19-16	1707-1708	/	_	_
19-17	1708-1709	)	_	_
19-18	1710-1711	\[	_	_
19-19	1711-1712	!	_	_

#Text=\[isort\](https://img.shields.io/badge/%20imports-isort-%231674b1?
20-1	1712-1713	\[	_	_
20-2	1713-1718	isort	_	_
20-3	1718-1719	\]	_	_
20-4	1719-1720	(	_	_
20-5	1720-1725	https	_	_
20-6	1725-1726	:	_	_
20-7	1726-1727	/	_	_
20-8	1727-1728	/	_	_
20-9	1728-1742	img.shields.io	_	_
20-10	1742-1743	/	_	_
20-11	1743-1748	badge	_	_
20-12	1748-1749	/	_	_
20-13	1749-1750	%	_	_
20-14	1750-1765	20imports-isort	_	_
20-14	1760-1765	isort	_	_
20-15	1765-1766	-	_	_
20-16	1766-1767	%	_	_
20-17	1767-1775	231674b1	_	_
20-18	1775-1776	?	_	_

#Text=style=flat&labelColor=ef8336)\](https://pycqa.github.io/isort/)  To reproduce the results please use Python 3.9, PyTorch version 2.1.2, Cuda 12.1, PyG version 2.3.0.
21-1	1776-1781	style	_	_
21-2	1781-1782	=	_	_
21-3	1782-1786	flat	_	_
21-4	1786-1787	&	_	_
21-5	1787-1797	labelColor	_	_
21-6	1797-1798	=	_	_
21-7	1798-1804	ef8336	_	_
21-8	1804-1805	)	_	_
21-9	1805-1806	\]	_	_
21-10	1806-1807	(	_	_
21-11	1807-1812	https	_	_
21-12	1812-1813	:	_	_
21-13	1813-1814	/	_	_
21-14	1814-1815	/	_	_
21-15	1815-1830	pycqa.github.io	_	_
21-16	1830-1831	/	_	_
21-17	1831-1836	isort	_	_
21-18	1836-1837	/	_	_
21-19	1837-1838	)	_	_
21-20	1840-1842	To	_	_
21-21	1843-1852	reproduce	_	_
21-22	1853-1856	the	_	_
21-23	1857-1864	results	_	_
21-24	1865-1871	please	_	_
21-25	1872-1875	use	_	_
21-26	1876-1882	Python	_	_
21-27	1883-1886	3.9	_	_
21-28	1886-1887	,	_	_
21-29	1888-1895	PyTorch	_	_
21-30	1896-1903	version	_	_
21-31	1904-1909	2.1.2	_	_
21-32	1909-1910	,	_	_
21-33	1911-1915	Cuda	_	_
21-34	1916-1920	12.1	_	_
21-35	1920-1921	,	_	_
21-36	1922-1925	PyG	_	_
21-37	1926-1933	version	_	_
21-38	1934-1939	2.3.0	_	_
21-39	1939-1940	.	_	_

#Text=Clone the repo:  ``` git clone https://github.com/ml-jku/vnegnn ```  Setup dependencies:  ``` conda create --name vnegnn python=3.9 conda activate vnegnn conda install pytorch==2.1.2 torchvision==0.16.2 torchaudio==2.1.2 pytorch-cuda=12.1 -c pytorch -c nvidia conda install pyg==2.4.0 -c pyg conda env update --name vnegnn --file environment.yaml ```  Activate the environment:  ``` conda activate vnegnn ```  ## Usage Examples  Following commands can be executed in the directory of the cloned repository.  ### Predict  Provide your protein in `.pdb` format.  ``` python predict.py -i protein.pdb -o output -c model.ckpt -d cuda:0               # run prediction on GPU  python predict.py -i protein.pdb -o output -c model.ckpt -d cuda:0 -v            # run prediction on GPU and create visualization ```  #### Predict Output  The model outputs:  - `prediction.csv`: holding the predicted positions (x,y,z) of the virtual nodes and the corresponding ranks - `visualization.pse`: PyMOL session file containing the protein structure with the predicted virtual node positions, only created if the `-v` flag is used.a  ## Data  In our training and evaluation process, we adopted the methodology outlined in \[Equipocket\](https://arxiv.org/abs/2302.12177) with a modification: we utilized a single validation set in place of the 5-fold cross-validation, due to computational limitations.
22-1	1942-1947	Clone	_	_
22-2	1948-1951	the	_	_
22-3	1952-1956	repo	_	_
22-4	1956-1957	:	_	_
22-5	1959-1960	`	_	_
22-6	1960-1961	`	_	_
22-7	1961-1962	`	_	_
22-8	1963-1966	git	_	_
22-9	1967-1972	clone	_	_
22-10	1973-1978	https	_	_
22-11	1978-1979	:	_	_
22-12	1979-1980	/	_	_
22-13	1980-1981	/	_	_
22-14	1981-1991	github.com	_	_
22-15	1991-1992	/	_	_
22-16	1992-1998	ml-jku	_	_
22-17	1998-1999	/	_	_
22-18	1999-2005	vnegnn	_	_
22-19	2006-2007	`	_	_
22-20	2007-2008	`	_	_
22-21	2008-2009	`	_	_
22-22	2011-2016	Setup	_	_
22-23	2017-2029	dependencies	_	_
22-24	2029-2030	:	_	_
22-25	2032-2033	`	_	_
22-26	2033-2034	`	_	_
22-27	2034-2035	`	_	_
22-28	2036-2041	conda	_	_
22-29	2042-2048	create	_	_
22-30	2049-2050	-	_	_
22-31	2050-2051	-	_	_
22-32	2051-2055	name	_	_
22-33	2056-2062	vnegnn	_	_
22-34	2063-2069	python	_	_
22-35	2069-2070	=	_	_
22-36	2070-2073	3.9	_	_
22-37	2074-2079	conda	_	_
22-38	2080-2088	activate	_	_
22-39	2089-2095	vnegnn	_	_
22-40	2096-2101	conda	_	_
22-41	2102-2109	install	_	_
22-42	2110-2117	pytorch	_	_
22-43	2117-2118	=	_	_
22-44	2118-2119	=	_	_
22-45	2119-2124	2.1.2	_	_
22-46	2125-2136	torchvision	_	_
22-47	2136-2137	=	_	_
22-48	2137-2138	=	_	_
22-49	2138-2144	0.16.2	_	_
22-50	2145-2155	torchaudio	_	_
22-51	2155-2156	=	_	_
22-52	2156-2157	=	_	_
22-53	2157-2162	2.1.2	_	_
22-54	2163-2175	pytorch-cuda	_	_
22-55	2175-2176	=	_	_
22-56	2176-2180	12.1	_	_
22-57	2181-2182	-	_	_
22-58	2182-2183	c	_	_
22-59	2184-2191	pytorch	_	_
22-60	2192-2193	-	_	_
22-61	2193-2194	c	_	_
22-62	2195-2201	nvidia	_	_
22-63	2202-2207	conda	_	_
22-64	2208-2215	install	_	_
22-65	2216-2219	pyg	_	_
22-66	2219-2220	=	_	_
22-67	2220-2221	=	_	_
22-68	2221-2226	2.4.0	_	_
22-69	2227-2228	-	_	_
22-70	2228-2229	c	_	_
22-71	2230-2233	pyg	_	_
22-72	2234-2239	conda	_	_
22-73	2240-2243	env	_	_
22-74	2244-2250	update	_	_
22-75	2251-2252	-	_	_
22-76	2252-2253	-	_	_
22-77	2253-2257	name	_	_
22-78	2258-2264	vnegnn	_	_
22-79	2265-2266	-	_	_
22-80	2266-2267	-	_	_
22-81	2267-2271	file	_	_
22-82	2272-2288	environment.yaml	_	_
22-83	2289-2290	`	_	_
22-84	2290-2291	`	_	_
22-85	2291-2292	`	_	_
22-86	2294-2302	Activate	_	_
22-87	2303-2306	the	_	_
22-88	2307-2318	environment	_	_
22-89	2318-2319	:	_	_
22-90	2321-2322	`	_	_
22-91	2322-2323	`	_	_
22-92	2323-2324	`	_	_
22-93	2325-2330	conda	_	_
22-94	2331-2339	activate	_	_
22-95	2340-2346	vnegnn	_	_
22-96	2347-2348	`	_	_
22-97	2348-2349	`	_	_
22-98	2349-2350	`	_	_
22-99	2352-2353	#	_	_
22-100	2353-2354	#	_	_
22-101	2355-2360	Usage	_	_
22-102	2361-2369	Examples	_	_
22-103	2371-2380	Following	_	_
22-104	2381-2389	commands	_	_
22-105	2390-2393	can	_	_
22-106	2394-2396	be	_	_
22-107	2397-2405	executed	_	_
22-108	2406-2408	in	_	_
22-109	2409-2412	the	_	_
22-110	2413-2422	directory	_	_
22-111	2423-2425	of	_	_
22-112	2426-2429	the	_	_
22-113	2430-2436	cloned	_	_
22-114	2437-2447	repository	_	_
22-115	2447-2448	.	_	_
22-116	2450-2451	#	_	_
22-117	2451-2452	#	_	_
22-118	2452-2453	#	_	_
22-119	2454-2461	Predict	_	_
22-120	2463-2470	Provide	_	_
22-121	2471-2475	your	_	_
22-122	2476-2483	protein	_	_
22-123	2484-2486	in	_	_
22-124	2487-2488	`	_	_
22-125	2488-2489	.	_	_
22-126	2489-2492	pdb	_	_
22-127	2492-2493	`	_	_
22-128	2494-2500	format	_	_
22-129	2500-2501	.	_	_
22-130	2503-2504	`	_	_
22-131	2504-2505	`	_	_
22-132	2505-2506	`	_	_
22-133	2507-2513	python	_	_
22-134	2514-2524	predict.py	_	_
22-135	2525-2526	-	_	_
22-136	2526-2527	i	_	_
22-137	2528-2539	protein.pdb	_	_
22-138	2540-2541	-	_	_
22-139	2541-2542	o	_	_
22-140	2543-2549	output	_	_
22-141	2550-2551	-	_	_
22-142	2551-2552	c	_	_
22-143	2553-2563	model.ckpt	_	_
22-144	2564-2565	-	_	_
22-145	2565-2566	d	_	_
22-146	2567-2571	cuda	_	_
22-147	2571-2572	:	_	_
22-148	2572-2573	0	_	_
22-149	2588-2589	#	_	_
22-150	2590-2593	run	_	_
22-151	2594-2604	prediction	_	_
22-152	2605-2607	on	_	_
22-153	2608-2611	GPU	_	_
22-154	2613-2619	python	_	_
22-155	2620-2630	predict.py	_	_
22-156	2631-2632	-	_	_
22-157	2632-2633	i	_	_
22-158	2634-2645	protein.pdb	_	_
22-159	2646-2647	-	_	_
22-160	2647-2648	o	_	_
22-161	2649-2655	output	_	_
22-162	2656-2657	-	_	_
22-163	2657-2658	c	_	_
22-164	2659-2669	model.ckpt	_	_
22-165	2670-2671	-	_	_
22-166	2671-2672	d	_	_
22-167	2673-2677	cuda	_	_
22-168	2677-2678	:	_	_
22-169	2678-2679	0	_	_
22-170	2680-2681	-	_	_
22-171	2681-2682	v	_	_
22-172	2694-2695	#	_	_
22-173	2696-2699	run	_	_
22-174	2700-2710	prediction	_	_
22-175	2711-2713	on	_	_
22-176	2714-2717	GPU	_	_
22-177	2718-2721	and	_	_
22-178	2722-2728	create	_	_
22-179	2729-2742	visualization	_	_
22-180	2743-2744	`	_	_
22-181	2744-2745	`	_	_
22-182	2745-2746	`	_	_
22-183	2748-2749	#	_	_
22-184	2749-2750	#	_	_
22-185	2750-2751	#	_	_
22-186	2751-2752	#	_	_
22-187	2753-2760	Predict	_	_
22-188	2761-2767	Output	_	_
22-189	2769-2772	The	_	_
22-190	2773-2778	model	_	_
22-191	2779-2786	outputs	_	_
22-192	2786-2787	:	_	_
22-193	2789-2790	-	_	_
22-194	2791-2792	`	_	_
22-195	2792-2806	prediction.csv	_	_
22-196	2806-2807	`	_	_
22-197	2807-2808	:	_	_
22-198	2809-2816	holding	_	_
22-199	2817-2820	the	_	_
22-200	2821-2830	predicted	_	_
22-201	2831-2840	positions	_	_
22-202	2841-2842	(	_	_
22-203	2842-2843	x	_	_
22-204	2843-2844	,	_	_
22-205	2844-2845	y	_	_
22-206	2845-2846	,	_	_
22-207	2846-2847	z	_	_
22-208	2847-2848	)	_	_
22-209	2849-2851	of	_	_
22-210	2852-2855	the	_	_
22-211	2856-2863	virtual	_	_
22-212	2864-2869	nodes	_	_
22-213	2870-2873	and	_	_
22-214	2874-2877	the	_	_
22-215	2878-2891	corresponding	_	_
22-216	2892-2897	ranks	_	_
22-217	2898-2899	-	_	_
22-218	2900-2901	`	_	_
22-219	2901-2918	visualization.pse	_	_
22-220	2918-2919	`	_	_
22-221	2919-2920	:	_	_
22-222	2921-2926	PyMOL	_	_
22-223	2927-2934	session	_	_
22-224	2935-2939	file	_	_
22-225	2940-2950	containing	_	_
22-226	2951-2954	the	_	_
22-227	2955-2962	protein	_	_
22-228	2963-2972	structure	_	_
22-229	2973-2977	with	_	_
22-230	2978-2981	the	_	_
22-231	2982-2991	predicted	_	_
22-232	2992-2999	virtual	_	_
22-233	3000-3004	node	_	_
22-234	3005-3014	positions	_	_
22-235	3014-3015	,	_	_
22-236	3016-3020	only	_	_
22-237	3021-3028	created	_	_
22-238	3029-3031	if	_	_
22-239	3032-3035	the	_	_
22-240	3036-3037	`	_	_
22-241	3037-3038	-	_	_
22-242	3038-3039	v	_	_
22-243	3039-3040	`	_	_
22-244	3041-3045	flag	_	_
22-245	3046-3048	is	_	_
22-246	3049-3055	used.a	_	_
22-247	3057-3058	#	_	_
22-248	3058-3059	#	_	_
22-249	3060-3064	Data	_	_
22-250	3066-3068	In	_	_
22-251	3069-3072	our	_	_
22-252	3073-3081	training	_	_
22-253	3082-3085	and	_	_
22-254	3086-3096	evaluation	_	_
22-255	3097-3104	process	_	_
22-256	3104-3105	,	_	_
22-257	3106-3108	we	_	_
22-258	3109-3116	adopted	_	_
22-259	3117-3120	the	_	_
22-260	3121-3132	methodology	_	_
22-261	3133-3141	outlined	_	_
22-262	3142-3144	in	_	_
22-263	3145-3146	\[	_	_
22-264	3146-3156	Equipocket	_	_
22-265	3156-3157	\]	_	_
22-266	3157-3158	(	_	_
22-267	3158-3163	https	_	_
22-268	3163-3164	:	_	_
22-269	3164-3165	/	_	_
22-270	3165-3166	/	_	_
22-271	3166-3175	arxiv.org	_	_
22-272	3175-3176	/	_	_
22-273	3176-3179	abs	_	_
22-274	3179-3180	/	_	_
22-275	3180-3190	2302.12177	_	_
22-276	3190-3191	)	_	_
22-277	3192-3196	with	_	_
22-278	3197-3198	a	_	_
22-279	3199-3211	modification	_	_
22-280	3211-3212	:	_	_
22-281	3213-3215	we	_	_
22-282	3216-3224	utilized	_	_
22-283	3225-3226	a	_	_
22-284	3227-3233	single	_	_
22-285	3234-3244	validation	_	_
22-286	3245-3248	set	_	_
22-287	3249-3251	in	_	_
22-288	3252-3257	place	_	_
22-289	3258-3260	of	_	_
22-290	3261-3264	the	_	_
22-291	3265-3266	5	_	_
22-292	3266-3267	-	_	_
22-293	3267-3271	fold	_	_
22-294	3272-3288	cross-validation	_	_
22-295	3288-3289	,	_	_
22-296	3290-3293	due	_	_
22-297	3294-3296	to	_	_
22-298	3297-3310	computational	_	_
22-299	3311-3322	limitations	_	_
22-300	3322-3323	.	_	_

#Text=The processed datasets will be released soon, because of the large size of the datasets (graph with esm embeddings), we will upload the pipeline to process the raw data.  ### Raw Datasets  #### SC-PDB  <https://github.com/jivankandel/PUResNet/blob/main/scpdb\_subset.zip>  #### COACH420/HOLO4K  <https://github.com/rdk/p2rank-datasets>  These two datasets do not include ligands in a pre-extracted format.
23-1	3324-3327	The	_	_
23-2	3328-3337	processed	_	_
23-3	3338-3346	datasets	_	_
23-4	3347-3351	will	_	_
23-5	3352-3354	be	_	_
23-6	3355-3363	released	_	_
23-7	3364-3368	soon	_	_
23-8	3368-3369	,	_	_
23-9	3370-3377	because	_	_
23-10	3378-3380	of	_	_
23-11	3381-3384	the	_	_
23-12	3385-3390	large	_	_
23-13	3391-3395	size	_	_
23-14	3396-3398	of	_	_
23-15	3399-3402	the	_	_
23-16	3403-3411	datasets	_	_
23-17	3412-3413	(	_	_
23-18	3413-3418	graph	_	_
23-19	3419-3423	with	_	_
23-20	3424-3427	esm	_	_
23-21	3428-3438	embeddings	_	_
23-22	3438-3439	)	_	_
23-23	3439-3440	,	_	_
23-24	3441-3443	we	_	_
23-25	3444-3448	will	_	_
23-26	3449-3455	upload	_	_
23-27	3456-3459	the	_	_
23-28	3460-3468	pipeline	_	_
23-29	3469-3471	to	_	_
23-30	3472-3479	process	_	_
23-31	3480-3483	the	_	_
23-32	3484-3487	raw	_	_
23-33	3488-3492	data	_	_
23-34	3492-3493	.	_	_
23-35	3495-3496	#	_	_
23-36	3496-3497	#	_	_
23-37	3497-3498	#	_	_
23-38	3499-3502	Raw	_	_
23-39	3503-3511	Datasets	_	_
23-40	3513-3514	#	_	_
23-41	3514-3515	#	_	_
23-42	3515-3516	#	_	_
23-43	3516-3517	#	_	_
23-44	3518-3524	SC-PDB	_	_
23-45	3526-3527	<	_	_
23-46	3527-3532	https	_	_
23-47	3532-3533	:	_	_
23-48	3533-3534	/	_	_
23-49	3534-3535	/	_	_
23-50	3535-3545	github.com	_	_
23-51	3545-3546	/	_	_
23-52	3546-3557	jivankandel	_	_
23-53	3557-3558	/	_	_
23-54	3558-3566	PUResNet	_	_
23-55	3566-3567	/	_	_
23-56	3567-3571	blob	_	_
23-57	3571-3572	/	_	_
23-58	3572-3576	main	_	_
23-59	3576-3577	/	_	_
23-60	3577-3593	scpdb\_subset.zip	_	_
23-60	3577-3582	scpdb	_	_
23-61	3593-3594	>	_	_
23-62	3596-3597	#	_	_
23-63	3597-3598	#	_	_
23-64	3598-3599	#	_	_
23-65	3599-3600	#	_	_
23-66	3601-3609	COACH420	_	_
23-67	3609-3610	/	_	_
23-68	3610-3616	HOLO4K	_	_
23-69	3618-3619	<	_	_
23-70	3619-3624	https	_	_
23-71	3624-3625	:	_	_
23-72	3625-3626	/	_	_
23-73	3626-3627	/	_	_
23-74	3627-3637	github.com	_	_
23-75	3637-3638	/	_	_
23-76	3638-3641	rdk	_	_
23-77	3641-3642	/	_	_
23-78	3642-3657	p2rank-datasets	_	_
23-79	3657-3658	>	_	_
23-80	3660-3665	These	_	_
23-81	3666-3669	two	_	_
23-82	3670-3678	datasets	_	_
23-83	3679-3681	do	_	_
23-84	3682-3685	not	_	_
23-85	3686-3693	include	_	_
23-86	3694-3701	ligands	_	_
23-87	3702-3704	in	_	_
23-88	3705-3706	a	_	_
23-89	3707-3720	pre-extracted	_	_
23-90	3721-3727	format	_	_
23-91	3727-3728	.	_	_

#Text=Instead, the MOAD database contains the ligand information, according to the criteria of \*relevant ligand\* as specified in the MOAD database.
24-1	3729-3736	Instead	_	_
24-2	3736-3737	,	_	_
24-3	3738-3741	the	_	_
24-4	3742-3746	MOAD	_	_
24-5	3747-3755	database	_	_
24-6	3756-3764	contains	_	_
24-7	3765-3768	the	_	_
24-8	3769-3775	ligand	_	_
24-9	3776-3787	information	_	_
24-10	3787-3788	,	_	_
24-11	3789-3798	according	_	_
24-12	3799-3801	to	_	_
24-13	3802-3805	the	_	_
24-14	3806-3814	criteria	_	_
24-15	3815-3817	of	_	_
24-16	3818-3819	\*	_	_
24-17	3819-3827	relevant	_	_
24-18	3828-3834	ligand	_	_
24-19	3834-3835	\*	_	_
24-20	3836-3838	as	_	_
24-21	3839-3848	specified	_	_
24-22	3849-3851	in	_	_
24-23	3852-3855	the	_	_
24-24	3856-3860	MOAD	_	_
24-25	3861-3869	database	_	_
24-26	3869-3870	.	_	_

#Text=Ligand Information: <http://www.bindingmoad.org/files/csv/every\_bind.csv>  #### PDBBind  <http://www.pdbbind.org.cn/download/PDBbind\_v2020\_other\_PL.tar.gz>  ## Replicate results  If you want to replicated the results from the paper, put the downloaded datasets in the specific folders
25-1	3872-3878	Ligand	_	_
25-2	3879-3890	Information	_	_
25-3	3890-3891	:	_	_
25-4	3892-3893	<	_	_
25-5	3893-3897	http	_	_
25-6	3897-3898	:	_	_
25-7	3898-3899	/	_	_
25-8	3899-3900	/	_	_
25-9	3900-3919	www.bindingmoad.org	_	_
25-10	3919-3920	/	_	_
25-11	3920-3925	files	_	_
25-12	3925-3926	/	_	_
25-13	3926-3929	csv	_	_
25-14	3929-3930	/	_	_
25-15	3930-3944	every\_bind.csv	_	_
25-16	3944-3945	>	_	_
25-17	3947-3948	#	_	_
25-18	3948-3949	#	_	_
25-19	3949-3950	#	_	_
25-20	3950-3951	#	_	_
25-21	3952-3959	PDBBind	_	_
25-22	3961-3962	<	_	_
25-23	3962-3966	http	_	_
25-24	3966-3967	:	_	_
25-25	3967-3968	/	_	_
25-26	3968-3969	/	_	_
25-27	3969-3987	www.pdbbind.org.cn	_	_
25-28	3987-3988	/	_	_
25-29	3988-3996	download	_	_
25-30	3996-3997	/	_	_
25-31	3997-4010	PDBbind\_v2020	_	_
25-32	4010-4011	\_	_	_
25-33	4011-4026	other\_PL.tar.gz	_	_
25-34	4026-4027	>	_	_
25-35	4029-4030	#	_	_
25-36	4030-4031	#	_	_
25-37	4032-4041	Replicate	_	_
25-38	4042-4049	results	_	_
25-39	4051-4053	If	_	_
25-40	4054-4057	you	_	_
25-41	4058-4062	want	_	_
25-42	4063-4065	to	_	_
25-43	4066-4076	replicated	_	_
25-44	4077-4080	the	_	_
25-45	4081-4088	results	_	_
25-46	4089-4093	from	_	_
25-47	4094-4097	the	_	_
25-48	4098-4103	paper	_	_
25-49	4103-4104	,	_	_
25-50	4105-4108	put	_	_
25-51	4109-4112	the	_	_
25-52	4113-4123	downloaded	_	_
25-53	4124-4132	datasets	_	_
25-54	4133-4135	in	_	_
25-55	4136-4139	the	_	_
25-56	4140-4148	specific	_	_
25-57	4149-4156	folders	_	_

#Text=.
26-1	4156-4157	.	_	_

#Text=- `bindingsite\_test\_data/coach420/raw`  - `bindingsite\_test\_data/holo4k/raw`  - `bindingsite\_test\_data/holo4k\_split\_chain/raw`    This dataset is the same as the holo4k dataset, but the chains are split into separate files.
27-1	4159-4160	-	_	_
27-2	4161-4162	`	_	_
27-3	4162-4183	bindingsite\_test\_data	_	_
27-4	4183-4184	/	_	_
27-5	4184-4192	coach420	_	_
27-6	4192-4193	/	_	_
27-7	4193-4196	raw	_	_
27-8	4196-4197	`	_	_
27-9	4199-4200	-	_	_
27-10	4201-4202	`	_	_
27-11	4202-4223	bindingsite\_test\_data	_	_
27-12	4223-4224	/	_	_
27-13	4224-4230	holo4k	_	_
27-14	4230-4231	/	_	_
27-15	4231-4234	raw	_	_
27-16	4234-4235	`	_	_
27-17	4237-4238	-	_	_
27-18	4239-4240	`	_	_
27-19	4240-4261	bindingsite\_test\_data	_	_
27-20	4261-4262	/	_	_
27-21	4262-4280	holo4k\_split\_chain	_	_
27-21	4262-4268	holo4k	_	_
27-22	4280-4281	/	_	_
27-23	4281-4284	raw	_	_
27-24	4284-4285	`	_	_
27-25	4289-4293	This	_	_
27-26	4294-4301	dataset	_	_
27-27	4302-4304	is	_	_
27-28	4305-4308	the	_	_
27-29	4309-4313	same	_	_
27-30	4314-4316	as	_	_
27-31	4317-4320	the	_	_
27-32	4321-4327	holo4k	_	_
27-33	4328-4335	dataset	_	_
27-34	4335-4336	,	_	_
27-35	4337-4340	but	_	_
27-36	4341-4344	the	_	_
27-37	4345-4351	chains	_	_
27-38	4352-4355	are	_	_
27-39	4356-4361	split	_	_
27-40	4362-4366	into	_	_
27-41	4367-4375	separate	_	_
27-42	4376-4381	files	_	_
27-43	4381-4382	.	_	_

#Text=Look in the paper for more information
28-1	4383-4387	Look	_	_
28-2	4388-4390	in	_	_
28-3	4391-4394	the	_	_
28-4	4395-4400	paper	_	_
28-5	4401-4404	for	_	_
28-6	4405-4409	more	_	_
28-7	4410-4421	information	_	_

#Text=.
29-1	4421-4422	.	_	_

#Text=- `bindingsite\_test\_data/pdbbind2020/raw`  The holo4k and the coach420 dataset were created by extracting the relevant ligans from the MOAD database.
30-1	4424-4425	-	_	_
30-2	4426-4427	`	_	_
30-3	4427-4448	bindingsite\_test\_data	_	_
30-4	4448-4449	/	_	_
30-5	4449-4460	pdbbind2020	_	_
30-6	4460-4461	/	_	_
30-7	4461-4464	raw	_	_
30-8	4464-4465	`	_	_
30-9	4467-4470	The	_	_
30-10	4471-4477	holo4k	_	_
30-11	4478-4481	and	_	_
30-12	4482-4485	the	_	_
30-13	4486-4494	coach420	_	_
30-14	4495-4502	dataset	_	_
30-15	4503-4507	were	_	_
30-16	4508-4515	created	_	_
30-17	4516-4518	by	_	_
30-18	4519-4529	extracting	_	_
30-19	4530-4533	the	_	_
30-20	4534-4542	relevant	_	_
30-21	4543-4549	ligans	_	_
30-22	4550-4554	from	_	_
30-23	4555-4558	the	_	_
30-24	4559-4563	MOAD	_	_
30-25	4564-4572	database	_	_
30-26	4572-4573	.	_	_

#Text=All ligand protein complexes were put into a different folder, at inference we combine them by there pdb id to evalutate the model based on all the bindingsites for a given protein.  ### Process the datasets  This will create a `lmdb` database for each dataset.
31-1	4574-4577	All	_	_
31-2	4578-4584	ligand	_	_
31-3	4585-4592	protein	_	_
31-4	4593-4602	complexes	_	_
31-5	4603-4607	were	_	_
31-6	4608-4611	put	_	_
31-7	4612-4616	into	_	_
31-8	4617-4618	a	_	_
31-9	4619-4628	different	_	_
31-10	4629-4635	folder	_	_
31-11	4635-4636	,	_	_
31-12	4637-4639	at	_	_
31-13	4640-4649	inference	_	_
31-14	4650-4652	we	_	_
31-15	4653-4660	combine	_	_
31-16	4661-4665	them	_	_
31-17	4666-4668	by	_	_
31-18	4669-4674	there	_	_
31-19	4675-4678	pdb	_	_
31-20	4679-4681	id	_	_
31-21	4682-4684	to	_	_
31-22	4685-4694	evalutate	_	_
31-23	4695-4698	the	_	_
31-24	4699-4704	model	_	_
31-25	4705-4710	based	_	_
31-26	4711-4713	on	_	_
31-27	4714-4717	all	_	_
31-28	4718-4721	the	_	_
31-29	4722-4734	bindingsites	_	_
31-30	4735-4738	for	_	_
31-31	4739-4740	a	_	_
31-32	4741-4746	given	_	_
31-33	4747-4754	protein	_	_
31-34	4754-4755	.	_	_
31-35	4757-4758	#	_	_
31-36	4758-4759	#	_	_
31-37	4759-4760	#	_	_
31-38	4761-4768	Process	_	_
31-39	4769-4772	the	_	_
31-40	4773-4781	datasets	_	_
31-41	4783-4787	This	_	_
31-42	4788-4792	will	_	_
31-43	4793-4799	create	_	_
31-44	4800-4801	a	_	_
31-45	4802-4803	`	_	_
31-46	4803-4807	lmdb	_	_
31-47	4807-4808	`	_	_
31-48	4809-4817	database	_	_
31-49	4818-4821	for	_	_
31-50	4822-4826	each	_	_
31-51	4827-4834	dataset	_	_
31-52	4834-4835	.	_	_

#Text=The `lmdb` and avoids processing all the data again if you want to create a graph with different parameters.  ``` python process\_dataset.py --input\_path data/scpdb/scpdb\_subset\_puresnet/raw --output\_path data/scpdb/scpdb\_subset\_puresnet/raw --device cuda:0 --n\_jobs 8 python process\_dataset.py --input\_path data/bindingsite\_test\_data/coach420/raw --output\_path data/bindingsite\_test\_data/coach420/raw --device cuda:0 --n\_jobs 8 python process\_dataset.py --input\_path data/bindingsite\_test\_data/holo4k/raw --output\_path data/bindingsite\_test\_data/holo4k/raw --device cuda:0 --n\_jobs 8 python process\_dataset.py --input\_path data/bindingsite\_test\_data/holo4k\_split\_chain/raw --output\_path data/bindingsite\_test\_data/holo4k\_split\_chain/raw --device cuda:0 --n\_jobs 8 python process\_dataset.py --input\_path data/bindingsite\_test\_data/pdbbind2020/raw --output\_path data/bindingsite\_test\_data/pdbbind2020/raw --device cuda:0 --n\_jobs 8 ```  ### Train  Train the \*heterogenous\* or \*homogenous\* model with the parameters as used in the paper.
32-1	4836-4839	The	_	_
32-2	4840-4841	`	_	_
32-3	4841-4845	lmdb	_	_
32-4	4845-4846	`	_	_
32-5	4847-4850	and	_	_
32-6	4851-4857	avoids	_	_
32-7	4858-4868	processing	_	_
32-8	4869-4872	all	_	_
32-9	4873-4876	the	_	_
32-10	4877-4881	data	_	_
32-11	4882-4887	again	_	_
32-12	4888-4890	if	_	_
32-13	4891-4894	you	_	_
32-14	4895-4899	want	_	_
32-15	4900-4902	to	_	_
32-16	4903-4909	create	_	_
32-17	4910-4911	a	_	_
32-18	4912-4917	graph	_	_
32-19	4918-4922	with	_	_
32-20	4923-4932	different	_	_
32-21	4933-4943	parameters	_	_
32-22	4943-4944	.	_	_
32-23	4946-4947	`	_	_
32-24	4947-4948	`	_	_
32-25	4948-4949	`	_	_
32-26	4950-4956	python	_	_
32-27	4957-4975	process\_dataset.py	_	_
32-28	4976-4977	-	_	_
32-29	4977-4978	-	_	_
32-30	4978-4988	input\_path	_	_
32-31	4989-4993	data	_	_
32-32	4993-4994	/	_	_
32-33	4994-4999	scpdb	_	_
32-34	4999-5000	/	_	_
32-35	5000-5021	scpdb\_subset\_puresnet	_	_
32-35	5000-5005	scpdb	_	_
32-36	5021-5022	/	_	_
32-37	5022-5025	raw	_	_
32-38	5026-5027	-	_	_
32-39	5027-5028	-	_	_
32-40	5028-5039	output\_path	_	_
32-41	5040-5044	data	_	_
32-42	5044-5045	/	_	_
32-43	5045-5050	scpdb	_	_
32-44	5050-5051	/	_	_
32-45	5051-5072	scpdb\_subset\_puresnet	_	_
32-45	5051-5056	scpdb	_	_
32-46	5072-5073	/	_	_
32-47	5073-5076	raw	_	_
32-48	5077-5078	-	_	_
32-49	5078-5079	-	_	_
32-50	5079-5085	device	_	_
32-51	5086-5090	cuda	_	_
32-52	5090-5091	:	_	_
32-53	5091-5092	0	_	_
32-54	5093-5094	-	_	_
32-55	5094-5095	-	_	_
32-56	5095-5101	n\_jobs	_	_
32-57	5102-5103	8	_	_
32-58	5104-5110	python	_	_
32-59	5111-5129	process\_dataset.py	_	_
32-60	5130-5131	-	_	_
32-61	5131-5132	-	_	_
32-62	5132-5142	input\_path	_	_
32-63	5143-5147	data	_	_
32-64	5147-5148	/	_	_
32-65	5148-5169	bindingsite\_test\_data	_	_
32-66	5169-5170	/	_	_
32-67	5170-5178	coach420	_	_
32-68	5178-5179	/	_	_
32-69	5179-5182	raw	_	_
32-70	5183-5184	-	_	_
32-71	5184-5185	-	_	_
32-72	5185-5196	output\_path	_	_
32-73	5197-5201	data	_	_
32-74	5201-5202	/	_	_
32-75	5202-5223	bindingsite\_test\_data	_	_
32-76	5223-5224	/	_	_
32-77	5224-5232	coach420	_	_
32-78	5232-5233	/	_	_
32-79	5233-5236	raw	_	_
32-80	5237-5238	-	_	_
32-81	5238-5239	-	_	_
32-82	5239-5245	device	_	_
32-83	5246-5250	cuda	_	_
32-84	5250-5251	:	_	_
32-85	5251-5252	0	_	_
32-86	5253-5254	-	_	_
32-87	5254-5255	-	_	_
32-88	5255-5261	n\_jobs	_	_
32-89	5262-5263	8	_	_
32-90	5264-5270	python	_	_
32-91	5271-5289	process\_dataset.py	_	_
32-92	5290-5291	-	_	_
32-93	5291-5292	-	_	_
32-94	5292-5302	input\_path	_	_
32-95	5303-5307	data	_	_
32-96	5307-5308	/	_	_
32-97	5308-5329	bindingsite\_test\_data	_	_
32-98	5329-5330	/	_	_
32-99	5330-5336	holo4k	_	_
32-100	5336-5337	/	_	_
32-101	5337-5340	raw	_	_
32-102	5341-5342	-	_	_
32-103	5342-5343	-	_	_
32-104	5343-5354	output\_path	_	_
32-105	5355-5359	data	_	_
32-106	5359-5360	/	_	_
32-107	5360-5381	bindingsite\_test\_data	_	_
32-108	5381-5382	/	_	_
32-109	5382-5388	holo4k	_	_
32-110	5388-5389	/	_	_
32-111	5389-5392	raw	_	_
32-112	5393-5394	-	_	_
32-113	5394-5395	-	_	_
32-114	5395-5401	device	_	_
32-115	5402-5406	cuda	_	_
32-116	5406-5407	:	_	_
32-117	5407-5408	0	_	_
32-118	5409-5410	-	_	_
32-119	5410-5411	-	_	_
32-120	5411-5417	n\_jobs	_	_
32-121	5418-5419	8	_	_
32-122	5420-5426	python	_	_
32-123	5427-5445	process\_dataset.py	_	_
32-124	5446-5447	-	_	_
32-125	5447-5448	-	_	_
32-126	5448-5458	input\_path	_	_
32-127	5459-5463	data	_	_
32-128	5463-5464	/	_	_
32-129	5464-5485	bindingsite\_test\_data	_	_
32-130	5485-5486	/	_	_
32-131	5486-5504	holo4k\_split\_chain	_	_
32-131	5486-5492	holo4k	_	_
32-132	5504-5505	/	_	_
32-133	5505-5508	raw	_	_
32-134	5509-5510	-	_	_
32-135	5510-5511	-	_	_
32-136	5511-5522	output\_path	_	_
32-137	5523-5527	data	_	_
32-138	5527-5528	/	_	_
32-139	5528-5549	bindingsite\_test\_data	_	_
32-140	5549-5550	/	_	_
32-141	5550-5568	holo4k\_split\_chain	_	_
32-141	5550-5556	holo4k	_	_
32-142	5568-5569	/	_	_
32-143	5569-5572	raw	_	_
32-144	5573-5574	-	_	_
32-145	5574-5575	-	_	_
32-146	5575-5581	device	_	_
32-147	5582-5586	cuda	_	_
32-148	5586-5587	:	_	_
32-149	5587-5588	0	_	_
32-150	5589-5590	-	_	_
32-151	5590-5591	-	_	_
32-152	5591-5597	n\_jobs	_	_
32-153	5598-5599	8	_	_
32-154	5600-5606	python	_	_
32-155	5607-5625	process\_dataset.py	_	_
32-156	5626-5627	-	_	_
32-157	5627-5628	-	_	_
32-158	5628-5638	input\_path	_	_
32-159	5639-5643	data	_	_
32-160	5643-5644	/	_	_
32-161	5644-5665	bindingsite\_test\_data	_	_
32-162	5665-5666	/	_	_
32-163	5666-5677	pdbbind2020	_	_
32-164	5677-5678	/	_	_
32-165	5678-5681	raw	_	_
32-166	5682-5683	-	_	_
32-167	5683-5684	-	_	_
32-168	5684-5695	output\_path	_	_
32-169	5696-5700	data	_	_
32-170	5700-5701	/	_	_
32-171	5701-5722	bindingsite\_test\_data	_	_
32-172	5722-5723	/	_	_
32-173	5723-5734	pdbbind2020	_	_
32-174	5734-5735	/	_	_
32-175	5735-5738	raw	_	_
32-176	5739-5740	-	_	_
32-177	5740-5741	-	_	_
32-178	5741-5747	device	_	_
32-179	5748-5752	cuda	_	_
32-180	5752-5753	:	_	_
32-181	5753-5754	0	_	_
32-182	5755-5756	-	_	_
32-183	5756-5757	-	_	_
32-184	5757-5763	n\_jobs	_	_
32-185	5764-5765	8	_	_
32-186	5766-5767	`	_	_
32-187	5767-5768	`	_	_
32-188	5768-5769	`	_	_
32-189	5771-5772	#	_	_
32-190	5772-5773	#	_	_
32-191	5773-5774	#	_	_
32-192	5775-5780	Train	_	_
32-193	5782-5787	Train	_	_
32-194	5788-5791	the	_	_
32-195	5792-5793	\*	_	_
32-196	5793-5805	heterogenous	_	_
32-197	5805-5806	\*	_	_
32-198	5807-5809	or	_	_
32-199	5810-5811	\*	_	_
32-200	5811-5821	homogenous	_	_
32-201	5821-5822	\*	_	_
32-202	5823-5828	model	_	_
32-203	5829-5833	with	_	_
32-204	5834-5837	the	_	_
32-205	5838-5848	parameters	_	_
32-206	5849-5851	as	_	_
32-207	5852-5856	used	_	_
32-208	5857-5859	in	_	_
32-209	5860-5863	the	_	_
32-210	5864-5869	paper	_	_
32-211	5869-5870	.	_	_

#Text=```python python train.py --config-name=config\_binding\_hetero        # heterogenous model, top performing model in the paper ```  For training on \[SLURM\](https://www.schedmd.com/) cluster with \[submitit\](https://github.com/facebookincubator/submitit)  used the `conf/hydra/meluxina.yaml` as blueprint.
33-1	5872-5873	`	_	_
33-2	5873-5874	`	_	_
33-3	5874-5875	`	_	_
33-4	5875-5881	python	_	_
33-5	5882-5888	python	_	_
33-6	5889-5897	train.py	_	_
33-7	5898-5899	-	_	_
33-8	5899-5900	-	_	_
33-9	5900-5911	config-name	_	_
33-10	5911-5912	=	_	_
33-11	5912-5933	config\_binding\_hetero	_	_
33-12	5941-5942	#	_	_
33-13	5943-5955	heterogenous	_	_
33-14	5956-5961	model	_	_
33-15	5961-5962	,	_	_
33-16	5963-5966	top	_	_
33-17	5967-5977	performing	_	_
33-18	5978-5983	model	_	_
33-19	5984-5986	in	_	_
33-20	5987-5990	the	_	_
33-21	5991-5996	paper	_	_
33-22	5997-5998	`	_	_
33-23	5998-5999	`	_	_
33-24	5999-6000	`	_	_
33-25	6002-6005	For	_	_
33-26	6006-6014	training	_	_
33-27	6015-6017	on	_	_
33-28	6018-6019	\[	_	_
33-29	6019-6024	SLURM	_	_
33-30	6024-6025	\]	_	_
33-31	6025-6026	(	_	_
33-32	6026-6031	https	_	_
33-33	6031-6032	:	_	_
33-34	6032-6033	/	_	_
33-35	6033-6034	/	_	_
33-36	6034-6049	www.schedmd.com	_	_
33-37	6049-6050	/	_	_
33-38	6050-6051	)	_	_
33-39	6052-6059	cluster	_	_
33-40	6060-6064	with	_	_
33-41	6065-6066	\[	_	_
33-42	6066-6074	submitit	_	_
33-43	6074-6075	\]	_	_
33-44	6075-6076	(	_	_
33-45	6076-6081	https	_	_
33-46	6081-6082	:	_	_
33-47	6082-6083	/	_	_
33-48	6083-6084	/	_	_
33-49	6084-6094	github.com	_	_
33-50	6094-6095	/	_	_
33-51	6095-6112	facebookincubator	_	_
33-52	6112-6113	/	_	_
33-53	6113-6121	submitit	_	_
33-54	6121-6122	)	_	_
33-55	6124-6128	used	_	_
33-56	6129-6132	the	_	_
33-57	6133-6134	`	_	_
33-58	6134-6138	conf	_	_
33-59	6138-6139	/	_	_
33-60	6139-6144	hydra	_	_
33-61	6144-6145	/	_	_
33-62	6145-6158	meluxina.yaml	_	_
33-63	6158-6159	`	_	_
33-64	6160-6162	as	_	_
33-65	6163-6172	blueprint	_	_
33-66	6172-6173	.	_	_

#Text=```python python train.py --config-name=config\_binding\_hetero hydra=meluxina --multirun        # homogenous model traind on SLURM hydra=meluxina ```  ### Run on test dataset  ```python # Run this from the root of the project from src.models.egnn import EGNNClassifierGlobalNodeHetero from hydra.utils import instantiate import pytorch\_lightning as pl  path\_to\_config = "/path/to\_config/" cfg = OmegaConf.create(run.config)      datamodule = instantiate(cfg.datamodule) ckpt\_file = "/path/to/your/checkpoint.ckpt"      model = EGNNClassifierGlobalNodeHetero.load\_from\_checkpoint(     ckpt\_file,     strict=False,     segmentation\_loss=instantiate(cfg.model.segmentation\_loss),     global\_node\_pos\_loss=instantiate(cfg.model.global\_node\_pos\_loss), ) model.eval()  trainer = pl.Trainer(devices=1) loader = datamodule.named\_test\_loaders\["test\_coach420"\] # name of dataloader \["test\_coach420", "test\_pdbbind2020", "test\_holo4k"\] trainer.test(model, dataloaders=loader)                 # CAUTION: for the test\_holo4k dataset, if you evalute it like this you will get lower scores than reported in the paper, # For the results in the paper we splitted the proteins into chains, run the predictions and combined them (clean code for this procedure will be released in future) # The intuition behind this step is explained in the paper. ```  ## Citation  ``` @misc{sestak2024vnegnn,       title={VN-EGNN: E(3)-Equivariant Graph Neural Networks with Virtual Nodes Enhance Protein Binding Site Identification},        author={Florian Sestak and Lisa Schneckenreiter and Johannes Brandstetter and Sepp Hochreiter and Andreas Mayr and GÃ¼nter Klambauer},       year={2024},       eprint={2404.07194},       archivePrefix={arXiv},       primaryClass={cs.LG} } ```  ## License  MIT  ## Acknowledgements  The ELLIS Unit Linz, the LIT AI Lab, the Institute for Ma- chine Learning, are supported by the Federal State Upper Austria.
34-1	6175-6176	`	_	_
34-2	6176-6177	`	_	_
34-3	6177-6178	`	_	_
34-4	6178-6184	python	_	_
34-5	6185-6191	python	_	_
34-6	6192-6200	train.py	_	_
34-7	6201-6202	-	_	_
34-8	6202-6203	-	_	_
34-9	6203-6214	config-name	_	_
34-10	6214-6215	=	_	_
34-11	6215-6236	config\_binding\_hetero	_	_
34-12	6237-6242	hydra	_	_
34-13	6242-6243	=	_	_
34-14	6243-6251	meluxina	_	_
34-15	6252-6253	-	_	_
34-16	6253-6254	-	_	_
34-17	6254-6262	multirun	_	_
34-18	6270-6271	#	_	_
34-19	6272-6282	homogenous	_	_
34-20	6283-6288	model	_	_
34-21	6289-6295	traind	_	_
34-22	6296-6298	on	_	_
34-23	6299-6304	SLURM	_	_
34-24	6305-6310	hydra	_	_
34-25	6310-6311	=	_	_
34-26	6311-6319	meluxina	_	_
34-27	6320-6321	`	_	_
34-28	6321-6322	`	_	_
34-29	6322-6323	`	_	_
34-30	6325-6326	#	_	_
34-31	6326-6327	#	_	_
34-32	6327-6328	#	_	_
34-33	6329-6332	Run	_	_
34-34	6333-6335	on	_	_
34-35	6336-6340	test	_	_
34-36	6341-6348	dataset	_	_
34-37	6350-6351	`	_	_
34-38	6351-6352	`	_	_
34-39	6352-6353	`	_	_
34-40	6353-6359	python	_	_
34-41	6360-6361	#	_	_
34-42	6362-6365	Run	_	_
34-43	6366-6370	this	_	_
34-44	6371-6375	from	_	_
34-45	6376-6379	the	_	_
34-46	6380-6384	root	_	_
34-47	6385-6387	of	_	_
34-48	6388-6391	the	_	_
34-49	6392-6399	project	_	_
34-50	6400-6404	from	_	_
34-51	6405-6420	src.models.egnn	_	_
34-52	6421-6427	import	_	_
34-53	6428-6458	EGNNClassifierGlobalNodeHetero	_	_
34-54	6459-6463	from	_	_
34-55	6464-6475	hydra.utils	_	_
34-55	6464-6469	hydra	_	_
34-56	6476-6482	import	_	_
34-57	6483-6494	instantiate	_	_
34-58	6495-6501	import	_	_
34-59	6502-6519	pytorch\_lightning	_	_
34-60	6520-6522	as	_	_
34-61	6523-6525	pl	_	_
34-62	6527-6541	path\_to\_config	_	_
34-63	6542-6543	=	_	_
34-64	6544-6545	"	_	_
34-65	6545-6546	/	_	_
34-66	6546-6550	path	_	_
34-67	6550-6551	/	_	_
34-68	6551-6560	to\_config	_	_
34-69	6560-6561	/	_	_
34-70	6561-6562	"	_	_
34-71	6563-6566	cfg	_	_
34-72	6567-6568	=	_	_
34-73	6569-6585	OmegaConf.create	_	_
34-73	6569-6578	OmegaConf	_	_
34-74	6585-6586	(	_	_
34-75	6586-6596	run.config	_	_
34-76	6596-6597	)	_	_
34-77	6603-6613	datamodule	_	_
34-78	6614-6615	=	_	_
34-79	6616-6627	instantiate	_	_
34-80	6627-6628	(	_	_
34-81	6628-6642	cfg.datamodule	_	_
34-82	6642-6643	)	_	_
34-83	6644-6653	ckpt\_file	_	_
34-84	6654-6655	=	_	_
34-85	6656-6657	"	_	_
34-86	6657-6658	/	_	_
34-87	6658-6662	path	_	_
34-88	6662-6663	/	_	_
34-89	6663-6665	to	_	_
34-90	6665-6666	/	_	_
34-91	6666-6670	your	_	_
34-92	6670-6671	/	_	_
34-93	6671-6686	checkpoint.ckpt	_	_
34-94	6686-6687	"	_	_
34-95	6693-6698	model	_	_
34-96	6699-6700	=	_	_
34-97	6701-6752	EGNNClassifierGlobalNodeHetero.load\_from\_checkpoint	_	_
34-97	6701-6731	EGNNClassifierGlobalNodeHetero	_	_
34-98	6752-6753	(	_	_
34-99	6758-6767	ckpt\_file	_	_
34-100	6767-6768	,	_	_
34-101	6773-6779	strict	_	_
34-102	6779-6780	=	_	_
34-103	6780-6785	False	_	_
34-104	6785-6786	,	_	_
34-105	6791-6808	segmentation\_loss	_	_
34-106	6808-6809	=	_	_
34-107	6809-6820	instantiate	_	_
34-108	6820-6821	(	_	_
34-109	6821-6848	cfg.model.segmentation\_loss	_	_
34-110	6848-6849	)	_	_
34-111	6849-6850	,	_	_
34-112	6855-6875	global\_node\_pos\_loss	_	_
34-113	6875-6876	=	_	_
34-114	6876-6887	instantiate	_	_
34-115	6887-6888	(	_	_
34-116	6888-6918	cfg.model.global\_node\_pos\_loss	_	_
34-117	6918-6919	)	_	_
34-118	6919-6920	,	_	_
34-119	6921-6922	)	_	_
34-120	6923-6933	model.eval	_	_
34-121	6933-6934	(	_	_
34-122	6934-6935	)	_	_
34-123	6937-6944	trainer	_	_
34-124	6945-6946	=	_	_
34-125	6947-6957	pl.Trainer	_	_
34-126	6957-6958	(	_	_
34-127	6958-6965	devices	_	_
34-128	6965-6966	=	_	_
34-129	6966-6967	1	_	_
34-130	6967-6968	)	_	_
34-131	6969-6975	loader	_	_
34-132	6976-6977	=	_	_
34-133	6978-7007	datamodule.named\_test\_loaders	_	_
34-134	7007-7008	\[	_	_
34-135	7008-7009	"	_	_
34-136	7009-7022	test\_coach420	_	_
34-136	7014-7022	coach420	_	_
34-137	7022-7023	"	_	_
34-138	7023-7024	\]	_	_
34-139	7025-7026	#	_	_
34-140	7027-7031	name	_	_
34-141	7032-7034	of	_	_
34-142	7035-7045	dataloader	_	_
34-143	7046-7047	\[	_	_
34-144	7047-7048	"	_	_
34-145	7048-7061	test\_coach420	_	_
34-145	7053-7061	coach420	_	_
34-146	7061-7062	"	_	_
34-147	7062-7063	,	_	_
34-148	7064-7065	"	_	_
34-149	7065-7081	test\_pdbbind2020	_	_
34-149	7070-7081	pdbbind2020	_	_
34-150	7081-7082	"	_	_
34-151	7082-7083	,	_	_
34-152	7084-7085	"	_	_
34-153	7085-7096	test\_holo4k	_	_
34-153	7090-7096	holo4k	_	_
34-154	7096-7097	"	_	_
34-155	7097-7098	\]	_	_
34-156	7099-7111	trainer.test	_	_
34-157	7111-7112	(	_	_
34-158	7112-7117	model	_	_
34-159	7117-7118	,	_	_
34-160	7119-7130	dataloaders	_	_
34-161	7130-7131	=	_	_
34-162	7131-7137	loader	_	_
34-163	7137-7138	)	_	_
34-164	7155-7156	#	_	_
34-165	7157-7164	CAUTION	_	_
34-166	7164-7165	:	_	_
34-167	7166-7169	for	_	_
34-168	7170-7173	the	_	_
34-169	7174-7185	test\_holo4k	_	_
34-169	7179-7185	holo4k	_	_
34-170	7186-7193	dataset	_	_
34-171	7193-7194	,	_	_
34-172	7195-7197	if	_	_
34-173	7198-7201	you	_	_
34-174	7202-7209	evalute	_	_
34-175	7210-7212	it	_	_
34-176	7213-7217	like	_	_
34-177	7218-7222	this	_	_
34-178	7223-7226	you	_	_
34-179	7227-7231	will	_	_
34-180	7232-7235	get	_	_
34-181	7236-7241	lower	_	_
34-182	7242-7248	scores	_	_
34-183	7249-7253	than	_	_
34-184	7254-7262	reported	_	_
34-185	7263-7265	in	_	_
34-186	7266-7269	the	_	_
34-187	7270-7275	paper	_	_
34-188	7275-7276	,	_	_
34-189	7277-7278	#	_	_
34-190	7279-7282	For	_	_
34-191	7283-7286	the	_	_
34-192	7287-7294	results	_	_
34-193	7295-7297	in	_	_
34-194	7298-7301	the	_	_
34-195	7302-7307	paper	_	_
34-196	7308-7310	we	_	_
34-197	7311-7319	splitted	_	_
34-198	7320-7323	the	_	_
34-199	7324-7332	proteins	_	_
34-200	7333-7337	into	_	_
34-201	7338-7344	chains	_	_
34-202	7344-7345	,	_	_
34-203	7346-7349	run	_	_
34-204	7350-7353	the	_	_
34-205	7354-7365	predictions	_	_
34-206	7366-7369	and	_	_
34-207	7370-7378	combined	_	_
34-208	7379-7383	them	_	_
34-209	7384-7385	(	_	_
34-210	7385-7390	clean	_	_
34-211	7391-7395	code	_	_
34-212	7396-7399	for	_	_
34-213	7400-7404	this	_	_
34-214	7405-7414	procedure	_	_
34-215	7415-7419	will	_	_
34-216	7420-7422	be	_	_
34-217	7423-7431	released	_	_
34-218	7432-7434	in	_	_
34-219	7435-7441	future	_	_
34-220	7441-7442	)	_	_
34-221	7443-7444	#	_	_
34-222	7445-7448	The	_	_
34-223	7449-7458	intuition	_	_
34-224	7459-7465	behind	_	_
34-225	7466-7470	this	_	_
34-226	7471-7475	step	_	_
34-227	7476-7478	is	_	_
34-228	7479-7488	explained	_	_
34-229	7489-7491	in	_	_
34-230	7492-7495	the	_	_
34-231	7496-7501	paper	_	_
34-232	7501-7502	.	_	_
34-233	7503-7504	`	_	_
34-234	7504-7505	`	_	_
34-235	7505-7506	`	_	_
34-236	7508-7509	#	_	_
34-237	7509-7510	#	_	_
34-238	7511-7519	Citation	_	_
34-239	7521-7522	`	_	_
34-240	7522-7523	`	_	_
34-241	7523-7524	`	_	_
34-242	7525-7526	@	_	_
34-243	7526-7530	misc	_	_
34-244	7530-7531	{	_	_
34-245	7531-7547	sestak2024vnegnn	_	_
34-246	7547-7548	,	_	_
34-247	7555-7560	title	_	_
34-248	7560-7561	=	_	_
34-249	7561-7562	{	_	_
34-250	7562-7569	VN-EGNN	_	_
34-251	7569-7570	:	_	_
34-252	7571-7572	E	_	_
34-253	7572-7573	(	_	_
34-254	7573-7574	3	_	_
34-255	7574-7575	)	_	_
34-256	7575-7576	-	_	_
34-257	7576-7587	Equivariant	_	_
34-258	7588-7593	Graph	_	_
34-259	7594-7600	Neural	_	_
34-260	7601-7609	Networks	_	_
34-261	7610-7614	with	_	_
34-262	7615-7622	Virtual	_	_
34-263	7623-7628	Nodes	_	_
34-264	7629-7636	Enhance	_	_
34-265	7637-7644	Protein	_	_
34-266	7645-7652	Binding	_	_
34-267	7653-7657	Site	_	_
34-268	7658-7672	Identification	_	_
34-269	7672-7673	}	_	_
34-270	7673-7674	,	_	_
34-271	7682-7688	author	_	_
34-272	7688-7689	=	_	_
34-273	7689-7690	{	_	_
34-274	7690-7697	Florian	_	_
34-275	7698-7704	Sestak	_	_
34-276	7705-7708	and	_	_
34-277	7709-7713	Lisa	_	_
34-278	7714-7729	Schneckenreiter	_	_
34-279	7730-7733	and	_	_
34-280	7734-7742	Johannes	_	_
34-281	7743-7755	Brandstetter	_	_
34-282	7756-7759	and	_	_
34-283	7760-7764	Sepp	_	_
34-284	7765-7775	Hochreiter	_	_
34-285	7776-7779	and	_	_
34-286	7780-7787	Andreas	_	_
34-287	7788-7792	Mayr	_	_
34-288	7793-7796	and	_	_
34-289	7797-7803	GÃ¼nter	_	_
34-290	7804-7813	Klambauer	_	_
34-291	7813-7814	}	_	_
34-292	7814-7815	,	_	_
34-293	7822-7826	year	_	_
34-294	7826-7827	=	_	_
34-295	7827-7828	{	_	_
34-296	7828-7832	2024	_	_
34-297	7832-7833	}	_	_
34-298	7833-7834	,	_	_
34-299	7841-7847	eprint	_	_
34-300	7847-7848	=	_	_
34-301	7848-7849	{	_	_
34-302	7849-7859	2404.07194	_	_
34-303	7859-7860	}	_	_
34-304	7860-7861	,	_	_
34-305	7868-7881	archivePrefix	_	_
34-306	7881-7882	=	_	_
34-307	7882-7883	{	_	_
34-308	7883-7888	arXiv	_	_
34-309	7888-7889	}	_	_
34-310	7889-7890	,	_	_
34-311	7897-7909	primaryClass	_	_
34-312	7909-7910	=	_	_
34-313	7910-7911	{	_	_
34-314	7911-7916	cs.LG	_	_
34-315	7916-7917	}	_	_
34-316	7918-7919	}	_	_
34-317	7920-7921	`	_	_
34-318	7921-7922	`	_	_
34-319	7922-7923	`	_	_
34-320	7925-7926	#	_	_
34-321	7926-7927	#	_	_
34-322	7928-7935	License	_	_
34-323	7937-7940	MIT	_	_
34-324	7942-7943	#	_	_
34-325	7943-7944	#	_	_
34-326	7945-7961	Acknowledgements	_	_
34-327	7963-7966	The	_	_
34-328	7967-7972	ELLIS	_	_
34-329	7973-7977	Unit	_	_
34-330	7978-7982	Linz	_	_
34-331	7982-7983	,	_	_
34-332	7984-7987	the	_	_
34-333	7988-7991	LIT	_	_
34-334	7992-7994	AI	_	_
34-335	7995-7998	Lab	_	_
34-336	7998-7999	,	_	_
34-337	8000-8003	the	_	_
34-338	8004-8013	Institute	_	_
34-339	8014-8017	for	_	_
34-340	8018-8020	Ma	_	_
34-341	8020-8021	-	_	_
34-342	8022-8027	chine	_	_
34-343	8028-8036	Learning	_	_
34-344	8036-8037	,	_	_
34-345	8038-8041	are	_	_
34-346	8042-8051	supported	_	_
34-347	8052-8054	by	_	_
34-348	8055-8058	the	_	_
34-349	8059-8066	Federal	_	_
34-350	8067-8072	State	_	_
34-351	8073-8078	Upper	_	_
34-352	8079-8086	Austria	_	_
34-353	8086-8087	.	_	_

#Text=We thank the projects AI-MOTION (LIT-2018- 6-YOU-212), DeepFlood (LIT-2019-8-YOU-213), Medi- cal Cognitive Computing Center (MC3), INCONTROL- RL (FFG-881064), PRIMAL (FFG-873979), S3AI (FFG- 872172), DL for GranularFlow (FFG-871302), EPILEP- SIA (FFG-892171), AIRI FG 9-N (FWF-36284, FWF- 36235), AI4GreenHeatingGrids(FFG- 899943), INTE- GRATE (FFG-892418), ELISE (H2020-ICT-2019-3 ID: 951847), Stars4Waters (HORIZON-CL6-2021-CLIMATE- 01-01).
35-1	8088-8090	We	_	_
35-2	8091-8096	thank	_	_
35-3	8097-8100	the	_	_
35-4	8101-8109	projects	_	_
35-5	8110-8119	AI-MOTION	_	_
35-6	8120-8121	(	_	_
35-7	8121-8124	LIT	_	_
35-8	8124-8125	-	_	_
35-9	8125-8129	2018	_	_
35-10	8129-8130	-	_	_
35-11	8131-8132	6	_	_
35-12	8132-8133	-	_	_
35-13	8133-8136	YOU	_	_
35-14	8136-8137	-	_	_
35-15	8137-8140	212	_	_
35-16	8140-8141	)	_	_
35-17	8141-8142	,	_	_
35-18	8143-8152	DeepFlood	_	_
35-19	8153-8154	(	_	_
35-20	8154-8157	LIT	_	_
35-21	8157-8158	-	_	_
35-22	8158-8162	2019	_	_
35-23	8162-8163	-	_	_
35-24	8163-8164	8	_	_
35-25	8164-8165	-	_	_
35-26	8165-8168	YOU	_	_
35-27	8168-8169	-	_	_
35-28	8169-8172	213	_	_
35-29	8172-8173	)	_	_
35-30	8173-8174	,	_	_
35-31	8175-8179	Medi	_	_
35-32	8179-8180	-	_	_
35-33	8181-8184	cal	_	_
35-34	8185-8194	Cognitive	_	_
35-35	8195-8204	Computing	_	_
35-36	8205-8211	Center	_	_
35-37	8212-8213	(	_	_
35-38	8213-8216	MC3	_	_
35-39	8216-8217	)	_	_
35-40	8217-8218	,	_	_
35-41	8219-8228	INCONTROL	_	_
35-42	8228-8229	-	_	_
35-43	8230-8232	RL	_	_
35-44	8233-8234	(	_	_
35-45	8234-8237	FFG	_	_
35-46	8237-8238	-	_	_
35-47	8238-8244	881064	_	_
35-48	8244-8245	)	_	_
35-49	8245-8246	,	_	_
35-50	8247-8253	PRIMAL	_	_
35-51	8254-8255	(	_	_
35-52	8255-8258	FFG	_	_
35-53	8258-8259	-	_	_
35-54	8259-8265	873979	_	_
35-55	8265-8266	)	_	_
35-56	8266-8267	,	_	_
35-57	8268-8272	S3AI	_	_
35-58	8273-8274	(	_	_
35-59	8274-8277	FFG	_	_
35-60	8277-8278	-	_	_
35-61	8279-8285	872172	_	_
35-62	8285-8286	)	_	_
35-63	8286-8287	,	_	_
35-64	8288-8290	DL	_	_
35-65	8291-8294	for	_	_
35-66	8295-8307	GranularFlow	_	_
35-67	8308-8309	(	_	_
35-68	8309-8312	FFG	_	_
35-69	8312-8313	-	_	_
35-70	8313-8319	871302	_	_
35-71	8319-8320	)	_	_
35-72	8320-8321	,	_	_
35-73	8322-8328	EPILEP	_	_
35-74	8328-8329	-	_	_
35-75	8330-8333	SIA	_	_
35-76	8334-8335	(	_	_
35-77	8335-8338	FFG	_	_
35-78	8338-8339	-	_	_
35-79	8339-8345	892171	_	_
35-80	8345-8346	)	_	_
35-81	8346-8347	,	_	_
35-82	8348-8352	AIRI	_	_
35-83	8353-8355	FG	_	_
35-84	8356-8357	9	_	_
35-85	8357-8358	-	_	_
35-86	8358-8359	N	_	_
35-87	8360-8361	(	_	_
35-88	8361-8364	FWF	_	_
35-89	8364-8365	-	_	_
35-90	8365-8370	36284	_	_
35-91	8370-8371	,	_	_
35-92	8372-8375	FWF	_	_
35-93	8375-8376	-	_	_
35-94	8377-8382	36235	_	_
35-95	8382-8383	)	_	_
35-96	8383-8384	,	_	_
35-97	8385-8405	AI4GreenHeatingGrids	_	_
35-98	8405-8406	(	_	_
35-99	8406-8409	FFG	_	_
35-100	8409-8410	-	_	_
35-101	8411-8417	899943	_	_
35-102	8417-8418	)	_	_
35-103	8418-8419	,	_	_
35-104	8420-8424	INTE	_	_
35-105	8424-8425	-	_	_
35-106	8426-8431	GRATE	_	_
35-107	8432-8433	(	_	_
35-108	8433-8436	FFG	_	_
35-109	8436-8437	-	_	_
35-110	8437-8443	892418	_	_
35-111	8443-8444	)	_	_
35-112	8444-8445	,	_	_
35-113	8446-8451	ELISE	_	_
35-114	8452-8453	(	_	_
35-115	8453-8458	H2020	_	_
35-116	8458-8459	-	_	_
35-117	8459-8462	ICT	_	_
35-118	8462-8463	-	_	_
35-119	8463-8467	2019	_	_
35-120	8467-8468	-	_	_
35-121	8468-8469	3	_	_
35-122	8470-8472	ID	_	_
35-123	8472-8473	:	_	_
35-124	8474-8480	951847	_	_
35-125	8480-8481	)	_	_
35-126	8481-8482	,	_	_
35-127	8483-8495	Stars4Waters	_	_
35-128	8496-8497	(	_	_
35-129	8497-8508	HORIZON-CL6	_	_
35-130	8508-8509	-	_	_
35-131	8509-8513	2021	_	_
35-132	8513-8514	-	_	_
35-133	8514-8521	CLIMATE	_	_
35-134	8521-8522	-	_	_
35-135	8523-8525	01	_	_
35-136	8525-8526	-	_	_
35-137	8526-8528	01	_	_
35-138	8528-8529	)	_	_
35-139	8529-8530	.	_	_

#Text=We thank Audi.JKU Deep Learning Center, TGW LOGISTICS GROUP GMBH, Silicon Austria Labs (SAL), FILL Gesellschaft mbH, Anyline GmbH, Google, ZF Friedrichshafen AG, Robert Bosch GmbH, UCB Bio- pharma SRL, Merck Healthcare KGaA, Verbund AG, GLS (Univ.
36-1	8531-8533	We	_	_
36-2	8534-8539	thank	_	_
36-3	8540-8548	Audi.JKU	_	_
36-4	8549-8553	Deep	_	_
36-5	8554-8562	Learning	_	_
36-6	8563-8569	Center	_	_
36-7	8569-8570	,	_	_
36-8	8571-8574	TGW	_	_
36-9	8575-8584	LOGISTICS	_	_
36-10	8585-8590	GROUP	_	_
36-11	8591-8595	GMBH	_	_
36-12	8595-8596	,	_	_
36-13	8597-8604	Silicon	_	_
36-14	8605-8612	Austria	_	_
36-15	8613-8617	Labs	_	_
36-16	8618-8619	(	_	_
36-17	8619-8622	SAL	_	_
36-18	8622-8623	)	_	_
36-19	8623-8624	,	_	_
36-20	8625-8629	FILL	_	_
36-21	8630-8642	Gesellschaft	_	_
36-22	8643-8646	mbH	_	_
36-23	8646-8647	,	_	_
36-24	8648-8655	Anyline	_	_
36-25	8656-8660	GmbH	_	_
36-26	8660-8661	,	_	_
36-27	8662-8668	Google	_	_
36-28	8668-8669	,	_	_
36-29	8670-8672	ZF	_	_
36-30	8673-8688	Friedrichshafen	_	_
36-31	8689-8691	AG	_	_
36-32	8691-8692	,	_	_
36-33	8693-8699	Robert	_	_
36-34	8700-8705	Bosch	_	_
36-35	8706-8710	GmbH	_	_
36-36	8710-8711	,	_	_
36-37	8712-8715	UCB	_	_
36-38	8716-8719	Bio	_	_
36-39	8719-8720	-	_	_
36-40	8721-8727	pharma	_	_
36-41	8728-8731	SRL	_	_
36-42	8731-8732	,	_	_
36-43	8733-8738	Merck	_	_
36-44	8739-8749	Healthcare	_	_
36-45	8750-8754	KGaA	_	_
36-46	8754-8755	,	_	_
36-47	8756-8763	Verbund	_	_
36-48	8764-8766	AG	_	_
36-49	8766-8767	,	_	_
36-50	8768-8771	GLS	_	_
36-51	8772-8773	(	_	_
36-52	8773-8777	Univ	_	_
36-53	8777-8778	.	_	_

#Text=Waterloo) Software Competence Center Hagen- berg GmbH, TÃœV Austria, Frauscher Sensonic, TRUMPF and the NVIDIA Corporation.
37-1	8779-8787	Waterloo	_	_
37-2	8787-8788	)	_	_
37-3	8789-8797	Software	_	_
37-4	8798-8808	Competence	_	_
37-5	8809-8815	Center	_	_
37-6	8816-8821	Hagen	_	_
37-7	8821-8822	-	_	_
37-8	8823-8827	berg	_	_
37-9	8828-8832	GmbH	_	_
37-10	8832-8833	,	_	_
37-11	8834-8837	TÃœV	_	_
37-12	8838-8845	Austria	_	_
37-13	8845-8846	,	_	_
37-14	8847-8856	Frauscher	_	_
37-15	8857-8865	Sensonic	_	_
37-16	8865-8866	,	_	_
37-17	8867-8873	TRUMPF	_	_
37-18	8874-8877	and	_	_
37-19	8878-8881	the	_	_
37-20	8882-8888	NVIDIA	_	_
37-21	8889-8900	Corporation	_	_
37-22	8900-8901	.	_	_

#Text=We acknowledge EuroHPC Joint Undertaking for awarding us access to Karolina at IT4Innovations, Czech Republic\; MeluXina at LuxProvide, Luxembourg\; LUMI at CSC, Finland.  !
38-1	8902-8904	We	_	_
38-2	8905-8916	acknowledge	_	_
38-3	8917-8924	EuroHPC	_	_
38-4	8925-8930	Joint	_	_
38-5	8931-8942	Undertaking	_	_
38-6	8943-8946	for	_	_
38-7	8947-8955	awarding	_	_
38-8	8956-8958	us	_	_
38-9	8959-8965	access	_	_
38-10	8966-8968	to	_	_
38-11	8969-8977	Karolina	_	_
38-12	8978-8980	at	_	_
38-13	8981-8995	IT4Innovations	_	_
38-14	8995-8996	,	_	_
38-15	8997-9002	Czech	_	_
38-16	9003-9011	Republic	_	_
38-17	9011-9012	\;	_	_
38-18	9013-9021	MeluXina	_	_
38-19	9022-9024	at	_	_
38-20	9025-9035	LuxProvide	_	_
38-21	9035-9036	,	_	_
38-22	9037-9047	Luxembourg	_	_
38-23	9047-9048	\;	_	_
38-24	9049-9053	LUMI	_	_
38-25	9054-9056	at	_	_
38-26	9057-9060	CSC	_	_
38-27	9060-9061	,	_	_
38-28	9062-9069	Finland	_	_
38-29	9069-9070	.	_	_
38-30	9072-9073	!	_	_

#Text=\[\](visualizations/1odi\_3lpk.png)
39-1	9073-9074	\[	_	_
39-2	9074-9075	\]	_	_
39-3	9075-9076	(	_	_
39-4	9076-9090	visualizations	_	_
39-5	9090-9091	/	_	_
39-6	9091-9095	1odi	_	_
39-7	9095-9096	\_	_	_
39-8	9096-9104	3lpk.png	_	_
39-9	9104-9105	)	_	_