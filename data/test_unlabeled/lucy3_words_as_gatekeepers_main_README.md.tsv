#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=# Words as Gatekeepers  License: \[CC BY-NC 4.0\](https://creativecommons.org/licenses/by-nc/4.0/)  \*\*Authors\*\*: Li Lucy, Jesse Dodge, David Bamman, Katherine A.
1-1	0-1	#	_	_
1-2	2-7	Words	_	_
1-3	8-10	as	_	_
1-4	11-22	Gatekeepers	_	_
1-5	24-31	License	_	_
1-6	31-32	:	_	_
1-7	33-34	\[	_	_
1-8	34-36	CC	_	_
1-9	37-42	BY-NC	_	_
1-10	43-46	4.0	_	_
1-11	46-47	\]	_	_
1-12	47-48	(	_	_
1-13	48-53	https	_	_
1-14	53-54	:	_	_
1-15	54-55	/	_	_
1-16	55-56	/	_	_
1-17	56-75	creativecommons.org	_	_
1-18	75-76	/	_	_
1-19	76-84	licenses	_	_
1-20	84-85	/	_	_
1-21	85-90	by-nc	_	_
1-22	90-91	/	_	_
1-23	91-94	4.0	_	_
1-24	94-95	/	_	_
1-25	95-96	)	_	_
1-26	98-99	\*	_	_
1-27	99-100	\*	_	_
1-28	100-107	Authors	_	_
1-29	107-108	\*	_	_
1-30	108-109	\*	_	_
1-31	109-110	:	_	_
1-32	111-113	Li	_	_
1-33	114-118	Lucy	_	_
1-34	118-119	,	_	_
1-35	120-125	Jesse	_	_
1-36	126-131	Dodge	_	_
1-37	131-132	,	_	_
1-38	133-138	David	_	_
1-39	139-145	Bamman	_	_
1-40	145-146	,	_	_
1-41	147-156	Katherine	_	_
1-42	157-158	A	_	_
1-43	158-159	.	_	_

#Text=Keith  \*\*\[Paper\](https://arxiv.org/abs/2212.09676)\*\*, \*\*\[Blog post\](https://blog.allenai.org/words-as-gatekeepers-measuring-discipline-specific-terms-and-meanings-in-scholarly-publications-718dc56d08a5)\*\*  <p align="center"> <img src="image.png" width="75%" > </p>  \*\*Abstract\*\*: Scholarly text is often laden with jargon, or specialized language that can facilitate efficient in-group communication within fields but hinder understanding for out-groups.
2-1	160-165	Keith	_	_
2-2	167-168	\*	_	_
2-3	168-169	\*	_	_
2-4	169-170	\[	_	_
2-5	170-175	Paper	_	_
2-6	175-176	\]	_	_
2-7	176-177	(	_	_
2-8	177-182	https	_	_
2-9	182-183	:	_	_
2-10	183-184	/	_	_
2-11	184-185	/	_	_
2-12	185-194	arxiv.org	_	_
2-13	194-195	/	_	_
2-14	195-198	abs	_	_
2-15	198-199	/	_	_
2-16	199-209	2212.09676	_	_
2-17	209-210	)	_	_
2-18	210-211	\*	_	_
2-19	211-212	\*	_	_
2-20	212-213	,	_	_
2-21	214-215	\*	_	_
2-22	215-216	\*	_	_
2-23	216-217	\[	_	_
2-24	217-221	Blog	_	_
2-25	222-226	post	_	_
2-26	226-227	\]	_	_
2-27	227-228	(	_	_
2-28	228-233	https	_	_
2-29	233-234	:	_	_
2-30	234-235	/	_	_
2-31	235-236	/	_	_
2-32	236-252	blog.allenai.org	_	_
2-33	252-253	/	_	_
2-34	253-348	words-as-gatekeepers-measuring-discipline-specific-terms-and-meanings-in-scholarly-publications	_	_
2-35	348-349	-	_	_
2-36	349-361	718dc56d08a5	_	_
2-37	361-362	)	_	_
2-38	362-363	\*	_	_
2-39	363-364	\*	_	_
2-40	366-367	<	_	_
2-41	367-368	p	_	_
2-42	369-374	align	_	_
2-43	374-375	=	_	_
2-44	375-376	"	_	_
2-45	376-382	center	_	_
2-46	382-383	"	_	_
2-47	383-384	>	_	_
2-48	385-386	<	_	_
2-49	386-389	img	_	_
2-50	390-393	src	_	_
2-51	393-394	=	_	_
2-52	394-395	"	_	_
2-53	395-404	image.png	_	_
2-54	404-405	"	_	_
2-55	406-411	width	_	_
2-56	411-412	=	_	_
2-57	412-413	"	_	_
2-58	413-416	75%	_	_
2-59	416-417	"	_	_
2-60	418-419	>	_	_
2-61	420-421	<	_	_
2-62	421-422	/	_	_
2-63	422-423	p	_	_
2-64	423-424	>	_	_
2-65	426-427	\*	_	_
2-66	427-428	\*	_	_
2-67	428-436	Abstract	_	_
2-68	436-437	\*	_	_
2-69	437-438	\*	_	_
2-70	438-439	:	_	_
2-71	440-449	Scholarly	_	_
2-72	450-454	text	_	_
2-73	455-457	is	_	_
2-74	458-463	often	_	_
2-75	464-469	laden	_	_
2-76	470-474	with	_	_
2-77	475-481	jargon	_	_
2-78	481-482	,	_	_
2-79	483-485	or	_	_
2-80	486-497	specialized	_	_
2-81	498-506	language	_	_
2-82	507-511	that	_	_
2-83	512-515	can	_	_
2-84	516-526	facilitate	_	_
2-85	527-536	efficient	_	_
2-86	537-545	in-group	_	_
2-87	546-559	communication	_	_
2-88	560-566	within	_	_
2-89	567-573	fields	_	_
2-90	574-577	but	_	_
2-91	578-584	hinder	_	_
2-92	585-598	understanding	_	_
2-93	599-602	for	_	_
2-94	603-613	out-groups	_	_
2-95	613-614	.	_	_

#Text=In this work, we develop and validate an interpretable approach for measuring scholarly jargon from text.
3-1	615-617	In	_	_
3-2	618-622	this	_	_
3-3	623-627	work	_	_
3-4	627-628	,	_	_
3-5	629-631	we	_	_
3-6	632-639	develop	_	_
3-7	640-643	and	_	_
3-8	644-652	validate	_	_
3-9	653-655	an	_	_
3-10	656-669	interpretable	_	_
3-11	670-678	approach	_	_
3-12	679-682	for	_	_
3-13	683-692	measuring	_	_
3-14	693-702	scholarly	_	_
3-15	703-709	jargon	_	_
3-16	710-714	from	_	_
3-17	715-719	text	_	_
3-18	719-720	.	_	_

#Text=Expanding the scope of prior work which focuses on word types, we use word sense induction to also identify words that are widespread but overloaded with different meanings across fields.
4-1	721-730	Expanding	_	_
4-2	731-734	the	_	_
4-3	735-740	scope	_	_
4-4	741-743	of	_	_
4-5	744-749	prior	_	_
4-6	750-754	work	_	_
4-7	755-760	which	_	_
4-8	761-768	focuses	_	_
4-9	769-771	on	_	_
4-10	772-776	word	_	_
4-11	777-782	types	_	_
4-12	782-783	,	_	_
4-13	784-786	we	_	_
4-14	787-790	use	_	_
4-15	791-795	word	_	_
4-16	796-801	sense	_	_
4-17	802-811	induction	_	_
4-18	812-814	to	_	_
4-19	815-819	also	_	_
4-20	820-828	identify	_	_
4-21	829-834	words	_	_
4-22	835-839	that	_	_
4-23	840-843	are	_	_
4-24	844-854	widespread	_	_
4-25	855-858	but	_	_
4-26	859-869	overloaded	_	_
4-27	870-874	with	_	_
4-28	875-884	different	_	_
4-29	885-893	meanings	_	_
4-30	894-900	across	_	_
4-31	901-907	fields	_	_
4-32	907-908	.	_	_

#Text=We then estimate the prevalence of these discipline-specific words and senses across hundreds of subfields, and show that word senses provide a complementary, yet unique view of jargon alongside word types.
5-1	909-911	We	_	_
5-2	912-916	then	_	_
5-3	917-925	estimate	_	_
5-4	926-929	the	_	_
5-5	930-940	prevalence	_	_
5-6	941-943	of	_	_
5-7	944-949	these	_	_
5-8	950-969	discipline-specific	_	_
5-9	970-975	words	_	_
5-10	976-979	and	_	_
5-11	980-986	senses	_	_
5-12	987-993	across	_	_
5-13	994-1002	hundreds	_	_
5-14	1003-1005	of	_	_
5-15	1006-1015	subfields	_	_
5-16	1015-1016	,	_	_
5-17	1017-1020	and	_	_
5-18	1021-1025	show	_	_
5-19	1026-1030	that	_	_
5-20	1031-1035	word	_	_
5-21	1036-1042	senses	_	_
5-22	1043-1050	provide	_	_
5-23	1051-1052	a	_	_
5-24	1053-1066	complementary	_	_
5-25	1066-1067	,	_	_
5-26	1068-1071	yet	_	_
5-27	1072-1078	unique	_	_
5-28	1079-1083	view	_	_
5-29	1084-1086	of	_	_
5-30	1087-1093	jargon	_	_
5-31	1094-1103	alongside	_	_
5-32	1104-1108	word	_	_
5-33	1109-1114	types	_	_
5-34	1114-1115	.	_	_

#Text=We demonstrate the utility of our metrics for science of science and computational sociolinguistics by highlighting two key social implications.
6-1	1116-1118	We	_	_
6-2	1119-1130	demonstrate	_	_
6-3	1131-1134	the	_	_
6-4	1135-1142	utility	_	_
6-5	1143-1145	of	_	_
6-6	1146-1149	our	_	_
6-7	1150-1157	metrics	_	_
6-8	1158-1161	for	_	_
6-9	1162-1169	science	_	_
6-10	1170-1172	of	_	_
6-11	1173-1180	science	_	_
6-12	1181-1184	and	_	_
6-13	1185-1198	computational	_	_
6-14	1199-1215	sociolinguistics	_	_
6-15	1216-1218	by	_	_
6-16	1219-1231	highlighting	_	_
6-17	1232-1235	two	_	_
6-18	1236-1239	key	_	_
6-19	1240-1246	social	_	_
6-20	1247-1259	implications	_	_
6-21	1259-1260	.	_	_

#Text=First, though most fields reduce their use of jargon when writing for general-purpose venues, and some fields (e.g., biological sciences) do so less than others.
7-1	1261-1266	First	_	_
7-2	1266-1267	,	_	_
7-3	1268-1274	though	_	_
7-4	1275-1279	most	_	_
7-5	1280-1286	fields	_	_
7-6	1287-1293	reduce	_	_
7-7	1294-1299	their	_	_
7-8	1300-1303	use	_	_
7-9	1304-1306	of	_	_
7-10	1307-1313	jargon	_	_
7-11	1314-1318	when	_	_
7-12	1319-1326	writing	_	_
7-13	1327-1330	for	_	_
7-14	1331-1346	general-purpose	_	_
7-15	1347-1353	venues	_	_
7-16	1353-1354	,	_	_
7-17	1355-1358	and	_	_
7-18	1359-1363	some	_	_
7-19	1364-1370	fields	_	_
7-20	1371-1372	(	_	_
7-21	1372-1375	e.g	_	_
7-22	1375-1376	.	_	_
7-23	1376-1377	,	_	_
7-24	1378-1388	biological	_	_
7-25	1389-1397	sciences	_	_
7-26	1397-1398	)	_	_
7-27	1399-1401	do	_	_
7-28	1402-1404	so	_	_
7-29	1405-1409	less	_	_
7-30	1410-1414	than	_	_
7-31	1415-1421	others	_	_
7-32	1421-1422	.	_	_

#Text=Second, the direction of correlation between jargon and citation rates varies among fields, but jargon is nearly always negatively correlated with interdisciplinary impact.
8-1	1423-1429	Second	_	_
8-2	1429-1430	,	_	_
8-3	1431-1434	the	_	_
8-4	1435-1444	direction	_	_
8-5	1445-1447	of	_	_
8-6	1448-1459	correlation	_	_
8-7	1460-1467	between	_	_
8-8	1468-1474	jargon	_	_
8-9	1475-1478	and	_	_
8-10	1479-1487	citation	_	_
8-11	1488-1493	rates	_	_
8-12	1494-1500	varies	_	_
8-13	1501-1506	among	_	_
8-14	1507-1513	fields	_	_
8-15	1513-1514	,	_	_
8-16	1515-1518	but	_	_
8-17	1519-1525	jargon	_	_
8-18	1526-1528	is	_	_
8-19	1529-1535	nearly	_	_
8-20	1536-1542	always	_	_
8-21	1543-1553	negatively	_	_
8-22	1554-1564	correlated	_	_
8-23	1565-1569	with	_	_
8-24	1570-1587	interdisciplinary	_	_
8-25	1588-1594	impact	_	_
8-26	1594-1595	.	_	_

#Text=Broadly, our findings suggest that though multidisciplinary venues intend to cater to more general audiences, some fields' writing norms may act as barriers rather than bridges, and thus impede the dispersion of scholarly ideas.  ## Scholarly jargon  ### Discipline-specific word senses  - `logs/word\_clusters\_lemmed/0.0/` includes senses and their top predicted substitutes.
9-1	1596-1603	Broadly	_	_
9-2	1603-1604	,	_	_
9-3	1605-1608	our	_	_
9-4	1609-1617	findings	_	_
9-5	1618-1625	suggest	_	_
9-6	1626-1630	that	_	_
9-7	1631-1637	though	_	_
9-8	1638-1655	multidisciplinary	_	_
9-9	1656-1662	venues	_	_
9-10	1663-1669	intend	_	_
9-11	1670-1672	to	_	_
9-12	1673-1678	cater	_	_
9-13	1679-1681	to	_	_
9-14	1682-1686	more	_	_
9-15	1687-1694	general	_	_
9-16	1695-1704	audiences	_	_
9-17	1704-1705	,	_	_
9-18	1706-1710	some	_	_
9-19	1711-1717	fields	_	_
9-20	1717-1718	'	_	_
9-21	1719-1726	writing	_	_
9-22	1727-1732	norms	_	_
9-23	1733-1736	may	_	_
9-24	1737-1740	act	_	_
9-25	1741-1743	as	_	_
9-26	1744-1752	barriers	_	_
9-27	1753-1759	rather	_	_
9-28	1760-1764	than	_	_
9-29	1765-1772	bridges	_	_
9-30	1772-1773	,	_	_
9-31	1774-1777	and	_	_
9-32	1778-1782	thus	_	_
9-33	1783-1789	impede	_	_
9-34	1790-1793	the	_	_
9-35	1794-1804	dispersion	_	_
9-36	1805-1807	of	_	_
9-37	1808-1817	scholarly	_	_
9-38	1818-1823	ideas	_	_
9-39	1823-1824	.	_	_
9-40	1826-1827	#	_	_
9-41	1827-1828	#	_	_
9-42	1829-1838	Scholarly	_	_
9-43	1839-1845	jargon	_	_
9-44	1847-1848	#	_	_
9-45	1848-1849	#	_	_
9-46	1849-1850	#	_	_
9-47	1851-1870	Discipline-specific	_	_
9-48	1871-1875	word	_	_
9-49	1876-1882	senses	_	_
9-50	1884-1885	-	_	_
9-51	1886-1887	`	_	_
9-52	1887-1891	logs	_	_
9-53	1891-1892	/	_	_
9-54	1892-1912	word\_clusters\_lemmed	_	_
9-55	1912-1913	/	_	_
9-56	1913-1916	0.0	_	_
9-57	1916-1917	/	_	_
9-58	1917-1918	`	_	_
9-59	1919-1927	includes	_	_
9-60	1928-1934	senses	_	_
9-61	1935-1938	and	_	_
9-62	1939-1944	their	_	_
9-63	1945-1948	top	_	_
9-64	1949-1958	predicted	_	_
9-65	1959-1970	substitutes	_	_
9-66	1970-1971	.	_	_

#Text=Use the `Word Cluster Analysis` notebook in the code folder to inspect the content of these files
10-1	1972-1975	Use	_	_
10-2	1976-1979	the	_	_
10-3	1980-1981	`	_	_
10-4	1981-1985	Word	_	_
10-5	1986-1993	Cluster	_	_
10-6	1994-2002	Analysis	_	_
10-7	2002-2003	`	_	_
10-8	2004-2012	notebook	_	_
10-9	2013-2015	in	_	_
10-10	2016-2019	the	_	_
10-11	2020-2024	code	_	_
10-12	2025-2031	folder	_	_
10-13	2032-2034	to	_	_
10-14	2035-2042	inspect	_	_
10-15	2043-2046	the	_	_
10-16	2047-2054	content	_	_
10-17	2055-2057	of	_	_
10-18	2058-2063	these	_	_
10-19	2064-2069	files	_	_

#Text=.
11-1	2069-2070	.	_	_

#Text=- `logs/fos\_senses/es-True\_res-0.0/` includes senses and their npmi scores in each field  ### Discipline-specific word types   - `logs/type\_npmi/fos\_set-False\_lemma-True/` includes lists of word types in each subfield and their npmi scores  ## Code pipeline  \*\*Data filtering\*\*  Information on accessing S2ORC can be found \[here\](https://github.com/allenai/s2orc)
12-1	2072-2073	-	_	_
12-2	2074-2075	`	_	_
12-3	2075-2079	logs	_	_
12-4	2079-2080	/	_	_
12-5	2080-2090	fos\_senses	_	_
12-6	2090-2091	/	_	_
12-7	2091-2102	es-True\_res	_	_
12-8	2102-2103	-	_	_
12-9	2103-2106	0.0	_	_
12-10	2106-2107	/	_	_
12-11	2107-2108	`	_	_
12-12	2109-2117	includes	_	_
12-13	2118-2124	senses	_	_
12-14	2125-2128	and	_	_
12-15	2129-2134	their	_	_
12-16	2135-2139	npmi	_	_
12-17	2140-2146	scores	_	_
12-18	2147-2149	in	_	_
12-19	2150-2154	each	_	_
12-20	2155-2160	field	_	_
12-21	2162-2163	#	_	_
12-22	2163-2164	#	_	_
12-23	2164-2165	#	_	_
12-24	2166-2185	Discipline-specific	_	_
12-25	2186-2190	word	_	_
12-26	2191-2196	types	_	_
12-27	2199-2200	-	_	_
12-28	2201-2202	`	_	_
12-29	2202-2206	logs	_	_
12-30	2206-2207	/	_	_
12-31	2207-2216	type\_npmi	_	_
12-32	2216-2217	/	_	_
12-33	2217-2241	fos\_set-False\_lemma-True	_	_
12-34	2241-2242	/	_	_
12-35	2242-2243	`	_	_
12-36	2244-2252	includes	_	_
12-37	2253-2258	lists	_	_
12-38	2259-2261	of	_	_
12-39	2262-2266	word	_	_
12-40	2267-2272	types	_	_
12-41	2273-2275	in	_	_
12-42	2276-2280	each	_	_
12-43	2281-2289	subfield	_	_
12-44	2290-2293	and	_	_
12-45	2294-2299	their	_	_
12-46	2300-2304	npmi	_	_
12-47	2305-2311	scores	_	_
12-48	2313-2314	#	_	_
12-49	2314-2315	#	_	_
12-50	2316-2320	Code	_	_
12-51	2321-2329	pipeline	_	_
12-52	2331-2332	\*	_	_
12-53	2332-2333	\*	_	_
12-54	2333-2337	Data	_	_
12-55	2338-2347	filtering	_	_
12-56	2347-2348	\*	_	_
12-57	2348-2349	\*	_	_
12-58	2351-2362	Information	_	_
12-59	2363-2365	on	_	_
12-60	2366-2375	accessing	_	_
12-61	2376-2381	S2ORC	_	_
12-62	2382-2385	can	_	_
12-63	2386-2388	be	_	_
12-64	2389-2394	found	_	_
12-65	2395-2396	\[	_	_
12-66	2396-2400	here	_	_
12-67	2400-2401	\]	_	_
12-68	2401-2402	(	_	_
12-69	2402-2407	https	_	_
12-70	2407-2408	:	_	_
12-71	2408-2409	/	_	_
12-72	2409-2410	/	_	_
12-73	2410-2420	github.com	_	_
12-74	2420-2421	/	_	_
12-75	2421-2428	allenai	_	_
12-76	2428-2429	/	_	_
12-77	2429-2434	s2orc	_	_
12-78	2434-2435	)	_	_

#Text=.
13-1	2435-2436	.	_	_

#Text=- `data\_process/clean\_up\_wikipedia.py`: sample a subset of Wikipedia  - `create\_mag\_mapping()` in `val\_data\_process/fos\_analysis.py`: get all MAG IDs to fos
14-1	2439-2440	-	_	_
14-2	2441-2442	`	_	_
14-3	2442-2454	data\_process	_	_
14-4	2454-2455	/	_	_
14-5	2455-2476	clean\_up\_wikipedia.py	_	_
14-6	2476-2477	`	_	_
14-7	2477-2478	:	_	_
14-8	2479-2485	sample	_	_
14-9	2486-2487	a	_	_
14-10	2488-2494	subset	_	_
14-11	2495-2497	of	_	_
14-12	2498-2507	Wikipedia	_	_
14-13	2509-2510	-	_	_
14-14	2511-2512	`	_	_
14-15	2512-2530	create\_mag\_mapping	_	_
14-16	2530-2531	(	_	_
14-17	2531-2532	)	_	_
14-18	2532-2533	`	_	_
14-19	2534-2536	in	_	_
14-20	2537-2538	`	_	_
14-21	2538-2554	val\_data\_process	_	_
14-22	2554-2555	/	_	_
14-23	2555-2570	fos\_analysis.py	_	_
14-24	2570-2571	`	_	_
14-25	2571-2572	:	_	_
14-26	2573-2576	get	_	_
14-27	2577-2580	all	_	_
14-28	2581-2584	MAG	_	_
14-29	2585-2588	IDs	_	_
14-30	2589-2591	to	_	_
14-31	2592-2595	fos	_	_

#Text=.
15-1	2595-2596	.	_	_

#Text=- `langid.py` and `language\_id\_helper.py`: detect non-English journals for removal - `data\_preprocessing.py`: determine how many abstracts we have per journal, also outputs dataframe of paper IDs to journal and FOS to support dataset creation - `General Dataset Statistics.ipynb`: examine the distribution of journal counts, save lists of paper IDs to keep for journal and FOS analysis.
16-1	2598-2599	-	_	_
16-2	2600-2601	`	_	_
16-3	2601-2610	langid.py	_	_
16-4	2610-2611	`	_	_
16-5	2612-2615	and	_	_
16-6	2616-2617	`	_	_
16-7	2617-2638	language\_id\_helper.py	_	_
16-8	2638-2639	`	_	_
16-9	2639-2640	:	_	_
16-10	2641-2647	detect	_	_
16-11	2648-2659	non-English	_	_
16-12	2660-2668	journals	_	_
16-13	2669-2672	for	_	_
16-14	2673-2680	removal	_	_
16-15	2681-2682	-	_	_
16-16	2683-2684	`	_	_
16-17	2684-2705	data\_preprocessing.py	_	_
16-18	2705-2706	`	_	_
16-19	2706-2707	:	_	_
16-20	2708-2717	determine	_	_
16-21	2718-2721	how	_	_
16-22	2722-2726	many	_	_
16-23	2727-2736	abstracts	_	_
16-24	2737-2739	we	_	_
16-25	2740-2744	have	_	_
16-26	2745-2748	per	_	_
16-27	2749-2756	journal	_	_
16-28	2756-2757	,	_	_
16-29	2758-2762	also	_	_
16-30	2763-2770	outputs	_	_
16-31	2771-2780	dataframe	_	_
16-32	2781-2783	of	_	_
16-33	2784-2789	paper	_	_
16-34	2790-2793	IDs	_	_
16-35	2794-2796	to	_	_
16-36	2797-2804	journal	_	_
16-37	2805-2808	and	_	_
16-38	2809-2812	FOS	_	_
16-39	2813-2815	to	_	_
16-40	2816-2823	support	_	_
16-41	2824-2831	dataset	_	_
16-42	2832-2840	creation	_	_
16-43	2841-2842	-	_	_
16-44	2843-2844	`	_	_
16-45	2844-2851	General	_	_
16-46	2852-2859	Dataset	_	_
16-47	2860-2876	Statistics.ipynb	_	_
16-48	2876-2877	`	_	_
16-49	2877-2878	:	_	_
16-50	2879-2886	examine	_	_
16-51	2887-2890	the	_	_
16-52	2891-2903	distribution	_	_
16-53	2904-2906	of	_	_
16-54	2907-2914	journal	_	_
16-55	2915-2921	counts	_	_
16-56	2921-2922	,	_	_
16-57	2923-2927	save	_	_
16-58	2928-2933	lists	_	_
16-59	2934-2936	of	_	_
16-60	2937-2942	paper	_	_
16-61	2943-2946	IDs	_	_
16-62	2947-2949	to	_	_
16-63	2950-2954	keep	_	_
16-64	2955-2958	for	_	_
16-65	2959-2966	journal	_	_
16-66	2967-2970	and	_	_
16-67	2971-2974	FOS	_	_
16-68	2975-2983	analysis	_	_
16-69	2983-2984	.	_	_

#Text=This generates `s2orc\_fos.json`  \*\*Word type pipeline\*\*  In the `type\_jargon` folder:   FOS - `word\_counts\_per\_fos.py`: count words per field of study.
17-1	2985-2989	This	_	_
17-2	2990-2999	generates	_	_
17-3	3000-3001	`	_	_
17-4	3001-3015	s2orc\_fos.json	_	_
17-4	3001-3006	s2orc	_	_
17-5	3015-3016	`	_	_
17-6	3018-3019	\*	_	_
17-7	3019-3020	\*	_	_
17-8	3020-3024	Word	_	_
17-9	3025-3029	type	_	_
17-10	3030-3038	pipeline	_	_
17-11	3038-3039	\*	_	_
17-12	3039-3040	\*	_	_
17-13	3042-3044	In	_	_
17-14	3045-3048	the	_	_
17-15	3049-3050	`	_	_
17-16	3050-3061	type\_jargon	_	_
17-17	3061-3062	`	_	_
17-18	3063-3069	folder	_	_
17-19	3069-3070	:	_	_
17-20	3073-3076	FOS	_	_
17-21	3077-3078	-	_	_
17-22	3079-3080	`	_	_
17-23	3080-3102	word\_counts\_per\_fos.py	_	_
17-24	3102-3103	`	_	_
17-25	3103-3104	:	_	_
17-26	3105-3110	count	_	_
17-27	3111-3116	words	_	_
17-28	3117-3120	per	_	_
17-29	3121-3126	field	_	_
17-30	3127-3129	of	_	_
17-31	3130-3135	study	_	_
17-32	3135-3136	.	_	_

#Text=Wikipedia - `word\_counts\_wikipedia.py`: count words in simple and regular Wikipedia samples  Vocab to lemmatize - `write\_mask\_preds/wsi\_vocab.py`: vocab creation  Journals & FOS - `word\_type.py`: calculate NPMI  \*\*WSI pipeline\*\*  There are some additional supporting scripts, but these are the main ones to run.
18-1	3139-3148	Wikipedia	_	_
18-2	3149-3150	-	_	_
18-3	3151-3152	`	_	_
18-4	3152-3176	word\_counts\_wikipedia.py	_	_
18-5	3176-3177	`	_	_
18-6	3177-3178	:	_	_
18-7	3179-3184	count	_	_
18-8	3185-3190	words	_	_
18-9	3191-3193	in	_	_
18-10	3194-3200	simple	_	_
18-11	3201-3204	and	_	_
18-12	3205-3212	regular	_	_
18-13	3213-3222	Wikipedia	_	_
18-14	3223-3230	samples	_	_
18-15	3232-3237	Vocab	_	_
18-16	3238-3240	to	_	_
18-17	3241-3250	lemmatize	_	_
18-18	3251-3252	-	_	_
18-19	3253-3254	`	_	_
18-20	3254-3270	write\_mask\_preds	_	_
18-21	3270-3271	/	_	_
18-22	3271-3283	wsi\_vocab.py	_	_
18-23	3283-3284	`	_	_
18-24	3284-3285	:	_	_
18-25	3286-3291	vocab	_	_
18-26	3292-3300	creation	_	_
18-27	3302-3310	Journals	_	_
18-28	3311-3312	&	_	_
18-29	3313-3316	FOS	_	_
18-30	3317-3318	-	_	_
18-31	3319-3320	`	_	_
18-32	3320-3332	word\_type.py	_	_
18-33	3332-3333	`	_	_
18-34	3333-3334	:	_	_
18-35	3335-3344	calculate	_	_
18-36	3345-3349	NPMI	_	_
18-37	3351-3352	\*	_	_
18-38	3352-3353	\*	_	_
18-39	3353-3356	WSI	_	_
18-40	3357-3365	pipeline	_	_
18-41	3365-3366	\*	_	_
18-42	3366-3367	\*	_	_
18-43	3369-3374	There	_	_
18-44	3375-3378	are	_	_
18-45	3379-3383	some	_	_
18-46	3384-3394	additional	_	_
18-47	3395-3405	supporting	_	_
18-48	3406-3413	scripts	_	_
18-49	3413-3414	,	_	_
18-50	3415-3418	but	_	_
18-51	3419-3424	these	_	_
18-52	3425-3428	are	_	_
18-53	3429-3432	the	_	_
18-54	3433-3437	main	_	_
18-55	3438-3442	ones	_	_
18-56	3443-3445	to	_	_
18-57	3446-3449	run	_	_
18-58	3449-3450	.	_	_

#Text=Note that many scripts are modified versions of ones found in the \[WSIatScale repo\](https://github.com/allenai/WSIatScale).
19-1	3451-3455	Note	_	_
19-2	3456-3460	that	_	_
19-3	3461-3465	many	_	_
19-4	3466-3473	scripts	_	_
19-5	3474-3477	are	_	_
19-6	3478-3486	modified	_	_
19-7	3487-3495	versions	_	_
19-8	3496-3498	of	_	_
19-9	3499-3503	ones	_	_
19-10	3504-3509	found	_	_
19-11	3510-3512	in	_	_
19-12	3513-3516	the	_	_
19-13	3517-3518	\[	_	_
19-14	3518-3528	WSIatScale	_	_
19-15	3529-3533	repo	_	_
19-16	3533-3534	\]	_	_
19-17	3534-3535	(	_	_
19-18	3535-3540	https	_	_
19-19	3540-3541	:	_	_
19-20	3541-3542	/	_	_
19-21	3542-3543	/	_	_
19-22	3543-3553	github.com	_	_
19-23	3553-3554	/	_	_
19-24	3554-3561	allenai	_	_
19-25	3561-3562	/	_	_
19-26	3562-3572	WSIatScale	_	_
19-27	3572-3573	)	_	_
19-28	3573-3574	.	_	_

#Text=Run `bash prepare\_sense\_input.sh 2>&1 \| tee temp.log` to do the next three scripts:   - `write\_mask\_preds/wsi\_vocab.py`: determine vocabulary of words to perform WSI - `val\_data\_process/process\_wiktionary.py`: get wiktionary definitions for vocabulary words - `write\_mask\_preds/wsi\_preprocessing.py`: input preparation, also copy vocab file into output folder  Then, run the following script on S2ORC and Wikipedia:   - `write\_mask\_preds/write\_mask\_preds.py`: write replacements   We recommend splitting input files into numbered parts and running the script on ranges of file numbers.
20-1	3577-3580	Run	_	_
20-2	3581-3582	`	_	_
20-3	3582-3586	bash	_	_
20-4	3587-3609	prepare\_sense\_input.sh	_	_
20-5	3610-3611	2	_	_
20-6	3611-3612	>	_	_
20-7	3612-3613	&	_	_
20-8	3613-3614	1	_	_
20-9	3615-3616	\|	_	_
20-10	3617-3620	tee	_	_
20-11	3621-3629	temp.log	_	_
20-12	3629-3630	`	_	_
20-13	3631-3633	to	_	_
20-14	3634-3636	do	_	_
20-15	3637-3640	the	_	_
20-16	3641-3645	next	_	_
20-17	3646-3651	three	_	_
20-18	3652-3659	scripts	_	_
20-19	3659-3660	:	_	_
20-20	3663-3664	-	_	_
20-21	3665-3666	`	_	_
20-22	3666-3682	write\_mask\_preds	_	_
20-23	3682-3683	/	_	_
20-24	3683-3695	wsi\_vocab.py	_	_
20-25	3695-3696	`	_	_
20-26	3696-3697	:	_	_
20-27	3698-3707	determine	_	_
20-28	3708-3718	vocabulary	_	_
20-29	3719-3721	of	_	_
20-30	3722-3727	words	_	_
20-31	3728-3730	to	_	_
20-32	3731-3738	perform	_	_
20-33	3739-3742	WSI	_	_
20-34	3743-3744	-	_	_
20-35	3745-3746	`	_	_
20-36	3746-3762	val\_data\_process	_	_
20-37	3762-3763	/	_	_
20-38	3763-3784	process\_wiktionary.py	_	_
20-39	3784-3785	`	_	_
20-40	3785-3786	:	_	_
20-41	3787-3790	get	_	_
20-42	3791-3801	wiktionary	_	_
20-43	3802-3813	definitions	_	_
20-44	3814-3817	for	_	_
20-45	3818-3828	vocabulary	_	_
20-46	3829-3834	words	_	_
20-47	3835-3836	-	_	_
20-48	3837-3838	`	_	_
20-49	3838-3854	write\_mask\_preds	_	_
20-50	3854-3855	/	_	_
20-51	3855-3875	wsi\_preprocessing.py	_	_
20-52	3875-3876	`	_	_
20-53	3876-3877	:	_	_
20-54	3878-3883	input	_	_
20-55	3884-3895	preparation	_	_
20-56	3895-3896	,	_	_
20-57	3897-3901	also	_	_
20-58	3902-3906	copy	_	_
20-59	3907-3912	vocab	_	_
20-60	3913-3917	file	_	_
20-61	3918-3922	into	_	_
20-62	3923-3929	output	_	_
20-63	3930-3936	folder	_	_
20-64	3938-3942	Then	_	_
20-65	3942-3943	,	_	_
20-66	3944-3947	run	_	_
20-67	3948-3951	the	_	_
20-68	3952-3961	following	_	_
20-69	3962-3968	script	_	_
20-70	3969-3971	on	_	_
20-71	3972-3977	S2ORC	_	_
20-72	3978-3981	and	_	_
20-73	3982-3991	Wikipedia	_	_
20-74	3991-3992	:	_	_
20-75	3995-3996	-	_	_
20-76	3997-3998	`	_	_
20-77	3998-4014	write\_mask\_preds	_	_
20-78	4014-4015	/	_	_
20-79	4015-4034	write\_mask\_preds.py	_	_
20-80	4034-4035	`	_	_
20-81	4035-4036	:	_	_
20-82	4037-4042	write	_	_
20-83	4043-4055	replacements	_	_
20-84	4058-4060	We	_	_
20-85	4061-4070	recommend	_	_
20-86	4071-4080	splitting	_	_
20-87	4081-4086	input	_	_
20-88	4087-4092	files	_	_
20-89	4093-4097	into	_	_
20-90	4098-4106	numbered	_	_
20-91	4107-4112	parts	_	_
20-92	4113-4116	and	_	_
20-93	4117-4124	running	_	_
20-94	4125-4128	the	_	_
20-95	4129-4135	script	_	_
20-96	4136-4138	on	_	_
20-97	4139-4145	ranges	_	_
20-98	4146-4148	of	_	_
20-99	4149-4153	file	_	_
20-100	4154-4161	numbers	_	_
20-101	4161-4162	.	_	_

#Text=Usage example for S2ORC:  ``` python write\_mask\_preds.py --data\_dir /data/actual\_data --out\_dir /output --dataset s2orc --model scholarBERT --max\_tokens\_per\_batch 16384 --write\_specific\_replacements --vocab\_path /data/wsi\_vocab\_set\_98\_50.txt --overwrite\_cache --files\_range 0-24 ```  Usage example for Wikipedia:  ``` python write\_mask\_preds.py --data\_dir /data/actual\_data --out\_dir /output --dataset wikipedia --model scholarBERT --max\_tokens\_per\_batch 16384 --write\_specific\_replacements --vocab\_path /data/wsi\_vocab\_set\_98\_50.txt --overwrite\_cache --files\_range 0-24 ```  In the `WSIatScale` folder run `wsi\_pipeline.sh` to do WSI pipeline for the entire vocab.
21-1	4163-4168	Usage	_	_
21-2	4169-4176	example	_	_
21-3	4177-4180	for	_	_
21-4	4181-4186	S2ORC	_	_
21-5	4186-4187	:	_	_
21-6	4189-4190	`	_	_
21-7	4190-4191	`	_	_
21-8	4191-4192	`	_	_
21-9	4193-4199	python	_	_
21-10	4200-4219	write\_mask\_preds.py	_	_
21-11	4220-4221	-	_	_
21-12	4221-4222	-	_	_
21-13	4222-4230	data\_dir	_	_
21-14	4231-4232	/	_	_
21-15	4232-4236	data	_	_
21-16	4236-4237	/	_	_
21-17	4237-4248	actual\_data	_	_
21-18	4249-4250	-	_	_
21-19	4250-4251	-	_	_
21-20	4251-4258	out\_dir	_	_
21-21	4259-4260	/	_	_
21-22	4260-4266	output	_	_
21-23	4267-4268	-	_	_
21-24	4268-4269	-	_	_
21-25	4269-4276	dataset	_	_
21-26	4277-4282	s2orc	_	_
21-27	4283-4284	-	_	_
21-28	4284-4285	-	_	_
21-29	4285-4290	model	_	_
21-30	4291-4302	scholarBERT	_	_
21-31	4303-4304	-	_	_
21-32	4304-4305	-	_	_
21-33	4305-4325	max\_tokens\_per\_batch	_	_
21-34	4326-4331	16384	_	_
21-35	4332-4333	-	_	_
21-36	4333-4334	-	_	_
21-37	4334-4361	write\_specific\_replacements	_	_
21-38	4362-4363	-	_	_
21-39	4363-4364	-	_	_
21-40	4364-4374	vocab\_path	_	_
21-41	4375-4376	/	_	_
21-42	4376-4380	data	_	_
21-43	4380-4381	/	_	_
21-44	4381-4394	wsi\_vocab\_set	_	_
21-45	4394-4395	\_	_	_
21-46	4395-4397	98	_	_
21-47	4397-4398	\_	_	_
21-48	4398-4400	50	_	_
21-49	4400-4401	.	_	_
21-50	4401-4404	txt	_	_
21-51	4405-4406	-	_	_
21-52	4406-4407	-	_	_
21-53	4407-4422	overwrite\_cache	_	_
21-54	4423-4424	-	_	_
21-55	4424-4425	-	_	_
21-56	4425-4436	files\_range	_	_
21-57	4437-4438	0	_	_
21-58	4438-4439	-	_	_
21-59	4439-4441	24	_	_
21-60	4442-4443	`	_	_
21-61	4443-4444	`	_	_
21-62	4444-4445	`	_	_
21-63	4447-4452	Usage	_	_
21-64	4453-4460	example	_	_
21-65	4461-4464	for	_	_
21-66	4465-4474	Wikipedia	_	_
21-67	4474-4475	:	_	_
21-68	4477-4478	`	_	_
21-69	4478-4479	`	_	_
21-70	4479-4480	`	_	_
21-71	4481-4487	python	_	_
21-72	4488-4507	write\_mask\_preds.py	_	_
21-73	4508-4509	-	_	_
21-74	4509-4510	-	_	_
21-75	4510-4518	data\_dir	_	_
21-76	4519-4520	/	_	_
21-77	4520-4524	data	_	_
21-78	4524-4525	/	_	_
21-79	4525-4536	actual\_data	_	_
21-80	4537-4538	-	_	_
21-81	4538-4539	-	_	_
21-82	4539-4546	out\_dir	_	_
21-83	4547-4548	/	_	_
21-84	4548-4554	output	_	_
21-85	4555-4556	-	_	_
21-86	4556-4557	-	_	_
21-87	4557-4564	dataset	_	_
21-88	4565-4574	wikipedia	_	_
21-89	4575-4576	-	_	_
21-90	4576-4577	-	_	_
21-91	4577-4582	model	_	_
21-92	4583-4594	scholarBERT	_	_
21-93	4595-4596	-	_	_
21-94	4596-4597	-	_	_
21-95	4597-4617	max\_tokens\_per\_batch	_	_
21-96	4618-4623	16384	_	_
21-97	4624-4625	-	_	_
21-98	4625-4626	-	_	_
21-99	4626-4653	write\_specific\_replacements	_	_
21-100	4654-4655	-	_	_
21-101	4655-4656	-	_	_
21-102	4656-4666	vocab\_path	_	_
21-103	4667-4668	/	_	_
21-104	4668-4672	data	_	_
21-105	4672-4673	/	_	_
21-106	4673-4686	wsi\_vocab\_set	_	_
21-107	4686-4687	\_	_	_
21-108	4687-4689	98	_	_
21-109	4689-4690	\_	_	_
21-110	4690-4692	50	_	_
21-111	4692-4693	.	_	_
21-112	4693-4696	txt	_	_
21-113	4697-4698	-	_	_
21-114	4698-4699	-	_	_
21-115	4699-4714	overwrite\_cache	_	_
21-116	4715-4716	-	_	_
21-117	4716-4717	-	_	_
21-118	4717-4728	files\_range	_	_
21-119	4729-4730	0	_	_
21-120	4730-4731	-	_	_
21-121	4731-4733	24	_	_
21-122	4734-4735	`	_	_
21-123	4735-4736	`	_	_
21-124	4736-4737	`	_	_
21-125	4739-4741	In	_	_
21-126	4742-4745	the	_	_
21-127	4746-4747	`	_	_
21-128	4747-4757	WSIatScale	_	_
21-129	4757-4758	`	_	_
21-130	4759-4765	folder	_	_
21-131	4766-4769	run	_	_
21-132	4770-4771	`	_	_
21-133	4771-4786	wsi\_pipeline.sh	_	_
21-134	4786-4787	`	_	_
21-135	4788-4790	to	_	_
21-136	4791-4793	do	_	_
21-137	4794-4797	WSI	_	_
21-138	4798-4806	pipeline	_	_
21-139	4807-4810	for	_	_
21-140	4811-4814	the	_	_
21-141	4815-4821	entire	_	_
21-142	4822-4827	vocab	_	_
21-143	4827-4828	.	_	_

#Text=You should change the file paths to redirect to yours, rather than the placeholders I included
22-1	4829-4832	You	_	_
22-2	4833-4839	should	_	_
22-3	4840-4846	change	_	_
22-4	4847-4850	the	_	_
22-5	4851-4855	file	_	_
22-6	4856-4861	paths	_	_
22-7	4862-4864	to	_	_
22-8	4865-4873	redirect	_	_
22-9	4874-4876	to	_	_
22-10	4877-4882	yours	_	_
22-11	4882-4883	,	_	_
22-12	4884-4890	rather	_	_
22-13	4891-4895	than	_	_
22-14	4896-4899	the	_	_
22-15	4900-4912	placeholders	_	_
22-16	4913-4914	I	_	_
22-17	4915-4923	included	_	_

#Text=.
23-1	4923-4924	.	_	_

#Text=- `create\_inverted\_index.py`: create inverted index  ``` python create\_inverted\_index.py --replacements\_dir /home/lucyl/language-map-of-science/logs/replacements/replacements --dataset s2orc --vocab\_path /home/lucyl/language-map-of-science/logs/sense\_vocab/wsi\_vocab\_set\_98\_50.txt --outdir /home/lucyl/language-map-of-science/logs/inverted\_index --input\_ids\_path /home/lucyl/language-map-of-science/data/input\_paper\_ids/journal\_analysis.txt ```  - `cluster\_reps\_per\_token.py`: cluster the reps  Lemmatized, specifying resolution:   ``` python cluster\_reps\_per\_token.py --data\_dir /home/lucyl/language-map-of-science/logs/replacements/replacements --dataset s2orc --index\_dir /home/lucyl/language-map-of-science/logs/inverted\_index --out\_dir /home/lucyl/language-map-of-science/logs/word\_clusters\_lemmed --lemmatize True --resolution 0.0 ```  After clustering for the whole dataset, use `Wiktionary Validation.ipynb` notebook to get FOS to words json.
24-1	4928-4929	-	_	_
24-2	4930-4931	`	_	_
24-3	4931-4955	create\_inverted\_index.py	_	_
24-4	4955-4956	`	_	_
24-5	4956-4957	:	_	_
24-6	4958-4964	create	_	_
24-7	4965-4973	inverted	_	_
24-8	4974-4979	index	_	_
24-9	4981-4982	`	_	_
24-10	4982-4983	`	_	_
24-11	4983-4984	`	_	_
24-12	4985-4991	python	_	_
24-13	4992-5016	create\_inverted\_index.py	_	_
24-14	5017-5018	-	_	_
24-15	5018-5019	-	_	_
24-16	5019-5035	replacements\_dir	_	_
24-17	5036-5037	/	_	_
24-18	5037-5041	home	_	_
24-19	5041-5042	/	_	_
24-20	5042-5047	lucyl	_	_
24-21	5047-5048	/	_	_
24-22	5048-5071	language-map-of-science	_	_
24-23	5071-5072	/	_	_
24-24	5072-5076	logs	_	_
24-25	5076-5077	/	_	_
24-26	5077-5089	replacements	_	_
24-27	5089-5090	/	_	_
24-28	5090-5102	replacements	_	_
24-29	5103-5104	-	_	_
24-30	5104-5105	-	_	_
24-31	5105-5112	dataset	_	_
24-32	5113-5118	s2orc	_	_
24-33	5119-5120	-	_	_
24-34	5120-5121	-	_	_
24-35	5121-5131	vocab\_path	_	_
24-36	5132-5133	/	_	_
24-37	5133-5137	home	_	_
24-38	5137-5138	/	_	_
24-39	5138-5143	lucyl	_	_
24-40	5143-5144	/	_	_
24-41	5144-5167	language-map-of-science	_	_
24-42	5167-5168	/	_	_
24-43	5168-5172	logs	_	_
24-44	5172-5173	/	_	_
24-45	5173-5184	sense\_vocab	_	_
24-46	5184-5185	/	_	_
24-47	5185-5198	wsi\_vocab\_set	_	_
24-48	5198-5199	\_	_	_
24-49	5199-5201	98	_	_
24-50	5201-5202	\_	_	_
24-51	5202-5204	50	_	_
24-52	5204-5205	.	_	_
24-53	5205-5208	txt	_	_
24-54	5209-5210	-	_	_
24-55	5210-5211	-	_	_
24-56	5211-5217	outdir	_	_
24-57	5218-5219	/	_	_
24-58	5219-5223	home	_	_
24-59	5223-5224	/	_	_
24-60	5224-5229	lucyl	_	_
24-61	5229-5230	/	_	_
24-62	5230-5253	language-map-of-science	_	_
24-63	5253-5254	/	_	_
24-64	5254-5258	logs	_	_
24-65	5258-5259	/	_	_
24-66	5259-5273	inverted\_index	_	_
24-67	5274-5275	-	_	_
24-68	5275-5276	-	_	_
24-69	5276-5290	input\_ids\_path	_	_
24-70	5291-5292	/	_	_
24-71	5292-5296	home	_	_
24-72	5296-5297	/	_	_
24-73	5297-5302	lucyl	_	_
24-74	5302-5303	/	_	_
24-75	5303-5326	language-map-of-science	_	_
24-76	5326-5327	/	_	_
24-77	5327-5331	data	_	_
24-78	5331-5332	/	_	_
24-79	5332-5347	input\_paper\_ids	_	_
24-80	5347-5348	/	_	_
24-81	5348-5368	journal\_analysis.txt	_	_
24-82	5369-5370	`	_	_
24-83	5370-5371	`	_	_
24-84	5371-5372	`	_	_
24-85	5374-5375	-	_	_
24-86	5376-5377	`	_	_
24-87	5377-5402	cluster\_reps\_per\_token.py	_	_
24-88	5402-5403	`	_	_
24-89	5403-5404	:	_	_
24-90	5405-5412	cluster	_	_
24-91	5413-5416	the	_	_
24-92	5417-5421	reps	_	_
24-93	5423-5433	Lemmatized	_	_
24-94	5433-5434	,	_	_
24-95	5435-5445	specifying	_	_
24-96	5446-5456	resolution	_	_
24-97	5456-5457	:	_	_
24-98	5460-5461	`	_	_
24-99	5461-5462	`	_	_
24-100	5462-5463	`	_	_
24-101	5464-5470	python	_	_
24-102	5471-5496	cluster\_reps\_per\_token.py	_	_
24-103	5497-5498	-	_	_
24-104	5498-5499	-	_	_
24-105	5499-5507	data\_dir	_	_
24-106	5508-5509	/	_	_
24-107	5509-5513	home	_	_
24-108	5513-5514	/	_	_
24-109	5514-5519	lucyl	_	_
24-110	5519-5520	/	_	_
24-111	5520-5543	language-map-of-science	_	_
24-112	5543-5544	/	_	_
24-113	5544-5548	logs	_	_
24-114	5548-5549	/	_	_
24-115	5549-5561	replacements	_	_
24-116	5561-5562	/	_	_
24-117	5562-5574	replacements	_	_
24-118	5575-5576	-	_	_
24-119	5576-5577	-	_	_
24-120	5577-5584	dataset	_	_
24-121	5585-5590	s2orc	_	_
24-122	5591-5592	-	_	_
24-123	5592-5593	-	_	_
24-124	5593-5602	index\_dir	_	_
24-125	5603-5604	/	_	_
24-126	5604-5608	home	_	_
24-127	5608-5609	/	_	_
24-128	5609-5614	lucyl	_	_
24-129	5614-5615	/	_	_
24-130	5615-5638	language-map-of-science	_	_
24-131	5638-5639	/	_	_
24-132	5639-5643	logs	_	_
24-133	5643-5644	/	_	_
24-134	5644-5658	inverted\_index	_	_
24-135	5659-5660	-	_	_
24-136	5660-5661	-	_	_
24-137	5661-5668	out\_dir	_	_
24-138	5669-5670	/	_	_
24-139	5670-5674	home	_	_
24-140	5674-5675	/	_	_
24-141	5675-5680	lucyl	_	_
24-142	5680-5681	/	_	_
24-143	5681-5704	language-map-of-science	_	_
24-144	5704-5705	/	_	_
24-145	5705-5709	logs	_	_
24-146	5709-5710	/	_	_
24-147	5710-5730	word\_clusters\_lemmed	_	_
24-148	5731-5732	-	_	_
24-149	5732-5733	-	_	_
24-150	5733-5742	lemmatize	_	_
24-151	5743-5747	True	_	_
24-152	5748-5749	-	_	_
24-153	5749-5750	-	_	_
24-154	5750-5760	resolution	_	_
24-155	5761-5764	0.0	_	_
24-156	5765-5766	`	_	_
24-157	5766-5767	`	_	_
24-158	5767-5768	`	_	_
24-159	5770-5775	After	_	_
24-160	5776-5786	clustering	_	_
24-161	5787-5790	for	_	_
24-162	5791-5794	the	_	_
24-163	5795-5800	whole	_	_
24-164	5801-5808	dataset	_	_
24-165	5808-5809	,	_	_
24-166	5810-5813	use	_	_
24-167	5814-5815	`	_	_
24-168	5815-5825	Wiktionary	_	_
24-169	5826-5842	Validation.ipynb	_	_
24-170	5842-5843	`	_	_
24-171	5844-5852	notebook	_	_
24-172	5853-5855	to	_	_
24-173	5856-5859	get	_	_
24-174	5860-5863	FOS	_	_
24-175	5864-5866	to	_	_
24-176	5867-5872	words	_	_
24-177	5873-5877	json	_	_
24-178	5877-5878	.	_	_

#Text=Then use `wiktionary\_eval.sh` to run wiktionary evaluation steps for clustering and assigning.
25-1	5879-5883	Then	_	_
25-2	5884-5887	use	_	_
25-3	5888-5889	`	_	_
25-4	5889-5907	wiktionary\_eval.sh	_	_
25-5	5907-5908	`	_	_
25-6	5909-5911	to	_	_
25-7	5912-5915	run	_	_
25-8	5916-5926	wiktionary	_	_
25-9	5927-5937	evaluation	_	_
25-10	5938-5943	steps	_	_
25-11	5944-5947	for	_	_
25-12	5948-5958	clustering	_	_
25-13	5959-5962	and	_	_
25-14	5963-5972	assigning	_	_
25-15	5972-5973	.	_	_

#Text=Cluster only wiktionary words, lemmatized, specifying resolution:   ``` python cluster\_reps\_per\_token.py --data\_dir /home/lucyl/language-map-of-science/logs/replacements/replacements --dataset s2orc --index\_dir /home/lucyl/language-map-of-science/logs/inverted\_index --out\_dir /home/lucyl/language-map-of-science/logs/word\_clusters\_eval --lemmatize True --wiki\_eval True --resolution 0.0 ```  Can check the coverage of words that appear in FOS in `Wiktionary Validation.ipynb`
26-1	5975-5982	Cluster	_	_
26-2	5983-5987	only	_	_
26-3	5988-5998	wiktionary	_	_
26-4	5999-6004	words	_	_
26-5	6004-6005	,	_	_
26-6	6006-6016	lemmatized	_	_
26-7	6016-6017	,	_	_
26-8	6018-6028	specifying	_	_
26-9	6029-6039	resolution	_	_
26-10	6039-6040	:	_	_
26-11	6043-6044	`	_	_
26-12	6044-6045	`	_	_
26-13	6045-6046	`	_	_
26-14	6047-6053	python	_	_
26-15	6054-6079	cluster\_reps\_per\_token.py	_	_
26-16	6080-6081	-	_	_
26-17	6081-6082	-	_	_
26-18	6082-6090	data\_dir	_	_
26-19	6091-6092	/	_	_
26-20	6092-6096	home	_	_
26-21	6096-6097	/	_	_
26-22	6097-6102	lucyl	_	_
26-23	6102-6103	/	_	_
26-24	6103-6126	language-map-of-science	_	_
26-25	6126-6127	/	_	_
26-26	6127-6131	logs	_	_
26-27	6131-6132	/	_	_
26-28	6132-6144	replacements	_	_
26-29	6144-6145	/	_	_
26-30	6145-6157	replacements	_	_
26-31	6158-6159	-	_	_
26-32	6159-6160	-	_	_
26-33	6160-6167	dataset	_	_
26-34	6168-6173	s2orc	_	_
26-35	6174-6175	-	_	_
26-36	6175-6176	-	_	_
26-37	6176-6185	index\_dir	_	_
26-38	6186-6187	/	_	_
26-39	6187-6191	home	_	_
26-40	6191-6192	/	_	_
26-41	6192-6197	lucyl	_	_
26-42	6197-6198	/	_	_
26-43	6198-6221	language-map-of-science	_	_
26-44	6221-6222	/	_	_
26-45	6222-6226	logs	_	_
26-46	6226-6227	/	_	_
26-47	6227-6241	inverted\_index	_	_
26-48	6242-6243	-	_	_
26-49	6243-6244	-	_	_
26-50	6244-6251	out\_dir	_	_
26-51	6252-6253	/	_	_
26-52	6253-6257	home	_	_
26-53	6257-6258	/	_	_
26-54	6258-6263	lucyl	_	_
26-55	6263-6264	/	_	_
26-56	6264-6287	language-map-of-science	_	_
26-57	6287-6288	/	_	_
26-58	6288-6292	logs	_	_
26-59	6292-6293	/	_	_
26-60	6293-6311	word\_clusters\_eval	_	_
26-61	6312-6313	-	_	_
26-62	6313-6314	-	_	_
26-63	6314-6323	lemmatize	_	_
26-64	6324-6328	True	_	_
26-65	6329-6330	-	_	_
26-66	6330-6331	-	_	_
26-67	6331-6340	wiki\_eval	_	_
26-68	6341-6345	True	_	_
26-69	6346-6347	-	_	_
26-70	6347-6348	-	_	_
26-71	6348-6358	resolution	_	_
26-72	6359-6362	0.0	_	_
26-73	6363-6364	`	_	_
26-74	6364-6365	`	_	_
26-75	6365-6366	`	_	_
26-76	6368-6371	Can	_	_
26-77	6372-6377	check	_	_
26-78	6378-6381	the	_	_
26-79	6382-6390	coverage	_	_
26-80	6391-6393	of	_	_
26-81	6394-6399	words	_	_
26-82	6400-6404	that	_	_
26-83	6405-6411	appear	_	_
26-84	6412-6414	in	_	_
26-85	6415-6418	FOS	_	_
26-86	6419-6421	in	_	_
26-87	6422-6423	`	_	_
26-88	6423-6433	Wiktionary	_	_
26-89	6434-6450	Validation.ipynb	_	_
26-90	6450-6451	`	_	_

#Text=.
27-1	6451-6452	.	_	_

#Text=- `assign\_clusters\_to\_tokens.py`: assign everyone to a cluster  Lemmatized, specifying resolution:   ``` python assign\_clusters\_to\_tokens.py --out\_dir /home/lucyl/language-map-of-science/logs/sense\_assignments\_lemmed --index\_dir /home/lucyl/language-map-of-science/logs/inverted\_index --dataset s2orc --data\_dir /home/lucyl/language-map-of-science/logs/replacements/replacements --cluster\_dir /home/lucyl/language-map-of-science/logs/word\_clusters\_lemmed --lemmatize True --resolution 0.0 ```  Assign only wiktionary words, lemmatized, specifying resolution:  ``` python assign\_clusters\_to\_tokens.py --out\_dir /home/lucyl/language-map-of-science/logs/sense\_assignments\_eval --index\_dir /home/lucyl/language-map-of-science/logs/inverted\_index --dataset s2orc --data\_dir /home/lucyl/language-map-of-science/logs/replacements/replacements --cluster\_dir /home/lucyl/language-map-of-science/logs/word\_clusters\_eval --lemmatize True --wiki\_eval True --resolution 0.5 ```  Sense NPMI - run `get\_documentID\_maps()` in `get\_docID\_to\_group.py` - `word\_sense.py`, for journals, fos, and wiktionary evaluation - `Wiktionary Validation.ipynb` is the notebook that contains Wiktionary evaluation results.
28-1	6455-6456	-	_	_
28-2	6457-6458	`	_	_
28-3	6458-6486	assign\_clusters\_to\_tokens.py	_	_
28-4	6486-6487	`	_	_
28-5	6487-6488	:	_	_
28-6	6489-6495	assign	_	_
28-7	6496-6504	everyone	_	_
28-8	6505-6507	to	_	_
28-9	6508-6509	a	_	_
28-10	6510-6517	cluster	_	_
28-11	6519-6529	Lemmatized	_	_
28-12	6529-6530	,	_	_
28-13	6531-6541	specifying	_	_
28-14	6542-6552	resolution	_	_
28-15	6552-6553	:	_	_
28-16	6556-6557	`	_	_
28-17	6557-6558	`	_	_
28-18	6558-6559	`	_	_
28-19	6560-6566	python	_	_
28-20	6567-6595	assign\_clusters\_to\_tokens.py	_	_
28-21	6596-6597	-	_	_
28-22	6597-6598	-	_	_
28-23	6598-6605	out\_dir	_	_
28-24	6606-6607	/	_	_
28-25	6607-6611	home	_	_
28-26	6611-6612	/	_	_
28-27	6612-6617	lucyl	_	_
28-28	6617-6618	/	_	_
28-29	6618-6641	language-map-of-science	_	_
28-30	6641-6642	/	_	_
28-31	6642-6646	logs	_	_
28-32	6646-6647	/	_	_
28-33	6647-6671	sense\_assignments\_lemmed	_	_
28-34	6672-6673	-	_	_
28-35	6673-6674	-	_	_
28-36	6674-6683	index\_dir	_	_
28-37	6684-6685	/	_	_
28-38	6685-6689	home	_	_
28-39	6689-6690	/	_	_
28-40	6690-6695	lucyl	_	_
28-41	6695-6696	/	_	_
28-42	6696-6719	language-map-of-science	_	_
28-43	6719-6720	/	_	_
28-44	6720-6724	logs	_	_
28-45	6724-6725	/	_	_
28-46	6725-6739	inverted\_index	_	_
28-47	6740-6741	-	_	_
28-48	6741-6742	-	_	_
28-49	6742-6749	dataset	_	_
28-50	6750-6755	s2orc	_	_
28-51	6756-6757	-	_	_
28-52	6757-6758	-	_	_
28-53	6758-6766	data\_dir	_	_
28-54	6767-6768	/	_	_
28-55	6768-6772	home	_	_
28-56	6772-6773	/	_	_
28-57	6773-6778	lucyl	_	_
28-58	6778-6779	/	_	_
28-59	6779-6802	language-map-of-science	_	_
28-60	6802-6803	/	_	_
28-61	6803-6807	logs	_	_
28-62	6807-6808	/	_	_
28-63	6808-6820	replacements	_	_
28-64	6820-6821	/	_	_
28-65	6821-6833	replacements	_	_
28-66	6834-6835	-	_	_
28-67	6835-6836	-	_	_
28-68	6836-6847	cluster\_dir	_	_
28-69	6848-6849	/	_	_
28-70	6849-6853	home	_	_
28-71	6853-6854	/	_	_
28-72	6854-6859	lucyl	_	_
28-73	6859-6860	/	_	_
28-74	6860-6883	language-map-of-science	_	_
28-75	6883-6884	/	_	_
28-76	6884-6888	logs	_	_
28-77	6888-6889	/	_	_
28-78	6889-6909	word\_clusters\_lemmed	_	_
28-79	6910-6911	-	_	_
28-80	6911-6912	-	_	_
28-81	6912-6921	lemmatize	_	_
28-82	6922-6926	True	_	_
28-83	6927-6928	-	_	_
28-84	6928-6929	-	_	_
28-85	6929-6939	resolution	_	_
28-86	6940-6943	0.0	_	_
28-87	6944-6945	`	_	_
28-88	6945-6946	`	_	_
28-89	6946-6947	`	_	_
28-90	6949-6955	Assign	_	_
28-91	6956-6960	only	_	_
28-92	6961-6971	wiktionary	_	_
28-93	6972-6977	words	_	_
28-94	6977-6978	,	_	_
28-95	6979-6989	lemmatized	_	_
28-96	6989-6990	,	_	_
28-97	6991-7001	specifying	_	_
28-98	7002-7012	resolution	_	_
28-99	7012-7013	:	_	_
28-100	7015-7016	`	_	_
28-101	7016-7017	`	_	_
28-102	7017-7018	`	_	_
28-103	7019-7025	python	_	_
28-104	7026-7054	assign\_clusters\_to\_tokens.py	_	_
28-105	7055-7056	-	_	_
28-106	7056-7057	-	_	_
28-107	7057-7064	out\_dir	_	_
28-108	7065-7066	/	_	_
28-109	7066-7070	home	_	_
28-110	7070-7071	/	_	_
28-111	7071-7076	lucyl	_	_
28-112	7076-7077	/	_	_
28-113	7077-7100	language-map-of-science	_	_
28-114	7100-7101	/	_	_
28-115	7101-7105	logs	_	_
28-116	7105-7106	/	_	_
28-117	7106-7128	sense\_assignments\_eval	_	_
28-118	7129-7130	-	_	_
28-119	7130-7131	-	_	_
28-120	7131-7140	index\_dir	_	_
28-121	7141-7142	/	_	_
28-122	7142-7146	home	_	_
28-123	7146-7147	/	_	_
28-124	7147-7152	lucyl	_	_
28-125	7152-7153	/	_	_
28-126	7153-7176	language-map-of-science	_	_
28-127	7176-7177	/	_	_
28-128	7177-7181	logs	_	_
28-129	7181-7182	/	_	_
28-130	7182-7196	inverted\_index	_	_
28-131	7197-7198	-	_	_
28-132	7198-7199	-	_	_
28-133	7199-7206	dataset	_	_
28-134	7207-7212	s2orc	_	_
28-135	7213-7214	-	_	_
28-136	7214-7215	-	_	_
28-137	7215-7223	data\_dir	_	_
28-138	7224-7225	/	_	_
28-139	7225-7229	home	_	_
28-140	7229-7230	/	_	_
28-141	7230-7235	lucyl	_	_
28-142	7235-7236	/	_	_
28-143	7236-7259	language-map-of-science	_	_
28-144	7259-7260	/	_	_
28-145	7260-7264	logs	_	_
28-146	7264-7265	/	_	_
28-147	7265-7277	replacements	_	_
28-148	7277-7278	/	_	_
28-149	7278-7290	replacements	_	_
28-150	7291-7292	-	_	_
28-151	7292-7293	-	_	_
28-152	7293-7304	cluster\_dir	_	_
28-153	7305-7306	/	_	_
28-154	7306-7310	home	_	_
28-155	7310-7311	/	_	_
28-156	7311-7316	lucyl	_	_
28-157	7316-7317	/	_	_
28-158	7317-7340	language-map-of-science	_	_
28-159	7340-7341	/	_	_
28-160	7341-7345	logs	_	_
28-161	7345-7346	/	_	_
28-162	7346-7364	word\_clusters\_eval	_	_
28-163	7365-7366	-	_	_
28-164	7366-7367	-	_	_
28-165	7367-7376	lemmatize	_	_
28-166	7377-7381	True	_	_
28-167	7382-7383	-	_	_
28-168	7383-7384	-	_	_
28-169	7384-7393	wiki\_eval	_	_
28-170	7394-7398	True	_	_
28-171	7399-7400	-	_	_
28-172	7400-7401	-	_	_
28-173	7401-7411	resolution	_	_
28-174	7412-7415	0.5	_	_
28-175	7416-7417	`	_	_
28-176	7417-7418	`	_	_
28-177	7418-7419	`	_	_
28-178	7421-7426	Sense	_	_
28-179	7427-7431	NPMI	_	_
28-180	7432-7433	-	_	_
28-181	7434-7437	run	_	_
28-182	7438-7439	`	_	_
28-183	7439-7458	get\_documentID\_maps	_	_
28-184	7458-7459	(	_	_
28-185	7459-7460	)	_	_
28-186	7460-7461	`	_	_
28-187	7462-7464	in	_	_
28-188	7465-7466	`	_	_
28-189	7466-7487	get\_docID\_to\_group.py	_	_
28-190	7487-7488	`	_	_
28-191	7489-7490	-	_	_
28-192	7491-7492	`	_	_
28-193	7492-7505	word\_sense.py	_	_
28-194	7505-7506	`	_	_
28-195	7506-7507	,	_	_
28-196	7508-7511	for	_	_
28-197	7512-7520	journals	_	_
28-198	7520-7521	,	_	_
28-199	7522-7525	fos	_	_
28-200	7525-7526	,	_	_
28-201	7527-7530	and	_	_
28-202	7531-7541	wiktionary	_	_
28-203	7542-7552	evaluation	_	_
28-204	7553-7554	-	_	_
28-205	7555-7556	`	_	_
28-206	7556-7566	Wiktionary	_	_
28-207	7567-7583	Validation.ipynb	_	_
28-208	7583-7584	`	_	_
28-209	7585-7587	is	_	_
28-210	7588-7591	the	_	_
28-211	7592-7600	notebook	_	_
28-212	7601-7605	that	_	_
28-213	7606-7614	contains	_	_
28-214	7615-7625	Wiktionary	_	_
28-215	7626-7636	evaluation	_	_
28-216	7637-7644	results	_	_
28-217	7644-7645	.	_	_

#Text=\*\*Social implication experiments\*\* - `Domain Language Analysis` is a notebook that generates data for some of the tables of example jargon in the paper.
29-1	7648-7649	\*	_	_
29-2	7649-7650	\*	_	_
29-3	7650-7656	Social	_	_
29-4	7657-7668	implication	_	_
29-5	7669-7680	experiments	_	_
29-6	7680-7681	\*	_	_
29-7	7681-7682	\*	_	_
29-8	7683-7684	-	_	_
29-9	7685-7686	`	_	_
29-10	7686-7692	Domain	_	_
29-11	7693-7701	Language	_	_
29-12	7702-7710	Analysis	_	_
29-13	7710-7711	`	_	_
29-14	7712-7714	is	_	_
29-15	7715-7716	a	_	_
29-16	7717-7725	notebook	_	_
29-17	7726-7730	that	_	_
29-18	7731-7740	generates	_	_
29-19	7741-7745	data	_	_
29-20	7746-7749	for	_	_
29-21	7750-7754	some	_	_
29-22	7755-7757	of	_	_
29-23	7758-7761	the	_	_
29-24	7762-7768	tables	_	_
29-25	7769-7771	of	_	_
29-26	7772-7779	example	_	_
29-27	7780-7786	jargon	_	_
29-28	7787-7789	in	_	_
29-29	7790-7793	the	_	_
29-30	7794-7799	paper	_	_
29-31	7799-7800	.	_	_

#Text=It also generates the figure that summarizes whether some fields tend to use more jargon than others, and whether a field tends to use lots of distinctive words, or repurpose existing words with distinctive meanings
30-1	7801-7803	It	_	_
30-2	7804-7808	also	_	_
30-3	7809-7818	generates	_	_
30-4	7819-7822	the	_	_
30-5	7823-7829	figure	_	_
30-6	7830-7834	that	_	_
30-7	7835-7845	summarizes	_	_
30-8	7846-7853	whether	_	_
30-9	7854-7858	some	_	_
30-10	7859-7865	fields	_	_
30-11	7866-7870	tend	_	_
30-12	7871-7873	to	_	_
30-13	7874-7877	use	_	_
30-14	7878-7882	more	_	_
30-15	7883-7889	jargon	_	_
30-16	7890-7894	than	_	_
30-17	7895-7901	others	_	_
30-18	7901-7902	,	_	_
30-19	7903-7906	and	_	_
30-20	7907-7914	whether	_	_
30-21	7915-7916	a	_	_
30-22	7917-7922	field	_	_
30-23	7923-7928	tends	_	_
30-24	7929-7931	to	_	_
30-25	7932-7935	use	_	_
30-26	7936-7940	lots	_	_
30-27	7941-7943	of	_	_
30-28	7944-7955	distinctive	_	_
30-29	7956-7961	words	_	_
30-30	7961-7962	,	_	_
30-31	7963-7965	or	_	_
30-32	7966-7975	repurpose	_	_
30-33	7976-7984	existing	_	_
30-34	7985-7990	words	_	_
30-35	7991-7995	with	_	_
30-36	7996-8007	distinctive	_	_
30-37	8008-8016	meanings	_	_

#Text=.
31-1	8016-8017	.	_	_

#Text=- `get\_discipline\_specific.py`: get discipline specific journals and their papers, for the audience design experiment - `jargonyness\_per\_paper.py`: calculate amount of jargon per abstract  Example usage:  ``` python jargonyness\_per\_paper.py --cutoff 0.1 --exp\_name general\_specific  python jargonyness\_per\_paper.py --cutoff 0.1 --exp\_name regression\_sample ```  - `expected\_max\_npmi.py`: expected max NPMI over token positions in abstract, for audience design experiment - `Paper Jargon Rate.ipynb`: audience design plots - `get\_paper\_time\_and\_place.py`: get FOS and year of potential papers that may cite the papers in regression study - `General Dataset Statistics`: get data used for regression  - `regression\_variables.py`: get some of the simpler regression variables - `citations\_per\_journal.py`: for calculating the average number of citations per journal, a regression variable - `Paper Success Regression.ipynb`: notebook that runs regressions - `get\_fos\_citation\_matrix.py`: for calculating similarity among disciplines, part of interdisciplinarity regression  \*\*Citation graph\*\*  Future work may want to run analysis on the S2ORC citation graph.
32-1	8019-8020	-	_	_
32-2	8021-8022	`	_	_
32-3	8022-8048	get\_discipline\_specific.py	_	_
32-4	8048-8049	`	_	_
32-5	8049-8050	:	_	_
32-6	8051-8054	get	_	_
32-7	8055-8065	discipline	_	_
32-8	8066-8074	specific	_	_
32-9	8075-8083	journals	_	_
32-10	8084-8087	and	_	_
32-11	8088-8093	their	_	_
32-12	8094-8100	papers	_	_
32-13	8100-8101	,	_	_
32-14	8102-8105	for	_	_
32-15	8106-8109	the	_	_
32-16	8110-8118	audience	_	_
32-17	8119-8125	design	_	_
32-18	8126-8136	experiment	_	_
32-19	8137-8138	-	_	_
32-20	8139-8140	`	_	_
32-21	8140-8164	jargonyness\_per\_paper.py	_	_
32-22	8164-8165	`	_	_
32-23	8165-8166	:	_	_
32-24	8167-8176	calculate	_	_
32-25	8177-8183	amount	_	_
32-26	8184-8186	of	_	_
32-27	8187-8193	jargon	_	_
32-28	8194-8197	per	_	_
32-29	8198-8206	abstract	_	_
32-30	8208-8215	Example	_	_
32-31	8216-8221	usage	_	_
32-32	8221-8222	:	_	_
32-33	8224-8225	`	_	_
32-34	8225-8226	`	_	_
32-35	8226-8227	`	_	_
32-36	8228-8234	python	_	_
32-37	8235-8259	jargonyness\_per\_paper.py	_	_
32-38	8260-8261	-	_	_
32-39	8261-8262	-	_	_
32-40	8262-8268	cutoff	_	_
32-41	8269-8272	0.1	_	_
32-42	8273-8274	-	_	_
32-43	8274-8275	-	_	_
32-44	8275-8283	exp\_name	_	_
32-45	8284-8300	general\_specific	_	_
32-46	8302-8308	python	_	_
32-47	8309-8333	jargonyness\_per\_paper.py	_	_
32-48	8334-8335	-	_	_
32-49	8335-8336	-	_	_
32-50	8336-8342	cutoff	_	_
32-51	8343-8346	0.1	_	_
32-52	8347-8348	-	_	_
32-53	8348-8349	-	_	_
32-54	8349-8357	exp\_name	_	_
32-55	8358-8375	regression\_sample	_	_
32-56	8376-8377	`	_	_
32-57	8377-8378	`	_	_
32-58	8378-8379	`	_	_
32-59	8381-8382	-	_	_
32-60	8383-8384	`	_	_
32-61	8384-8404	expected\_max\_npmi.py	_	_
32-62	8404-8405	`	_	_
32-63	8405-8406	:	_	_
32-64	8407-8415	expected	_	_
32-65	8416-8419	max	_	_
32-66	8420-8424	NPMI	_	_
32-67	8425-8429	over	_	_
32-68	8430-8435	token	_	_
32-69	8436-8445	positions	_	_
32-70	8446-8448	in	_	_
32-71	8449-8457	abstract	_	_
32-72	8457-8458	,	_	_
32-73	8459-8462	for	_	_
32-74	8463-8471	audience	_	_
32-75	8472-8478	design	_	_
32-76	8479-8489	experiment	_	_
32-77	8490-8491	-	_	_
32-78	8492-8493	`	_	_
32-79	8493-8498	Paper	_	_
32-80	8499-8505	Jargon	_	_
32-81	8506-8516	Rate.ipynb	_	_
32-82	8516-8517	`	_	_
32-83	8517-8518	:	_	_
32-84	8519-8527	audience	_	_
32-85	8528-8534	design	_	_
32-86	8535-8540	plots	_	_
32-87	8541-8542	-	_	_
32-88	8543-8544	`	_	_
32-89	8544-8571	get\_paper\_time\_and\_place.py	_	_
32-90	8571-8572	`	_	_
32-91	8572-8573	:	_	_
32-92	8574-8577	get	_	_
32-93	8578-8581	FOS	_	_
32-94	8582-8585	and	_	_
32-95	8586-8590	year	_	_
32-96	8591-8593	of	_	_
32-97	8594-8603	potential	_	_
32-98	8604-8610	papers	_	_
32-99	8611-8615	that	_	_
32-100	8616-8619	may	_	_
32-101	8620-8624	cite	_	_
32-102	8625-8628	the	_	_
32-103	8629-8635	papers	_	_
32-104	8636-8638	in	_	_
32-105	8639-8649	regression	_	_
32-106	8650-8655	study	_	_
32-107	8656-8657	-	_	_
32-108	8658-8659	`	_	_
32-109	8659-8666	General	_	_
32-110	8667-8674	Dataset	_	_
32-111	8675-8685	Statistics	_	_
32-112	8685-8686	`	_	_
32-113	8686-8687	:	_	_
32-114	8688-8691	get	_	_
32-115	8692-8696	data	_	_
32-116	8697-8701	used	_	_
32-117	8702-8705	for	_	_
32-118	8706-8716	regression	_	_
32-119	8718-8719	-	_	_
32-120	8720-8721	`	_	_
32-121	8721-8744	regression\_variables.py	_	_
32-122	8744-8745	`	_	_
32-123	8745-8746	:	_	_
32-124	8747-8750	get	_	_
32-125	8751-8755	some	_	_
32-126	8756-8758	of	_	_
32-127	8759-8762	the	_	_
32-128	8763-8770	simpler	_	_
32-129	8771-8781	regression	_	_
32-130	8782-8791	variables	_	_
32-131	8792-8793	-	_	_
32-132	8794-8795	`	_	_
32-133	8795-8819	citations\_per\_journal.py	_	_
32-134	8819-8820	`	_	_
32-135	8820-8821	:	_	_
32-136	8822-8825	for	_	_
32-137	8826-8837	calculating	_	_
32-138	8838-8841	the	_	_
32-139	8842-8849	average	_	_
32-140	8850-8856	number	_	_
32-141	8857-8859	of	_	_
32-142	8860-8869	citations	_	_
32-143	8870-8873	per	_	_
32-144	8874-8881	journal	_	_
32-145	8881-8882	,	_	_
32-146	8883-8884	a	_	_
32-147	8885-8895	regression	_	_
32-148	8896-8904	variable	_	_
32-149	8905-8906	-	_	_
32-150	8907-8908	`	_	_
32-151	8908-8913	Paper	_	_
32-152	8914-8921	Success	_	_
32-153	8922-8938	Regression.ipynb	_	_
32-154	8938-8939	`	_	_
32-155	8939-8940	:	_	_
32-156	8941-8949	notebook	_	_
32-157	8950-8954	that	_	_
32-158	8955-8959	runs	_	_
32-159	8960-8971	regressions	_	_
32-160	8972-8973	-	_	_
32-161	8974-8975	`	_	_
32-162	8975-9001	get\_fos\_citation\_matrix.py	_	_
32-163	9001-9002	`	_	_
32-164	9002-9003	:	_	_
32-165	9004-9007	for	_	_
32-166	9008-9019	calculating	_	_
32-167	9020-9030	similarity	_	_
32-168	9031-9036	among	_	_
32-169	9037-9048	disciplines	_	_
32-170	9048-9049	,	_	_
32-171	9050-9054	part	_	_
32-172	9055-9057	of	_	_
32-173	9058-9077	interdisciplinarity	_	_
32-174	9078-9088	regression	_	_
32-175	9090-9091	\*	_	_
32-176	9091-9092	\*	_	_
32-177	9092-9100	Citation	_	_
32-178	9101-9106	graph	_	_
32-179	9106-9107	\*	_	_
32-180	9107-9108	\*	_	_
32-181	9110-9116	Future	_	_
32-182	9117-9121	work	_	_
32-183	9122-9125	may	_	_
32-184	9126-9130	want	_	_
32-185	9131-9133	to	_	_
32-186	9134-9137	run	_	_
32-187	9138-9146	analysis	_	_
32-188	9147-9149	on	_	_
32-189	9150-9153	the	_	_
32-190	9154-9159	S2ORC	_	_
32-191	9160-9168	citation	_	_
32-192	9169-9174	graph	_	_
32-193	9174-9175	.	_	_

#Text=The below script supports the conversion of S2ORC data to a `graph-tool` network, where nodes are papers labeled with paper ID
33-1	9176-9179	The	_	_
33-2	9180-9185	below	_	_
33-3	9186-9192	script	_	_
33-4	9193-9201	supports	_	_
33-5	9202-9205	the	_	_
33-6	9206-9216	conversion	_	_
33-7	9217-9219	of	_	_
33-8	9220-9225	S2ORC	_	_
33-9	9226-9230	data	_	_
33-10	9231-9233	to	_	_
33-11	9234-9235	a	_	_
33-12	9236-9237	`	_	_
33-13	9237-9247	graph-tool	_	_
33-14	9247-9248	`	_	_
33-15	9249-9256	network	_	_
33-16	9256-9257	,	_	_
33-17	9258-9263	where	_	_
33-18	9264-9269	nodes	_	_
33-19	9270-9273	are	_	_
33-20	9274-9280	papers	_	_
33-21	9281-9288	labeled	_	_
33-22	9289-9293	with	_	_
33-23	9294-9299	paper	_	_
33-24	9300-9302	ID	_	_

#Text=.
34-1	9302-9303	.	_	_

#Text=- `citation\_graph.py`: create citation graph
35-1	9306-9307	-	_	_
35-2	9308-9309	`	_	_
35-3	9309-9326	citation\_graph.py	_	_
35-4	9326-9327	`	_	_
35-5	9327-9328	:	_	_
35-6	9329-9335	create	_	_
35-7	9336-9344	citation	_	_
35-8	9345-9350	graph	_	_