#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=# DejaVu ## Table of Contents =================    \* \[Code\](#code)     \* \[Install Requirements\](#install-requirements)     \* \[Usage\](#usage)     \* \[Example\](#example)   \* \[Datasets\](#datasets)   \* \[Deployment and Failure Injection Scripts of Train-Ticket\](#deployment-and-failure-injection-scripts-of-train-ticket)   \* \[Citation\](#citation)   \* \[Supplementary details\](#supplementary-details)    ## Paper A preprint version: https://arxiv.org/abs/2207.09021 ## Code ### Install 1.
1-1	0-1	#	_	_
1-2	2-8	DejaVu	_	_
1-3	9-10	#	_	_
1-4	10-11	#	_	_
1-5	12-17	Table	_	_
1-6	18-20	of	_	_
1-7	21-29	Contents	_	_
1-8	30-31	=	_	_
1-9	31-32	=	_	_
1-10	32-33	=	_	_
1-11	33-34	=	_	_
1-12	34-35	=	_	_
1-13	35-36	=	_	_
1-14	36-37	=	_	_
1-15	37-38	=	_	_
1-16	38-39	=	_	_
1-17	39-40	=	_	_
1-18	40-41	=	_	_
1-19	41-42	=	_	_
1-20	42-43	=	_	_
1-21	43-44	=	_	_
1-22	44-45	=	_	_
1-23	45-46	=	_	_
1-24	46-47	=	_	_
1-25	51-52	\*	_	_
1-26	53-54	\[	_	_
1-27	54-58	Code	_	_
1-28	58-59	\]	_	_
1-29	59-60	(	_	_
1-30	60-61	#	_	_
1-31	61-65	code	_	_
1-32	65-66	)	_	_
1-33	71-72	\*	_	_
1-34	73-74	\[	_	_
1-35	74-81	Install	_	_
1-36	82-94	Requirements	_	_
1-37	94-95	\]	_	_
1-38	95-96	(	_	_
1-39	96-97	#	_	_
1-40	97-117	install-requirements	_	_
1-41	117-118	)	_	_
1-42	123-124	\*	_	_
1-43	125-126	\[	_	_
1-44	126-131	Usage	_	_
1-45	131-132	\]	_	_
1-46	132-133	(	_	_
1-47	133-134	#	_	_
1-48	134-139	usage	_	_
1-49	139-140	)	_	_
1-50	145-146	\*	_	_
1-51	147-148	\[	_	_
1-52	148-155	Example	_	_
1-53	155-156	\]	_	_
1-54	156-157	(	_	_
1-55	157-158	#	_	_
1-56	158-165	example	_	_
1-57	165-166	)	_	_
1-58	169-170	\*	_	_
1-59	171-172	\[	_	_
1-60	172-180	Datasets	_	_
1-61	180-181	\]	_	_
1-62	181-182	(	_	_
1-63	182-183	#	_	_
1-64	183-191	datasets	_	_
1-65	191-192	)	_	_
1-66	195-196	\*	_	_
1-67	197-198	\[	_	_
1-68	198-208	Deployment	_	_
1-69	209-212	and	_	_
1-70	213-220	Failure	_	_
1-71	221-230	Injection	_	_
1-72	231-238	Scripts	_	_
1-73	239-241	of	_	_
1-74	242-254	Train-Ticket	_	_
1-75	254-255	\]	_	_
1-76	255-256	(	_	_
1-77	256-257	#	_	_
1-78	257-313	deployment-and-failure-injection-scripts-of-train-ticket	_	_
1-79	313-314	)	_	_
1-80	317-318	\*	_	_
1-81	319-320	\[	_	_
1-82	320-328	Citation	_	_
1-83	328-329	\]	_	_
1-84	329-330	(	_	_
1-85	330-331	#	_	_
1-86	331-339	citation	_	_
1-87	339-340	)	_	_
1-88	343-344	\*	_	_
1-89	345-346	\[	_	_
1-90	346-359	Supplementary	_	_
1-91	360-367	details	_	_
1-92	367-368	\]	_	_
1-93	368-369	(	_	_
1-94	369-370	#	_	_
1-95	370-391	supplementary-details	_	_
1-96	391-392	)	_	_
1-97	396-397	#	_	_
1-98	397-398	#	_	_
1-99	399-404	Paper	_	_
1-100	405-406	A	_	_
1-101	407-415	preprint	_	_
1-102	416-423	version	_	_
1-103	423-424	:	_	_
1-104	425-430	https	_	_
1-105	430-431	:	_	_
1-106	431-432	/	_	_
1-107	432-433	/	_	_
1-108	433-442	arxiv.org	_	_
1-109	442-443	/	_	_
1-110	443-446	abs	_	_
1-111	446-447	/	_	_
1-112	447-457	2207.09021	_	_
1-113	458-459	#	_	_
1-114	459-460	#	_	_
1-115	461-465	Code	_	_
1-116	466-467	#	_	_
1-117	467-468	#	_	_
1-118	468-469	#	_	_
1-119	470-477	Install	_	_
1-120	478-479	1	_	_
1-121	479-480	.	_	_

#Text=All the software requirements are already pre-installed in the Docker image below.
2-1	481-484	All	_	_
2-2	485-488	the	_	_
2-3	489-497	software	_	_
2-4	498-510	requirements	_	_
2-5	511-514	are	_	_
2-6	515-522	already	_	_
2-7	523-536	pre-installed	_	_
2-8	537-539	in	_	_
2-9	540-543	the	_	_
2-10	544-550	Docker	_	_
2-11	551-556	image	_	_
2-12	557-562	below	_	_
2-13	562-563	.	_	_

#Text=The requirements are also listed in `requirements.txt` and `requirements-dev.txt`.
3-1	564-567	The	_	_
3-2	568-580	requirements	_	_
3-3	581-584	are	_	_
3-4	585-589	also	_	_
3-5	590-596	listed	_	_
3-6	597-599	in	_	_
3-7	600-601	`	_	_
3-8	601-617	requirements.txt	_	_
3-9	617-618	`	_	_
3-10	619-622	and	_	_
3-11	623-624	`	_	_
3-12	624-644	requirements-dev.txt	_	_
3-13	644-645	`	_	_
3-14	645-646	.	_	_

#Text=Note that `DGL 0.8` is not released yet when I did this work, so I installed `DGL 0.8` manually from the source code.
4-1	647-651	Note	_	_
4-2	652-656	that	_	_
4-3	657-658	`	_	_
4-4	658-661	DGL	_	_
4-5	662-665	0.8	_	_
4-6	665-666	`	_	_
4-7	667-669	is	_	_
4-8	670-673	not	_	_
4-9	674-682	released	_	_
4-10	683-686	yet	_	_
4-11	687-691	when	_	_
4-12	692-693	I	_	_
4-13	694-697	did	_	_
4-14	698-702	this	_	_
4-15	703-707	work	_	_
4-16	707-708	,	_	_
4-17	709-711	so	_	_
4-18	712-713	I	_	_
4-19	714-723	installed	_	_
4-20	724-725	`	_	_
4-21	725-728	DGL	_	_
4-22	729-732	0.8	_	_
4-23	732-733	`	_	_
4-24	734-742	manually	_	_
4-25	743-747	from	_	_
4-26	748-751	the	_	_
4-27	752-758	source	_	_
4-28	759-763	code	_	_
4-29	763-764	.	_	_

#Text=PyTorch version should be equal to or greater than 1.11.0.
5-1	765-772	PyTorch	_	_
5-2	773-780	version	_	_
5-3	781-787	should	_	_
5-4	788-790	be	_	_
5-5	791-796	equal	_	_
5-6	797-799	to	_	_
5-7	800-802	or	_	_
5-8	803-810	greater	_	_
5-9	811-815	than	_	_
5-10	816-822	1.11.0	_	_
5-11	822-823	.	_	_

#Text=```bash    docker pull lizytalk/dejavu    ``` 2.
6-1	827-828	`	_	_
6-2	828-829	`	_	_
6-3	829-830	`	_	_
6-4	830-834	bash	_	_
6-5	838-844	docker	_	_
6-6	845-849	pull	_	_
6-7	850-858	lizytalk	_	_
6-8	858-859	/	_	_
6-9	859-865	dejavu	_	_
6-10	869-870	`	_	_
6-11	870-871	`	_	_
6-12	871-872	`	_	_
6-13	873-874	2	_	_
6-14	874-875	.	_	_

#Text=Pull the code from GitHub    ```bash    git pull https://github.com/NetManAIOps/DejaVu.git DejaVu    ``` 3.
7-1	876-880	Pull	_	_
7-2	881-884	the	_	_
7-3	885-889	code	_	_
7-4	890-894	from	_	_
7-5	895-901	GitHub	_	_
7-6	905-906	`	_	_
7-7	906-907	`	_	_
7-8	907-908	`	_	_
7-9	908-912	bash	_	_
7-10	916-919	git	_	_
7-11	920-924	pull	_	_
7-12	925-930	https	_	_
7-13	930-931	:	_	_
7-14	931-932	/	_	_
7-15	932-933	/	_	_
7-16	933-943	github.com	_	_
7-17	943-944	/	_	_
7-18	944-955	NetManAIOps	_	_
7-19	955-956	/	_	_
7-20	956-966	DejaVu.git	_	_
7-20	956-962	DejaVu	_	_
7-21	967-973	DejaVu	_	_
7-22	977-978	`	_	_
7-23	978-979	`	_	_
7-24	979-980	`	_	_
7-25	981-982	3	_	_
7-26	982-983	.	_	_

#Text=Download the datasets following the link in the GitHub repo and extract the datasets into `.
8-1	984-992	Download	_	_
8-2	993-996	the	_	_
8-3	997-1005	datasets	_	_
8-4	1006-1015	following	_	_
8-5	1016-1019	the	_	_
8-6	1020-1024	link	_	_
8-7	1025-1027	in	_	_
8-8	1028-1031	the	_	_
8-9	1032-1038	GitHub	_	_
8-10	1039-1043	repo	_	_
8-11	1044-1047	and	_	_
8-12	1048-1055	extract	_	_
8-13	1056-1059	the	_	_
8-14	1060-1068	datasets	_	_
8-15	1069-1073	into	_	_
8-16	1074-1075	`	_	_
8-17	1075-1076	.	_	_

#Text=/DejaVu/data` 4.
9-1	1076-1077	/	_	_
9-2	1077-1083	DejaVu	_	_
9-3	1083-1084	/	_	_
9-4	1084-1088	data	_	_
9-5	1088-1089	`	_	_
9-6	1090-1091	4	_	_
9-7	1091-1092	.	_	_

#Text=I use the command `realpath` in the example commands below, which is not bundled in macOS and Windows.
10-1	1093-1094	I	_	_
10-2	1095-1098	use	_	_
10-3	1099-1102	the	_	_
10-4	1103-1110	command	_	_
10-5	1111-1112	`	_	_
10-6	1112-1120	realpath	_	_
10-7	1120-1121	`	_	_
10-8	1122-1124	in	_	_
10-9	1125-1128	the	_	_
10-10	1129-1136	example	_	_
10-11	1137-1145	commands	_	_
10-12	1146-1151	below	_	_
10-13	1151-1152	,	_	_
10-14	1153-1158	which	_	_
10-15	1159-1161	is	_	_
10-16	1162-1165	not	_	_
10-17	1166-1173	bundled	_	_
10-18	1174-1176	in	_	_
10-19	1177-1182	macOS	_	_
10-20	1183-1186	and	_	_
10-21	1187-1194	Windows	_	_
10-22	1194-1195	.	_	_

#Text=On macOS, you can install it by `brew install coreutils`. 5.
11-1	1196-1198	On	_	_
11-2	1199-1204	macOS	_	_
11-3	1204-1205	,	_	_
11-4	1206-1209	you	_	_
11-5	1210-1213	can	_	_
11-6	1214-1221	install	_	_
11-7	1222-1224	it	_	_
11-8	1225-1227	by	_	_
11-9	1228-1229	`	_	_
11-10	1229-1233	brew	_	_
11-11	1234-1241	install	_	_
11-12	1242-1251	coreutils	_	_
11-13	1251-1252	`	_	_
11-14	1252-1253	.	_	_
11-15	1254-1255	5	_	_
11-16	1255-1256	.	_	_

#Text=Start a Docker container with our image and enter its shell    ```bash    docker run -it --rm -v $(realpath DejaVu):/workspace lizytalk/dejavu bash    ``` 6.
12-1	1257-1262	Start	_	_
12-2	1263-1264	a	_	_
12-3	1265-1271	Docker	_	_
12-4	1272-1281	container	_	_
12-5	1282-1286	with	_	_
12-6	1287-1290	our	_	_
12-7	1291-1296	image	_	_
12-8	1297-1300	and	_	_
12-9	1301-1306	enter	_	_
12-10	1307-1310	its	_	_
12-11	1311-1316	shell	_	_
12-12	1320-1321	`	_	_
12-13	1321-1322	`	_	_
12-14	1322-1323	`	_	_
12-15	1323-1327	bash	_	_
12-16	1331-1337	docker	_	_
12-17	1338-1341	run	_	_
12-18	1342-1343	-	_	_
12-19	1343-1345	it	_	_
12-20	1346-1347	-	_	_
12-21	1347-1348	-	_	_
12-22	1348-1350	rm	_	_
12-23	1351-1352	-	_	_
12-24	1352-1353	v	_	_
12-25	1354-1355	$	_	_
12-26	1355-1356	(	_	_
12-27	1356-1364	realpath	_	_
12-28	1365-1371	DejaVu	_	_
12-29	1371-1372	)	_	_
12-30	1372-1373	:	_	_
12-31	1373-1374	/	_	_
12-32	1374-1383	workspace	_	_
12-33	1384-1392	lizytalk	_	_
12-34	1392-1393	/	_	_
12-35	1393-1399	dejavu	_	_
12-36	1400-1404	bash	_	_
12-37	1408-1409	`	_	_
12-38	1409-1410	`	_	_
12-39	1410-1411	`	_	_
12-40	1412-1413	6	_	_
12-41	1413-1414	.	_	_

#Text=Run `direnv allow` in the shell of the Docker container to set the environment variables. 7.
13-1	1415-1418	Run	_	_
13-2	1419-1420	`	_	_
13-3	1420-1426	direnv	_	_
13-4	1427-1432	allow	_	_
13-5	1432-1433	`	_	_
13-6	1434-1436	in	_	_
13-7	1437-1440	the	_	_
13-8	1441-1446	shell	_	_
13-9	1447-1449	of	_	_
13-10	1450-1453	the	_	_
13-11	1454-1460	Docker	_	_
13-12	1461-1470	container	_	_
13-13	1471-1473	to	_	_
13-14	1474-1477	set	_	_
13-15	1478-1481	the	_	_
13-16	1482-1493	environment	_	_
13-17	1494-1503	variables	_	_
13-18	1503-1504	.	_	_
13-19	1505-1506	7	_	_
13-20	1506-1507	.	_	_

#Text=Run experiments in the shell of the Docker container following the usage table as follows.   ### Usage \|Algorithm\|Usage\| \|---\|---\| \|DejaVu\|Run for dataset A1: `python exp/run\_GAT\_node\_classification.py -H=4 -L=8 -fe=GRU -bal=True --data\_dir=data/A1`\| \|JSS'20\|Run for dataset A1: `python exp/DejaVu/run\_JSS20.py --data\_dir=data/A1`\| \|iSQUAD\|Run for dataset A1: `python exp/DejaVu/run\_iSQ.py --data\_dir=data/A1`\| \|Decision Tree\|Run for dataset A1: `python exp/run\_DT\_node\_classification.py --data\_dir=data/A1`\| \|RandomWalk@Metric\|Run for dataset A1: `python exp/DejaVu/run\_random\_walk\_single\_metric.py --data\_dir=data/A1 --window\_size 60 10 --score\_aggregation\_method=min`\| \|RandomWalk@FI\|Run for dataset A1: `python exp/DejaVu/run\_random\_walk\_failure\_instance.py --data\_dir=data/A1 --window\_size 60 10 --anomaly\_score\_aggregation\_method=min --corr\_aggregation\_method=max`\| \|Global interpretation\|Run `notebooks/explain.py` as a jupyter notebook with `jupytext`\| \|Local interpretation\|`DejaVu/explanability/similar\_faults.py`\|  The commands would print a `one-line summary` in the end, including the following fields: `A@1`, `A@2`, `A@3`, `A@5`, `MAR`, `Time`, `Epoch`, `Valid Epoch`, `output\_dir`, `val\_loss`, `val\_MAR`, `val\_A@1`, `command`, `git\_commit\_url`, which are the desrired results.
14-1	1508-1511	Run	_	_
14-2	1512-1523	experiments	_	_
14-3	1524-1526	in	_	_
14-4	1527-1530	the	_	_
14-5	1531-1536	shell	_	_
14-6	1537-1539	of	_	_
14-7	1540-1543	the	_	_
14-8	1544-1550	Docker	_	_
14-9	1551-1560	container	_	_
14-10	1561-1570	following	_	_
14-11	1571-1574	the	_	_
14-12	1575-1580	usage	_	_
14-13	1581-1586	table	_	_
14-14	1587-1589	as	_	_
14-15	1590-1597	follows	_	_
14-16	1597-1598	.	_	_
14-17	1601-1602	#	_	_
14-18	1602-1603	#	_	_
14-19	1603-1604	#	_	_
14-20	1605-1610	Usage	_	_
14-21	1611-1612	\|	_	_
14-22	1612-1621	Algorithm	_	_
14-23	1621-1622	\|	_	_
14-24	1622-1627	Usage	_	_
14-25	1627-1628	\|	_	_
14-26	1629-1630	\|	_	_
14-27	1630-1631	-	_	_
14-28	1631-1632	-	_	_
14-29	1632-1633	-	_	_
14-30	1633-1634	\|	_	_
14-31	1634-1635	-	_	_
14-32	1635-1636	-	_	_
14-33	1636-1637	-	_	_
14-34	1637-1638	\|	_	_
14-35	1639-1640	\|	_	_
14-36	1640-1646	DejaVu	_	_
14-37	1646-1647	\|	_	_
14-38	1647-1650	Run	_	_
14-39	1651-1654	for	_	_
14-40	1655-1662	dataset	_	_
14-41	1663-1665	A1	_	_
14-42	1665-1666	:	_	_
14-43	1667-1668	`	_	_
14-44	1668-1674	python	_	_
14-45	1675-1678	exp	_	_
14-46	1678-1679	/	_	_
14-47	1679-1709	run\_GAT\_node\_classification.py	_	_
14-48	1710-1711	-	_	_
14-49	1711-1712	H	_	_
14-50	1712-1713	=	_	_
14-51	1713-1714	4	_	_
14-52	1715-1716	-	_	_
14-53	1716-1717	L	_	_
14-54	1717-1718	=	_	_
14-55	1718-1719	8	_	_
14-56	1720-1721	-	_	_
14-57	1721-1723	fe	_	_
14-58	1723-1724	=	_	_
14-59	1724-1727	GRU	_	_
14-60	1728-1729	-	_	_
14-61	1729-1732	bal	_	_
14-62	1732-1733	=	_	_
14-63	1733-1737	True	_	_
14-64	1738-1739	-	_	_
14-65	1739-1740	-	_	_
14-66	1740-1748	data\_dir	_	_
14-67	1748-1749	=	_	_
14-68	1749-1753	data	_	_
14-69	1753-1754	/	_	_
14-70	1754-1756	A1	_	_
14-71	1756-1757	`	_	_
14-72	1757-1758	\|	_	_
14-73	1759-1760	\|	_	_
14-74	1760-1763	JSS	_	_
14-75	1763-1764	'	_	_
14-76	1764-1766	20	_	_
14-77	1766-1767	\|	_	_
14-78	1767-1770	Run	_	_
14-79	1771-1774	for	_	_
14-80	1775-1782	dataset	_	_
14-81	1783-1785	A1	_	_
14-82	1785-1786	:	_	_
14-83	1787-1788	`	_	_
14-84	1788-1794	python	_	_
14-85	1795-1798	exp	_	_
14-86	1798-1799	/	_	_
14-87	1799-1805	DejaVu	_	_
14-88	1805-1806	/	_	_
14-89	1806-1815	run\_JSS20	_	_
14-90	1815-1816	.	_	_
14-91	1816-1818	py	_	_
14-92	1819-1820	-	_	_
14-93	1820-1821	-	_	_
14-94	1821-1829	data\_dir	_	_
14-95	1829-1830	=	_	_
14-96	1830-1834	data	_	_
14-97	1834-1835	/	_	_
14-98	1835-1837	A1	_	_
14-99	1837-1838	`	_	_
14-100	1838-1839	\|	_	_
14-101	1840-1841	\|	_	_
14-102	1841-1847	iSQUAD	_	_
14-103	1847-1848	\|	_	_
14-104	1848-1851	Run	_	_
14-105	1852-1855	for	_	_
14-106	1856-1863	dataset	_	_
14-107	1864-1866	A1	_	_
14-108	1866-1867	:	_	_
14-109	1868-1869	`	_	_
14-110	1869-1875	python	_	_
14-111	1876-1879	exp	_	_
14-112	1879-1880	/	_	_
14-113	1880-1886	DejaVu	_	_
14-114	1886-1887	/	_	_
14-115	1887-1897	run\_iSQ.py	_	_
14-116	1898-1899	-	_	_
14-117	1899-1900	-	_	_
14-118	1900-1908	data\_dir	_	_
14-119	1908-1909	=	_	_
14-120	1909-1913	data	_	_
14-121	1913-1914	/	_	_
14-122	1914-1916	A1	_	_
14-123	1916-1917	`	_	_
14-124	1917-1918	\|	_	_
14-125	1919-1920	\|	_	_
14-126	1920-1928	Decision	_	_
14-127	1929-1933	Tree	_	_
14-128	1933-1934	\|	_	_
14-129	1934-1937	Run	_	_
14-130	1938-1941	for	_	_
14-131	1942-1949	dataset	_	_
14-132	1950-1952	A1	_	_
14-133	1952-1953	:	_	_
14-134	1954-1955	`	_	_
14-135	1955-1961	python	_	_
14-136	1962-1965	exp	_	_
14-137	1965-1966	/	_	_
14-138	1966-1995	run\_DT\_node\_classification.py	_	_
14-139	1996-1997	-	_	_
14-140	1997-1998	-	_	_
14-141	1998-2006	data\_dir	_	_
14-142	2006-2007	=	_	_
14-143	2007-2011	data	_	_
14-144	2011-2012	/	_	_
14-145	2012-2014	A1	_	_
14-146	2014-2015	`	_	_
14-147	2015-2016	\|	_	_
14-148	2017-2018	\|	_	_
14-149	2018-2028	RandomWalk	_	_
14-150	2028-2029	@	_	_
14-151	2029-2035	Metric	_	_
14-152	2035-2036	\|	_	_
14-153	2036-2039	Run	_	_
14-154	2040-2043	for	_	_
14-155	2044-2051	dataset	_	_
14-156	2052-2054	A1	_	_
14-157	2054-2055	:	_	_
14-158	2056-2057	`	_	_
14-159	2057-2063	python	_	_
14-160	2064-2067	exp	_	_
14-161	2067-2068	/	_	_
14-162	2068-2074	DejaVu	_	_
14-163	2074-2075	/	_	_
14-164	2075-2107	run\_random\_walk\_single\_metric.py	_	_
14-165	2108-2109	-	_	_
14-166	2109-2110	-	_	_
14-167	2110-2118	data\_dir	_	_
14-168	2118-2119	=	_	_
14-169	2119-2123	data	_	_
14-170	2123-2124	/	_	_
14-171	2124-2126	A1	_	_
14-172	2127-2128	-	_	_
14-173	2128-2129	-	_	_
14-174	2129-2140	window\_size	_	_
14-175	2141-2143	60	_	_
14-176	2144-2146	10	_	_
14-177	2147-2148	-	_	_
14-178	2148-2149	-	_	_
14-179	2149-2173	score\_aggregation\_method	_	_
14-180	2173-2174	=	_	_
14-181	2174-2177	min	_	_
14-182	2177-2178	`	_	_
14-183	2178-2179	\|	_	_
14-184	2180-2181	\|	_	_
14-185	2181-2191	RandomWalk	_	_
14-186	2191-2192	@	_	_
14-187	2192-2194	FI	_	_
14-188	2194-2195	\|	_	_
14-189	2195-2198	Run	_	_
14-190	2199-2202	for	_	_
14-191	2203-2210	dataset	_	_
14-192	2211-2213	A1	_	_
14-193	2213-2214	:	_	_
14-194	2215-2216	`	_	_
14-195	2216-2222	python	_	_
14-196	2223-2226	exp	_	_
14-197	2226-2227	/	_	_
14-198	2227-2233	DejaVu	_	_
14-199	2233-2234	/	_	_
14-200	2234-2269	run\_random\_walk\_failure\_instance.py	_	_
14-201	2270-2271	-	_	_
14-202	2271-2272	-	_	_
14-203	2272-2280	data\_dir	_	_
14-204	2280-2281	=	_	_
14-205	2281-2285	data	_	_
14-206	2285-2286	/	_	_
14-207	2286-2288	A1	_	_
14-208	2289-2290	-	_	_
14-209	2290-2291	-	_	_
14-210	2291-2302	window\_size	_	_
14-211	2303-2305	60	_	_
14-212	2306-2308	10	_	_
14-213	2309-2310	-	_	_
14-214	2310-2311	-	_	_
14-215	2311-2343	anomaly\_score\_aggregation\_method	_	_
14-216	2343-2344	=	_	_
14-217	2344-2347	min	_	_
14-218	2348-2349	-	_	_
14-219	2349-2350	-	_	_
14-220	2350-2373	corr\_aggregation\_method	_	_
14-221	2373-2374	=	_	_
14-222	2374-2377	max	_	_
14-223	2377-2378	`	_	_
14-224	2378-2379	\|	_	_
14-225	2380-2381	\|	_	_
14-226	2381-2387	Global	_	_
14-227	2388-2402	interpretation	_	_
14-228	2402-2403	\|	_	_
14-229	2403-2406	Run	_	_
14-230	2407-2408	`	_	_
14-231	2408-2417	notebooks	_	_
14-232	2417-2418	/	_	_
14-233	2418-2428	explain.py	_	_
14-234	2428-2429	`	_	_
14-235	2430-2432	as	_	_
14-236	2433-2434	a	_	_
14-237	2435-2442	jupyter	_	_
14-238	2443-2451	notebook	_	_
14-239	2452-2456	with	_	_
14-240	2457-2458	`	_	_
14-241	2458-2466	jupytext	_	_
14-242	2466-2467	`	_	_
14-243	2467-2468	\|	_	_
14-244	2469-2470	\|	_	_
14-245	2470-2475	Local	_	_
14-246	2476-2490	interpretation	_	_
14-247	2490-2491	\|	_	_
14-248	2491-2492	`	_	_
14-249	2492-2498	DejaVu	_	_
14-250	2498-2499	/	_	_
14-251	2499-2512	explanability	_	_
14-252	2512-2513	/	_	_
14-253	2513-2530	similar\_faults.py	_	_
14-254	2530-2531	`	_	_
14-255	2531-2532	\|	_	_
14-256	2534-2537	The	_	_
14-257	2538-2546	commands	_	_
14-258	2547-2552	would	_	_
14-259	2553-2558	print	_	_
14-260	2559-2560	a	_	_
14-261	2561-2562	`	_	_
14-262	2562-2570	one-line	_	_
14-263	2571-2578	summary	_	_
14-264	2578-2579	`	_	_
14-265	2580-2582	in	_	_
14-266	2583-2586	the	_	_
14-267	2587-2590	end	_	_
14-268	2590-2591	,	_	_
14-269	2592-2601	including	_	_
14-270	2602-2605	the	_	_
14-271	2606-2615	following	_	_
14-272	2616-2622	fields	_	_
14-273	2622-2623	:	_	_
14-274	2624-2625	`	_	_
14-275	2625-2626	A	_	_
14-276	2626-2627	@	_	_
14-277	2627-2628	1	_	_
14-278	2628-2629	`	_	_
14-279	2629-2630	,	_	_
14-280	2631-2632	`	_	_
14-281	2632-2633	A	_	_
14-282	2633-2634	@	_	_
14-283	2634-2635	2	_	_
14-284	2635-2636	`	_	_
14-285	2636-2637	,	_	_
14-286	2638-2639	`	_	_
14-287	2639-2640	A	_	_
14-288	2640-2641	@	_	_
14-289	2641-2642	3	_	_
14-290	2642-2643	`	_	_
14-291	2643-2644	,	_	_
14-292	2645-2646	`	_	_
14-293	2646-2647	A	_	_
14-294	2647-2648	@	_	_
14-295	2648-2649	5	_	_
14-296	2649-2650	`	_	_
14-297	2650-2651	,	_	_
14-298	2652-2653	`	_	_
14-299	2653-2656	MAR	_	_
14-300	2656-2657	`	_	_
14-301	2657-2658	,	_	_
14-302	2659-2660	`	_	_
14-303	2660-2664	Time	_	_
14-304	2664-2665	`	_	_
14-305	2665-2666	,	_	_
14-306	2667-2668	`	_	_
14-307	2668-2673	Epoch	_	_
14-308	2673-2674	`	_	_
14-309	2674-2675	,	_	_
14-310	2676-2677	`	_	_
14-311	2677-2682	Valid	_	_
14-312	2683-2688	Epoch	_	_
14-313	2688-2689	`	_	_
14-314	2689-2690	,	_	_
14-315	2691-2692	`	_	_
14-316	2692-2702	output\_dir	_	_
14-317	2702-2703	`	_	_
14-318	2703-2704	,	_	_
14-319	2705-2706	`	_	_
14-320	2706-2714	val\_loss	_	_
14-321	2714-2715	`	_	_
14-322	2715-2716	,	_	_
14-323	2717-2718	`	_	_
14-324	2718-2725	val\_MAR	_	_
14-325	2725-2726	`	_	_
14-326	2726-2727	,	_	_
14-327	2728-2729	`	_	_
14-328	2729-2734	val\_A	_	_
14-329	2734-2735	@	_	_
14-330	2735-2736	1	_	_
14-331	2736-2737	`	_	_
14-332	2737-2738	,	_	_
14-333	2739-2740	`	_	_
14-334	2740-2747	command	_	_
14-335	2747-2748	`	_	_
14-336	2748-2749	,	_	_
14-337	2750-2751	`	_	_
14-338	2751-2765	git\_commit\_url	_	_
14-339	2765-2766	`	_	_
14-340	2766-2767	,	_	_
14-341	2768-2773	which	_	_
14-342	2774-2777	are	_	_
14-343	2778-2781	the	_	_
14-344	2782-2790	desrired	_	_
14-345	2791-2798	results	_	_
14-346	2798-2799	.	_	_

#Text=Totally, the main experiment commands of DejaVu should output as follows: - FDG message, including the data paths, edge types, the number of nodes (failure units), the number of metrics, the metrics of each failure class. - Traning setup message: the faults used for training, validation and testing. - Model architecture: model parameters in each part, total params - Training process: the training/validation/testing loss and accuracy - Time Report. - command output one-line summary.  ### Example See https://github.com/NetManAIOps/DejaVu/issues/4  ## Datasets  The datasets A, B, C, D are public at : - https://www.dropbox.com/sh/ist4ojr03e2oeuw/AAD5NkpAFg1nOI2Ttug3h2qja?
15-1	2801-2808	Totally	_	_
15-2	2808-2809	,	_	_
15-3	2810-2813	the	_	_
15-4	2814-2818	main	_	_
15-5	2819-2829	experiment	_	_
15-6	2830-2838	commands	_	_
15-7	2839-2841	of	_	_
15-8	2842-2848	DejaVu	_	_
15-9	2849-2855	should	_	_
15-10	2856-2862	output	_	_
15-11	2863-2865	as	_	_
15-12	2866-2873	follows	_	_
15-13	2873-2874	:	_	_
15-14	2875-2876	-	_	_
15-15	2877-2880	FDG	_	_
15-16	2881-2888	message	_	_
15-17	2888-2889	,	_	_
15-18	2890-2899	including	_	_
15-19	2900-2903	the	_	_
15-20	2904-2908	data	_	_
15-21	2909-2914	paths	_	_
15-22	2914-2915	,	_	_
15-23	2916-2920	edge	_	_
15-24	2921-2926	types	_	_
15-25	2926-2927	,	_	_
15-26	2928-2931	the	_	_
15-27	2932-2938	number	_	_
15-28	2939-2941	of	_	_
15-29	2942-2947	nodes	_	_
15-30	2948-2949	(	_	_
15-31	2949-2956	failure	_	_
15-32	2957-2962	units	_	_
15-33	2962-2963	)	_	_
15-34	2963-2964	,	_	_
15-35	2965-2968	the	_	_
15-36	2969-2975	number	_	_
15-37	2976-2978	of	_	_
15-38	2979-2986	metrics	_	_
15-39	2986-2987	,	_	_
15-40	2988-2991	the	_	_
15-41	2992-2999	metrics	_	_
15-42	3000-3002	of	_	_
15-43	3003-3007	each	_	_
15-44	3008-3015	failure	_	_
15-45	3016-3021	class	_	_
15-46	3021-3022	.	_	_
15-47	3023-3024	-	_	_
15-48	3025-3032	Traning	_	_
15-49	3033-3038	setup	_	_
15-50	3039-3046	message	_	_
15-51	3046-3047	:	_	_
15-52	3048-3051	the	_	_
15-53	3052-3058	faults	_	_
15-54	3059-3063	used	_	_
15-55	3064-3067	for	_	_
15-56	3068-3076	training	_	_
15-57	3076-3077	,	_	_
15-58	3078-3088	validation	_	_
15-59	3089-3092	and	_	_
15-60	3093-3100	testing	_	_
15-61	3100-3101	.	_	_
15-62	3102-3103	-	_	_
15-63	3104-3109	Model	_	_
15-64	3110-3122	architecture	_	_
15-65	3122-3123	:	_	_
15-66	3124-3129	model	_	_
15-67	3130-3140	parameters	_	_
15-68	3141-3143	in	_	_
15-69	3144-3148	each	_	_
15-70	3149-3153	part	_	_
15-71	3153-3154	,	_	_
15-72	3155-3160	total	_	_
15-73	3161-3167	params	_	_
15-74	3168-3169	-	_	_
15-75	3170-3178	Training	_	_
15-76	3179-3186	process	_	_
15-77	3186-3187	:	_	_
15-78	3188-3191	the	_	_
15-79	3192-3200	training	_	_
15-80	3200-3201	/	_	_
15-81	3201-3211	validation	_	_
15-82	3211-3212	/	_	_
15-83	3212-3219	testing	_	_
15-84	3220-3224	loss	_	_
15-85	3225-3228	and	_	_
15-86	3229-3237	accuracy	_	_
15-87	3238-3239	-	_	_
15-88	3240-3244	Time	_	_
15-89	3245-3251	Report	_	_
15-90	3251-3252	.	_	_
15-91	3253-3254	-	_	_
15-92	3255-3262	command	_	_
15-93	3263-3269	output	_	_
15-94	3270-3278	one-line	_	_
15-95	3279-3286	summary	_	_
15-96	3286-3287	.	_	_
15-97	3289-3290	#	_	_
15-98	3290-3291	#	_	_
15-99	3291-3292	#	_	_
15-100	3293-3300	Example	_	_
15-101	3301-3304	See	_	_
15-102	3305-3310	https	_	_
15-103	3310-3311	:	_	_
15-104	3311-3312	/	_	_
15-105	3312-3313	/	_	_
15-106	3313-3323	github.com	_	_
15-107	3323-3324	/	_	_
15-108	3324-3335	NetManAIOps	_	_
15-109	3335-3336	/	_	_
15-110	3336-3342	DejaVu	_	_
15-111	3342-3343	/	_	_
15-112	3343-3349	issues	_	_
15-113	3349-3350	/	_	_
15-114	3350-3351	4	_	_
15-115	3353-3354	#	_	_
15-116	3354-3355	#	_	_
15-117	3356-3364	Datasets	_	_
15-118	3366-3369	The	_	_
15-119	3370-3378	datasets	_	_
15-120	3379-3380	A	_	_
15-121	3380-3381	,	_	_
15-122	3382-3383	B	_	_
15-123	3383-3384	,	_	_
15-124	3385-3386	C	_	_
15-125	3386-3387	,	_	_
15-126	3388-3389	D	_	_
15-127	3390-3393	are	_	_
15-128	3394-3400	public	_	_
15-129	3401-3403	at	_	_
15-130	3404-3405	:	_	_
15-131	3406-3407	-	_	_
15-132	3408-3413	https	_	_
15-133	3413-3414	:	_	_
15-134	3414-3415	/	_	_
15-135	3415-3416	/	_	_
15-136	3416-3431	www.dropbox.com	_	_
15-137	3431-3432	/	_	_
15-138	3432-3434	sh	_	_
15-139	3434-3435	/	_	_
15-140	3435-3450	ist4ojr03e2oeuw	_	_
15-141	3450-3451	/	_	_
15-142	3451-3476	AAD5NkpAFg1nOI2Ttug3h2qja	_	_
15-143	3476-3477	?	_	_

#Text=dl=0 - https://doi.org/10.5281/zenodo.6955909 (including the raw data of the Train-Ticket dataset) In each dataset, `graph.yml` or `graphs/\*.yml` are FDGs, `metrics.csv` is metrics, and `faults.csv` is failures (including ground truths).
16-1	3477-3479	dl	_	_
16-2	3479-3480	=	_	_
16-3	3480-3481	0	_	_
16-4	3482-3483	-	_	_
16-5	3484-3489	https	_	_
16-6	3489-3490	:	_	_
16-7	3490-3491	/	_	_
16-8	3491-3492	/	_	_
16-9	3492-3499	doi.org	_	_
16-10	3499-3500	/	_	_
16-11	3500-3507	10.5281	_	_
16-12	3507-3508	/	_	_
16-13	3508-3514	zenodo	_	_
16-14	3514-3522	.6955909	_	_
16-15	3523-3524	(	_	_
16-16	3524-3533	including	_	_
16-17	3534-3537	the	_	_
16-18	3538-3541	raw	_	_
16-19	3542-3546	data	_	_
16-20	3547-3549	of	_	_
16-21	3550-3553	the	_	_
16-22	3554-3566	Train-Ticket	_	_
16-23	3567-3574	dataset	_	_
16-24	3574-3575	)	_	_
16-25	3576-3578	In	_	_
16-26	3579-3583	each	_	_
16-27	3584-3591	dataset	_	_
16-28	3591-3592	,	_	_
16-29	3593-3594	`	_	_
16-30	3594-3603	graph.yml	_	_
16-31	3603-3604	`	_	_
16-32	3605-3607	or	_	_
16-33	3608-3609	`	_	_
16-34	3609-3615	graphs	_	_
16-35	3615-3616	/	_	_
16-36	3616-3617	\*	_	_
16-37	3617-3618	.	_	_
16-38	3618-3621	yml	_	_
16-39	3621-3622	`	_	_
16-40	3623-3626	are	_	_
16-41	3627-3631	FDGs	_	_
16-42	3631-3632	,	_	_
16-43	3633-3634	`	_	_
16-44	3634-3645	metrics.csv	_	_
16-45	3645-3646	`	_	_
16-46	3647-3649	is	_	_
16-47	3650-3657	metrics	_	_
16-48	3657-3658	,	_	_
16-49	3659-3662	and	_	_
16-50	3663-3664	`	_	_
16-51	3664-3674	faults.csv	_	_
16-52	3674-3675	`	_	_
16-53	3676-3678	is	_	_
16-54	3679-3687	failures	_	_
16-55	3688-3689	(	_	_
16-56	3689-3698	including	_	_
16-57	3699-3705	ground	_	_
16-58	3706-3712	truths	_	_
16-59	3712-3713	)	_	_
16-60	3713-3714	.	_	_

#Text=`FDG.pkl` is a pickle of the FDG object, which contains all the above data.
17-1	3715-3716	`	_	_
17-2	3716-3723	FDG.pkl	_	_
17-3	3723-3724	`	_	_
17-4	3725-3727	is	_	_
17-5	3728-3729	a	_	_
17-6	3730-3736	pickle	_	_
17-7	3737-3739	of	_	_
17-8	3740-3743	the	_	_
17-9	3744-3747	FDG	_	_
17-10	3748-3754	object	_	_
17-11	3754-3755	,	_	_
17-12	3756-3761	which	_	_
17-13	3762-3770	contains	_	_
17-14	3771-3774	all	_	_
17-15	3775-3778	the	_	_
17-16	3779-3784	above	_	_
17-17	3785-3789	data	_	_
17-18	3789-3790	.	_	_

#Text=Note that the pickle files are not compatible in different Python and Pandas versions.
18-1	3791-3795	Note	_	_
18-2	3796-3800	that	_	_
18-3	3801-3804	the	_	_
18-4	3805-3811	pickle	_	_
18-5	3812-3817	files	_	_
18-6	3818-3821	are	_	_
18-7	3822-3825	not	_	_
18-8	3826-3836	compatible	_	_
18-9	3837-3839	in	_	_
18-10	3840-3849	different	_	_
18-11	3850-3856	Python	_	_
18-12	3857-3860	and	_	_
18-13	3861-3867	Pandas	_	_
18-14	3868-3876	versions	_	_
18-15	3876-3877	.	_	_

#Text=So if you cannot load the pickles, just ignore and delete them.
19-1	3878-3880	So	_	_
19-2	3881-3883	if	_	_
19-3	3884-3887	you	_	_
19-4	3888-3894	cannot	_	_
19-5	3895-3899	load	_	_
19-6	3900-3903	the	_	_
19-7	3904-3911	pickles	_	_
19-8	3911-3912	,	_	_
19-9	3913-3917	just	_	_
19-10	3918-3924	ignore	_	_
19-11	3925-3928	and	_	_
19-12	3929-3935	delete	_	_
19-13	3936-3940	them	_	_
19-14	3940-3941	.	_	_

#Text=They are only used to speed up data load.  ## Deployment and Failure Injection Scripts of Train-Ticket https://github.com/lizeyan/train-ticket  ## Citation ``` bibtex @inproceedings{li2022actionable,   title = {Actionable and Interpretable Fault Localization for Recurring Failures in Online Service Systems},   booktitle = {Proceedings of the 2022 30th {{ACM Joint Meeting}} on {{European Software Engineering Conference}} and {{Symposium}} on the {{Foundations}} of {{Software Engineering}}},   author = {Li, Zeyan and Zhao, Nengwen and Li, Mingjie and Lu, Xianglin and Wang, Lixin and Chang, Dongdong and Nie, Xiaohui and Cao, Li and Zhang, Wenchi and Sui, Kaixin and Wang, Yanhua and Du, Xu and Duan, Guoqing and Pei, Dan},   year = {2022},   month = nov,   series = {{{ESEC}}/{{FSE}} 2022} } ```  ## Supplementary details ### Local interpretation !
20-1	3942-3946	They	_	_
20-2	3947-3950	are	_	_
20-3	3951-3955	only	_	_
20-4	3956-3960	used	_	_
20-5	3961-3963	to	_	_
20-6	3964-3969	speed	_	_
20-7	3970-3972	up	_	_
20-8	3973-3977	data	_	_
20-9	3978-3982	load	_	_
20-10	3982-3983	.	_	_
20-11	3985-3986	#	_	_
20-12	3986-3987	#	_	_
20-13	3988-3998	Deployment	_	_
20-14	3999-4002	and	_	_
20-15	4003-4010	Failure	_	_
20-16	4011-4020	Injection	_	_
20-17	4021-4028	Scripts	_	_
20-18	4029-4031	of	_	_
20-19	4032-4044	Train-Ticket	_	_
20-20	4045-4050	https	_	_
20-21	4050-4051	:	_	_
20-22	4051-4052	/	_	_
20-23	4052-4053	/	_	_
20-24	4053-4063	github.com	_	_
20-25	4063-4064	/	_	_
20-26	4064-4071	lizeyan	_	_
20-27	4071-4072	/	_	_
20-28	4072-4084	train-ticket	_	_
20-29	4086-4087	#	_	_
20-30	4087-4088	#	_	_
20-31	4089-4097	Citation	_	_
20-32	4098-4099	`	_	_
20-33	4099-4100	`	_	_
20-34	4100-4101	`	_	_
20-35	4102-4108	bibtex	_	_
20-36	4109-4110	@	_	_
20-37	4110-4123	inproceedings	_	_
20-38	4123-4124	{	_	_
20-39	4124-4140	li2022actionable	_	_
20-40	4140-4141	,	_	_
20-41	4144-4149	title	_	_
20-42	4150-4151	=	_	_
20-43	4152-4153	{	_	_
20-44	4153-4163	Actionable	_	_
20-45	4164-4167	and	_	_
20-46	4168-4181	Interpretable	_	_
20-47	4182-4187	Fault	_	_
20-48	4188-4200	Localization	_	_
20-49	4201-4204	for	_	_
20-50	4205-4214	Recurring	_	_
20-51	4215-4223	Failures	_	_
20-52	4224-4226	in	_	_
20-53	4227-4233	Online	_	_
20-54	4234-4241	Service	_	_
20-55	4242-4249	Systems	_	_
20-56	4249-4250	}	_	_
20-57	4250-4251	,	_	_
20-58	4254-4263	booktitle	_	_
20-59	4264-4265	=	_	_
20-60	4266-4267	{	_	_
20-61	4267-4278	Proceedings	_	_
20-62	4279-4281	of	_	_
20-63	4282-4285	the	_	_
20-64	4286-4290	2022	_	_
20-65	4291-4295	30th	_	_
20-66	4296-4297	{	_	_
20-67	4297-4298	{	_	_
20-68	4298-4301	ACM	_	_
20-69	4302-4307	Joint	_	_
20-70	4308-4315	Meeting	_	_
20-71	4315-4316	}	_	_
20-72	4316-4317	}	_	_
20-73	4318-4320	on	_	_
20-74	4321-4322	{	_	_
20-75	4322-4323	{	_	_
20-76	4323-4331	European	_	_
20-77	4332-4340	Software	_	_
20-78	4341-4352	Engineering	_	_
20-79	4353-4363	Conference	_	_
20-80	4363-4364	}	_	_
20-81	4364-4365	}	_	_
20-82	4366-4369	and	_	_
20-83	4370-4371	{	_	_
20-84	4371-4372	{	_	_
20-85	4372-4381	Symposium	_	_
20-86	4381-4382	}	_	_
20-87	4382-4383	}	_	_
20-88	4384-4386	on	_	_
20-89	4387-4390	the	_	_
20-90	4391-4392	{	_	_
20-91	4392-4393	{	_	_
20-92	4393-4404	Foundations	_	_
20-93	4404-4405	}	_	_
20-94	4405-4406	}	_	_
20-95	4407-4409	of	_	_
20-96	4410-4411	{	_	_
20-97	4411-4412	{	_	_
20-98	4412-4420	Software	_	_
20-99	4421-4432	Engineering	_	_
20-100	4432-4433	}	_	_
20-101	4433-4434	}	_	_
20-102	4434-4435	}	_	_
20-103	4435-4436	,	_	_
20-104	4439-4445	author	_	_
20-105	4446-4447	=	_	_
20-106	4448-4449	{	_	_
20-107	4449-4451	Li	_	_
20-108	4451-4452	,	_	_
20-109	4453-4458	Zeyan	_	_
20-110	4459-4462	and	_	_
20-111	4463-4467	Zhao	_	_
20-112	4467-4468	,	_	_
20-113	4469-4476	Nengwen	_	_
20-114	4477-4480	and	_	_
20-115	4481-4483	Li	_	_
20-116	4483-4484	,	_	_
20-117	4485-4492	Mingjie	_	_
20-118	4493-4496	and	_	_
20-119	4497-4499	Lu	_	_
20-120	4499-4500	,	_	_
20-121	4501-4509	Xianglin	_	_
20-122	4510-4513	and	_	_
20-123	4514-4518	Wang	_	_
20-124	4518-4519	,	_	_
20-125	4520-4525	Lixin	_	_
20-126	4526-4529	and	_	_
20-127	4530-4535	Chang	_	_
20-128	4535-4536	,	_	_
20-129	4537-4545	Dongdong	_	_
20-130	4546-4549	and	_	_
20-131	4550-4553	Nie	_	_
20-132	4553-4554	,	_	_
20-133	4555-4562	Xiaohui	_	_
20-134	4563-4566	and	_	_
20-135	4567-4570	Cao	_	_
20-136	4570-4571	,	_	_
20-137	4572-4574	Li	_	_
20-138	4575-4578	and	_	_
20-139	4579-4584	Zhang	_	_
20-140	4584-4585	,	_	_
20-141	4586-4592	Wenchi	_	_
20-142	4593-4596	and	_	_
20-143	4597-4600	Sui	_	_
20-144	4600-4601	,	_	_
20-145	4602-4608	Kaixin	_	_
20-146	4609-4612	and	_	_
20-147	4613-4617	Wang	_	_
20-148	4617-4618	,	_	_
20-149	4619-4625	Yanhua	_	_
20-150	4626-4629	and	_	_
20-151	4630-4632	Du	_	_
20-152	4632-4633	,	_	_
20-153	4634-4636	Xu	_	_
20-154	4637-4640	and	_	_
20-155	4641-4645	Duan	_	_
20-156	4645-4646	,	_	_
20-157	4647-4654	Guoqing	_	_
20-158	4655-4658	and	_	_
20-159	4659-4662	Pei	_	_
20-160	4662-4663	,	_	_
20-161	4664-4667	Dan	_	_
20-162	4667-4668	}	_	_
20-163	4668-4669	,	_	_
20-164	4672-4676	year	_	_
20-165	4677-4678	=	_	_
20-166	4679-4680	{	_	_
20-167	4680-4684	2022	_	_
20-168	4684-4685	}	_	_
20-169	4685-4686	,	_	_
20-170	4689-4694	month	_	_
20-171	4695-4696	=	_	_
20-172	4697-4700	nov	_	_
20-173	4700-4701	,	_	_
20-174	4704-4710	series	_	_
20-175	4711-4712	=	_	_
20-176	4713-4714	{	_	_
20-177	4714-4715	{	_	_
20-178	4715-4716	{	_	_
20-179	4716-4720	ESEC	_	_
20-180	4720-4721	}	_	_
20-181	4721-4722	}	_	_
20-182	4722-4723	/	_	_
20-183	4723-4724	{	_	_
20-184	4724-4725	{	_	_
20-185	4725-4728	FSE	_	_
20-186	4728-4729	}	_	_
20-187	4729-4730	}	_	_
20-188	4731-4735	2022	_	_
20-189	4735-4736	}	_	_
20-190	4737-4738	}	_	_
20-191	4739-4740	`	_	_
20-192	4740-4741	`	_	_
20-193	4741-4742	`	_	_
20-194	4744-4745	#	_	_
20-195	4745-4746	#	_	_
20-196	4747-4760	Supplementary	_	_
20-197	4761-4768	details	_	_
20-198	4769-4770	#	_	_
20-199	4770-4771	#	_	_
20-200	4771-4772	#	_	_
20-201	4773-4778	Local	_	_
20-202	4779-4793	interpretation	_	_
20-203	4794-4795	!	_	_

#Text=\[local interpretation\](figures/local\_interpretation.png)   Since the DejaVu model is trained with historical failures, it is straightforward to interpret how it diagnoses a given failure by figuring out from which historical failures it learns to localize the root causes.
21-1	4795-4796	\[	_	_
21-2	4796-4801	local	_	_
21-3	4802-4816	interpretation	_	_
21-4	4816-4817	\]	_	_
21-5	4817-4818	(	_	_
21-6	4818-4825	figures	_	_
21-7	4825-4826	/	_	_
21-8	4826-4850	local\_interpretation.png	_	_
21-9	4850-4851	)	_	_
21-10	4854-4859	Since	_	_
21-11	4860-4863	the	_	_
21-12	4864-4870	DejaVu	_	_
21-13	4871-4876	model	_	_
21-14	4877-4879	is	_	_
21-15	4880-4887	trained	_	_
21-16	4888-4892	with	_	_
21-17	4893-4903	historical	_	_
21-18	4904-4912	failures	_	_
21-19	4912-4913	,	_	_
21-20	4914-4916	it	_	_
21-21	4917-4919	is	_	_
21-22	4920-4935	straightforward	_	_
21-23	4936-4938	to	_	_
21-24	4939-4948	interpret	_	_
21-25	4949-4952	how	_	_
21-26	4953-4955	it	_	_
21-27	4956-4965	diagnoses	_	_
21-28	4966-4967	a	_	_
21-29	4968-4973	given	_	_
21-30	4974-4981	failure	_	_
21-31	4982-4984	by	_	_
21-32	4985-4993	figuring	_	_
21-33	4994-4997	out	_	_
21-34	4998-5002	from	_	_
21-35	5003-5008	which	_	_
21-36	5009-5019	historical	_	_
21-37	5020-5028	failures	_	_
21-38	5029-5031	it	_	_
21-39	5032-5038	learns	_	_
21-40	5039-5041	to	_	_
21-41	5042-5050	localize	_	_
21-42	5051-5054	the	_	_
21-43	5055-5059	root	_	_
21-44	5060-5066	causes	_	_
21-45	5066-5067	.	_	_

#Text=Therefore, we propose a pairwise failure similarity function based on the aggregated features extracted by the DejaVu model.
22-1	5068-5077	Therefore	_	_
22-2	5077-5078	,	_	_
22-3	5079-5081	we	_	_
22-4	5082-5089	propose	_	_
22-5	5090-5091	a	_	_
22-6	5092-5100	pairwise	_	_
22-7	5101-5108	failure	_	_
22-8	5109-5119	similarity	_	_
22-9	5120-5128	function	_	_
22-10	5129-5134	based	_	_
22-11	5135-5137	on	_	_
22-12	5138-5141	the	_	_
22-13	5142-5152	aggregated	_	_
22-14	5153-5161	features	_	_
22-15	5162-5171	extracted	_	_
22-16	5172-5174	by	_	_
22-17	5175-5178	the	_	_
22-18	5179-5185	DejaVu	_	_
22-19	5186-5191	model	_	_
22-20	5191-5192	.	_	_

#Text=Compared with raw metrics, the extracted features are of much lower dimension and contain little useless information, which the DejaVu model ignores.
23-1	5193-5201	Compared	_	_
23-2	5202-5206	with	_	_
23-3	5207-5210	raw	_	_
23-4	5211-5218	metrics	_	_
23-5	5218-5219	,	_	_
23-6	5220-5223	the	_	_
23-7	5224-5233	extracted	_	_
23-8	5234-5242	features	_	_
23-9	5243-5246	are	_	_
23-10	5247-5249	of	_	_
23-11	5250-5254	much	_	_
23-12	5255-5260	lower	_	_
23-13	5261-5270	dimension	_	_
23-14	5271-5274	and	_	_
23-15	5275-5282	contain	_	_
23-16	5283-5289	little	_	_
23-17	5290-5297	useless	_	_
23-18	5298-5309	information	_	_
23-19	5309-5310	,	_	_
23-20	5311-5316	which	_	_
23-21	5317-5320	the	_	_
23-22	5321-5327	DejaVu	_	_
23-23	5328-5333	model	_	_
23-24	5334-5341	ignores	_	_
23-25	5341-5342	.	_	_

#Text=However, computing failure similarity is not trivial due to the generalizability of DejaVu.
24-1	5343-5350	However	_	_
24-2	5350-5351	,	_	_
24-3	5352-5361	computing	_	_
24-4	5362-5369	failure	_	_
24-5	5370-5380	similarity	_	_
24-6	5381-5383	is	_	_
24-7	5384-5387	not	_	_
24-8	5388-5395	trivial	_	_
24-9	5396-5399	due	_	_
24-10	5400-5402	to	_	_
24-11	5403-5406	the	_	_
24-12	5407-5423	generalizability	_	_
24-13	5424-5426	of	_	_
24-14	5427-5433	DejaVu	_	_
24-15	5433-5434	.	_	_

#Text=For example, suppose that the features are $1$ for root-cause failure units and $0$ for other failure units and there are four failure units ($v\_1$, $v\_2$, $v\_3$, $v\_4$).
25-1	5435-5438	For	_	_
25-2	5439-5446	example	_	_
25-3	5446-5447	,	_	_
25-4	5448-5455	suppose	_	_
25-5	5456-5460	that	_	_
25-6	5461-5464	the	_	_
25-7	5465-5473	features	_	_
25-8	5474-5477	are	_	_
25-9	5478-5480	$1	_	_
25-10	5480-5481	$	_	_
25-11	5482-5485	for	_	_
25-12	5486-5496	root-cause	_	_
25-13	5497-5504	failure	_	_
25-14	5505-5510	units	_	_
25-15	5511-5514	and	_	_
25-16	5515-5517	$0	_	_
25-17	5517-5518	$	_	_
25-18	5519-5522	for	_	_
25-19	5523-5528	other	_	_
25-20	5529-5536	failure	_	_
25-21	5537-5542	units	_	_
25-22	5543-5546	and	_	_
25-23	5547-5552	there	_	_
25-24	5553-5556	are	_	_
25-25	5557-5561	four	_	_
25-26	5562-5569	failure	_	_
25-27	5570-5575	units	_	_
25-28	5576-5577	(	_	_
25-29	5577-5578	$	_	_
25-30	5578-5579	v	_	_
25-31	5579-5580	\_	_	_
25-32	5580-5581	1	_	_
25-33	5581-5582	$	_	_
25-34	5582-5583	,	_	_
25-35	5584-5585	$	_	_
25-36	5585-5586	v	_	_
25-37	5586-5587	\_	_	_
25-38	5587-5588	2	_	_
25-39	5588-5589	$	_	_
25-40	5589-5590	,	_	_
25-41	5591-5592	$	_	_
25-42	5592-5593	v	_	_
25-43	5593-5594	\_	_	_
25-44	5594-5595	3	_	_
25-45	5595-5596	$	_	_
25-46	5596-5597	,	_	_
25-47	5598-5599	$	_	_
25-48	5599-5600	v	_	_
25-49	5600-5601	\_	_	_
25-50	5601-5602	4	_	_
25-51	5602-5603	$	_	_
25-52	5603-5604	)	_	_
25-53	5604-5605	.	_	_

#Text=Then for two similar failures which occur at $v\_1$ and $v\_2$ respectively, their feature vectors are $(1, 0, 0, 0)$ and $(0, 1, 0, 0)$ respectively, which are dissimilar with respect to common similarity metrics (e.g., Manhattan or Euclidean).
26-1	5606-5610	Then	_	_
26-2	5611-5614	for	_	_
26-3	5615-5618	two	_	_
26-4	5619-5626	similar	_	_
26-5	5627-5635	failures	_	_
26-6	5636-5641	which	_	_
26-7	5642-5647	occur	_	_
26-8	5648-5650	at	_	_
26-9	5651-5652	$	_	_
26-10	5652-5653	v	_	_
26-11	5653-5654	\_	_	_
26-12	5654-5655	1	_	_
26-13	5655-5656	$	_	_
26-14	5657-5660	and	_	_
26-15	5661-5662	$	_	_
26-16	5662-5663	v	_	_
26-17	5663-5664	\_	_	_
26-18	5664-5665	2	_	_
26-19	5665-5666	$	_	_
26-20	5667-5679	respectively	_	_
26-21	5679-5680	,	_	_
26-22	5681-5686	their	_	_
26-23	5687-5694	feature	_	_
26-24	5695-5702	vectors	_	_
26-25	5703-5706	are	_	_
26-26	5707-5708	$	_	_
26-27	5708-5709	(	_	_
26-28	5709-5710	1	_	_
26-29	5710-5711	,	_	_
26-30	5712-5713	0	_	_
26-31	5713-5714	,	_	_
26-32	5715-5716	0	_	_
26-33	5716-5717	,	_	_
26-34	5718-5719	0	_	_
26-35	5719-5720	)	_	_
26-36	5720-5721	$	_	_
26-37	5722-5725	and	_	_
26-38	5726-5727	$	_	_
26-39	5727-5728	(	_	_
26-40	5728-5729	0	_	_
26-41	5729-5730	,	_	_
26-42	5731-5732	1	_	_
26-43	5732-5733	,	_	_
26-44	5734-5735	0	_	_
26-45	5735-5736	,	_	_
26-46	5737-5738	0	_	_
26-47	5738-5739	)	_	_
26-48	5739-5740	$	_	_
26-49	5741-5753	respectively	_	_
26-50	5753-5754	,	_	_
26-51	5755-5760	which	_	_
26-52	5761-5764	are	_	_
26-53	5765-5775	dissimilar	_	_
26-54	5776-5780	with	_	_
26-55	5781-5788	respect	_	_
26-56	5789-5791	to	_	_
26-57	5792-5798	common	_	_
26-58	5799-5809	similarity	_	_
26-59	5810-5817	metrics	_	_
26-60	5818-5819	(	_	_
26-61	5819-5822	e.g	_	_
26-62	5822-5823	.	_	_
26-63	5823-5824	,	_	_
26-64	5825-5834	Manhattan	_	_
26-65	5835-5837	or	_	_
26-66	5838-5847	Euclidean	_	_
26-67	5847-5848	)	_	_
26-68	5848-5849	.	_	_

#Text=To solve this problem, we calculate similarities based on failure classes rather than single failure units.
27-1	5852-5854	To	_	_
27-2	5855-5860	solve	_	_
27-3	5861-5865	this	_	_
27-4	5866-5873	problem	_	_
27-5	5873-5874	,	_	_
27-6	5875-5877	we	_	_
27-7	5878-5887	calculate	_	_
27-8	5888-5900	similarities	_	_
27-9	5901-5906	based	_	_
27-10	5907-5909	on	_	_
27-11	5910-5917	failure	_	_
27-12	5918-5925	classes	_	_
27-13	5926-5932	rather	_	_
27-14	5933-5937	than	_	_
27-15	5938-5944	single	_	_
27-16	5945-5952	failure	_	_
27-17	5953-5958	units	_	_
27-18	5958-5959	.	_	_

#Text=As shown in \\cref{fig:local-interpretation}, for each failure units at an in-coming failure $T\_1$, we compare it with each unit of the corresponding failure classes at a historical failure $T\_2$ and take the minimal similarity as its similarity to $T\_2$.
28-1	5960-5962	As	_	_
28-2	5963-5968	shown	_	_
28-3	5969-5971	in	_	_
28-4	5972-5973	\\	_	_
28-5	5973-5977	cref	_	_
28-6	5977-5978	{	_	_
28-7	5978-5981	fig	_	_
28-8	5981-5982	:	_	_
28-9	5982-6002	local-interpretation	_	_
28-10	6002-6003	}	_	_
28-11	6003-6004	,	_	_
28-12	6005-6008	for	_	_
28-13	6009-6013	each	_	_
28-14	6014-6021	failure	_	_
28-15	6022-6027	units	_	_
28-16	6028-6030	at	_	_
28-17	6031-6033	an	_	_
28-18	6034-6043	in-coming	_	_
28-19	6044-6051	failure	_	_
28-20	6052-6053	$	_	_
28-21	6053-6054	T	_	_
28-22	6054-6055	\_	_	_
28-23	6055-6056	1	_	_
28-24	6056-6057	$	_	_
28-25	6057-6058	,	_	_
28-26	6059-6061	we	_	_
28-27	6062-6069	compare	_	_
28-28	6070-6072	it	_	_
28-29	6073-6077	with	_	_
28-30	6078-6082	each	_	_
28-31	6083-6087	unit	_	_
28-32	6088-6090	of	_	_
28-33	6091-6094	the	_	_
28-34	6095-6108	corresponding	_	_
28-35	6109-6116	failure	_	_
28-36	6117-6124	classes	_	_
28-37	6125-6127	at	_	_
28-38	6128-6129	a	_	_
28-39	6130-6140	historical	_	_
28-40	6141-6148	failure	_	_
28-41	6149-6150	$	_	_
28-42	6150-6151	T	_	_
28-43	6151-6152	\_	_	_
28-44	6152-6153	2	_	_
28-45	6153-6154	$	_	_
28-46	6155-6158	and	_	_
28-47	6159-6163	take	_	_
28-48	6164-6167	the	_	_
28-49	6168-6175	minimal	_	_
28-50	6176-6186	similarity	_	_
28-51	6187-6189	as	_	_
28-52	6190-6193	its	_	_
28-53	6194-6204	similarity	_	_
28-54	6205-6207	to	_	_
28-55	6208-6209	$	_	_
28-56	6209-6210	T	_	_
28-57	6210-6211	\_	_	_
28-58	6211-6212	2	_	_
28-59	6212-6213	$	_	_
28-60	6213-6214	.	_	_

#Text=Then, we average the similarities to T2 if all units with their suspicious scores (of $T\_1$) as the weights.
29-1	6215-6219	Then	_	_
29-2	6219-6220	,	_	_
29-3	6221-6223	we	_	_
29-4	6224-6231	average	_	_
29-5	6232-6235	the	_	_
29-6	6236-6248	similarities	_	_
29-7	6249-6251	to	_	_
29-8	6252-6254	T2	_	_
29-9	6255-6257	if	_	_
29-10	6258-6261	all	_	_
29-11	6262-6267	units	_	_
29-12	6268-6272	with	_	_
29-13	6273-6278	their	_	_
29-14	6279-6289	suspicious	_	_
29-15	6290-6296	scores	_	_
29-16	6297-6298	(	_	_
29-17	6298-6300	of	_	_
29-18	6301-6302	$	_	_
29-19	6302-6303	T	_	_
29-20	6303-6304	\_	_	_
29-21	6304-6305	1	_	_
29-22	6305-6306	$	_	_
29-23	6306-6307	)	_	_
29-24	6308-6310	as	_	_
29-25	6311-6314	the	_	_
29-26	6315-6322	weights	_	_
29-27	6322-6323	.	_	_

#Text=It is because we only care about those failure units that matter in the current failure when finding similar historical failures.
30-1	6324-6326	It	_	_
30-2	6327-6329	is	_	_
30-3	6330-6337	because	_	_
30-4	6338-6340	we	_	_
30-5	6341-6345	only	_	_
30-6	6346-6350	care	_	_
30-7	6351-6356	about	_	_
30-8	6357-6362	those	_	_
30-9	6363-6370	failure	_	_
30-10	6371-6376	units	_	_
30-11	6377-6381	that	_	_
30-12	6382-6388	matter	_	_
30-13	6389-6391	in	_	_
30-14	6392-6395	the	_	_
30-15	6396-6403	current	_	_
30-16	6404-6411	failure	_	_
30-17	6412-6416	when	_	_
30-18	6417-6424	finding	_	_
30-19	6425-6432	similar	_	_
30-20	6433-6443	historical	_	_
30-21	6444-6452	failures	_	_
30-22	6452-6453	.	_	_

#Text=In summary, the similarity function to compare $T\_1$ and $T\_2$ can be formalized as follows: $$ d(T\_1, T\_2)=\\frac{1}{\|V\|}\\sum\_{v\\in V}s\_{T\_1}(v)(\\min\_{v' \\in N\_c(v\;G)}\|\|\\boldsymbol{\\hat{f}}^{(T\_1, v)}-\\boldsymbol{\\hat{f}}^{(T\_2, v')}\|\|\_1) $$ where $N\_c(v\;G)$ denotes the failure units of the same class as $v$ in $G$, and $\|\|\\cdot\|\|\_1$ denotes $L1$ norm.
31-1	6454-6456	In	_	_
31-2	6457-6464	summary	_	_
31-3	6464-6465	,	_	_
31-4	6466-6469	the	_	_
31-5	6470-6480	similarity	_	_
31-6	6481-6489	function	_	_
31-7	6490-6492	to	_	_
31-8	6493-6500	compare	_	_
31-9	6501-6502	$	_	_
31-10	6502-6503	T	_	_
31-11	6503-6504	\_	_	_
31-12	6504-6505	1	_	_
31-13	6505-6506	$	_	_
31-14	6507-6510	and	_	_
31-15	6511-6512	$	_	_
31-16	6512-6513	T	_	_
31-17	6513-6514	\_	_	_
31-18	6514-6515	2	_	_
31-19	6515-6516	$	_	_
31-20	6517-6520	can	_	_
31-21	6521-6523	be	_	_
31-22	6524-6534	formalized	_	_
31-23	6535-6537	as	_	_
31-24	6538-6545	follows	_	_
31-25	6545-6546	:	_	_
31-26	6547-6548	$	_	_
31-27	6548-6549	$	_	_
31-28	6550-6551	d	_	_
31-29	6551-6552	(	_	_
31-30	6552-6553	T	_	_
31-31	6553-6554	\_	_	_
31-32	6554-6555	1	_	_
31-33	6555-6556	,	_	_
31-34	6557-6558	T	_	_
31-35	6558-6559	\_	_	_
31-36	6559-6560	2	_	_
31-37	6560-6561	)	_	_
31-38	6561-6562	=	_	_
31-39	6562-6563	\\	_	_
31-40	6563-6567	frac	_	_
31-41	6567-6568	{	_	_
31-42	6568-6569	1	_	_
31-43	6569-6570	}	_	_
31-44	6570-6571	{	_	_
31-45	6571-6572	\|	_	_
31-46	6572-6573	V	_	_
31-47	6573-6574	\|	_	_
31-48	6574-6575	}	_	_
31-49	6575-6576	\\	_	_
31-50	6576-6579	sum	_	_
31-51	6579-6580	\_	_	_
31-52	6580-6581	{	_	_
31-53	6581-6582	v	_	_
31-54	6582-6583	\\	_	_
31-55	6583-6585	in	_	_
31-56	6586-6587	V	_	_
31-57	6587-6588	}	_	_
31-58	6588-6589	s	_	_
31-59	6589-6590	\_	_	_
31-60	6590-6591	{	_	_
31-61	6591-6592	T	_	_
31-62	6592-6593	\_	_	_
31-63	6593-6594	1	_	_
31-64	6594-6595	}	_	_
31-65	6595-6596	(	_	_
31-66	6596-6597	v	_	_
31-67	6597-6598	)	_	_
31-68	6598-6599	(	_	_
31-69	6599-6600	\\	_	_
31-70	6600-6603	min	_	_
31-71	6603-6604	\_	_	_
31-72	6604-6605	{	_	_
31-73	6605-6606	v	_	_
31-74	6606-6607	'	_	_
31-75	6608-6609	\\	_	_
31-76	6609-6611	in	_	_
31-77	6612-6615	N\_c	_	_
31-78	6615-6616	(	_	_
31-79	6616-6617	v	_	_
31-80	6617-6618	\;	_	_
31-81	6618-6619	G	_	_
31-82	6619-6620	)	_	_
31-83	6620-6621	}	_	_
31-84	6621-6622	\|	_	_
31-85	6622-6623	\|	_	_
31-86	6623-6624	\\	_	_
31-87	6624-6634	boldsymbol	_	_
31-88	6634-6635	{	_	_
31-89	6635-6636	\\	_	_
31-90	6636-6639	hat	_	_
31-91	6639-6640	{	_	_
31-92	6640-6641	f	_	_
31-93	6641-6642	}	_	_
31-94	6642-6643	}	_	_
31-95	6643-6644	^	_	_
31-96	6644-6645	{	_	_
31-97	6645-6646	(	_	_
31-98	6646-6647	T	_	_
31-99	6647-6648	\_	_	_
31-100	6648-6649	1	_	_
31-101	6649-6650	,	_	_
31-102	6651-6652	v	_	_
31-103	6652-6653	)	_	_
31-104	6653-6654	}	_	_
31-105	6654-6655	-	_	_
31-106	6655-6656	\\	_	_
31-107	6656-6666	boldsymbol	_	_
31-108	6666-6667	{	_	_
31-109	6667-6668	\\	_	_
31-110	6668-6671	hat	_	_
31-111	6671-6672	{	_	_
31-112	6672-6673	f	_	_
31-113	6673-6674	}	_	_
31-114	6674-6675	}	_	_
31-115	6675-6676	^	_	_
31-116	6676-6677	{	_	_
31-117	6677-6678	(	_	_
31-118	6678-6679	T	_	_
31-119	6679-6680	\_	_	_
31-120	6680-6681	2	_	_
31-121	6681-6682	,	_	_
31-122	6683-6684	v	_	_
31-123	6684-6685	'	_	_
31-124	6685-6686	)	_	_
31-125	6686-6687	}	_	_
31-126	6687-6688	\|	_	_
31-127	6688-6689	\|	_	_
31-128	6689-6690	\_	_	_
31-129	6690-6691	1	_	_
31-130	6691-6692	)	_	_
31-131	6693-6694	$	_	_
31-132	6694-6695	$	_	_
31-133	6696-6701	where	_	_
31-134	6702-6703	$	_	_
31-135	6703-6706	N\_c	_	_
31-136	6706-6707	(	_	_
31-137	6707-6708	v	_	_
31-138	6708-6709	\;	_	_
31-139	6709-6710	G	_	_
31-140	6710-6711	)	_	_
31-141	6711-6712	$	_	_
31-142	6713-6720	denotes	_	_
31-143	6721-6724	the	_	_
31-144	6725-6732	failure	_	_
31-145	6733-6738	units	_	_
31-146	6739-6741	of	_	_
31-147	6742-6745	the	_	_
31-148	6746-6750	same	_	_
31-149	6751-6756	class	_	_
31-150	6757-6759	as	_	_
31-151	6760-6761	$	_	_
31-152	6761-6762	v	_	_
31-153	6762-6763	$	_	_
31-154	6764-6766	in	_	_
31-155	6767-6768	$	_	_
31-156	6768-6769	G	_	_
31-157	6769-6770	$	_	_
31-158	6770-6771	,	_	_
31-159	6772-6775	and	_	_
31-160	6776-6777	$	_	_
31-161	6777-6778	\|	_	_
31-162	6778-6779	\|	_	_
31-163	6779-6780	\\	_	_
31-164	6780-6784	cdot	_	_
31-165	6784-6785	\|	_	_
31-166	6785-6786	\|	_	_
31-167	6786-6787	\_	_	_
31-168	6787-6788	1	_	_
31-169	6788-6789	$	_	_
31-170	6790-6797	denotes	_	_
31-171	6798-6799	$	_	_
31-172	6799-6801	L1	_	_
31-173	6801-6802	$	_	_
31-174	6803-6807	norm	_	_
31-175	6807-6808	.	_	_

#Text=For an in-coming failure, we calculate its similarity to each historical failure and recommend the top-k most similar ones to engineers.
32-1	6811-6814	For	_	_
32-2	6815-6817	an	_	_
32-3	6818-6827	in-coming	_	_
32-4	6828-6835	failure	_	_
32-5	6835-6836	,	_	_
32-6	6837-6839	we	_	_
32-7	6840-6849	calculate	_	_
32-8	6850-6853	its	_	_
32-9	6854-6864	similarity	_	_
32-10	6865-6867	to	_	_
32-11	6868-6872	each	_	_
32-12	6873-6883	historical	_	_
32-13	6884-6891	failure	_	_
32-14	6892-6895	and	_	_
32-15	6896-6905	recommend	_	_
32-16	6906-6909	the	_	_
32-17	6910-6915	top-k	_	_
32-18	6916-6920	most	_	_
32-19	6921-6928	similar	_	_
32-20	6929-6933	ones	_	_
32-21	6934-6936	to	_	_
32-22	6937-6946	engineers	_	_
32-23	6946-6947	.	_	_

#Text=Our model is believed to learn localizing the root causes from these similar historical failures.
33-1	6948-6951	Our	_	_
33-2	6952-6957	model	_	_
33-3	6958-6960	is	_	_
33-4	6961-6969	believed	_	_
33-5	6970-6972	to	_	_
33-6	6973-6978	learn	_	_
33-7	6979-6989	localizing	_	_
33-8	6990-6993	the	_	_
33-9	6994-6998	root	_	_
33-10	6999-7005	causes	_	_
33-11	7006-7010	from	_	_
33-12	7011-7016	these	_	_
33-13	7017-7024	similar	_	_
33-14	7025-7035	historical	_	_
33-15	7036-7044	failures	_	_
33-16	7044-7045	.	_	_

#Text=Furthermore, engineers can also directly refer to the failure tickets of these historical failures for their diagnosis and mitigation process.
34-1	7046-7057	Furthermore	_	_
34-2	7057-7058	,	_	_
34-3	7059-7068	engineers	_	_
34-4	7069-7072	can	_	_
34-5	7073-7077	also	_	_
34-6	7078-7086	directly	_	_
34-7	7087-7092	refer	_	_
34-8	7093-7095	to	_	_
34-9	7096-7099	the	_	_
34-10	7100-7107	failure	_	_
34-11	7108-7115	tickets	_	_
34-12	7116-7118	of	_	_
34-13	7119-7124	these	_	_
34-14	7125-7135	historical	_	_
34-15	7136-7144	failures	_	_
34-16	7145-7148	for	_	_
34-17	7149-7154	their	_	_
34-18	7155-7164	diagnosis	_	_
34-19	7165-7168	and	_	_
34-20	7169-7179	mitigation	_	_
34-21	7180-7187	process	_	_
34-22	7187-7188	.	_	_

#Text=Note that sometimes the most similar historical failures may have different failure classes to the localization results due to imperfect similarity calculation.
35-1	7189-7193	Note	_	_
35-2	7194-7198	that	_	_
35-3	7199-7208	sometimes	_	_
35-4	7209-7212	the	_	_
35-5	7213-7217	most	_	_
35-6	7218-7225	similar	_	_
35-7	7226-7236	historical	_	_
35-8	7237-7245	failures	_	_
35-9	7246-7249	may	_	_
35-10	7250-7254	have	_	_
35-11	7255-7264	different	_	_
35-12	7265-7272	failure	_	_
35-13	7273-7280	classes	_	_
35-14	7281-7283	to	_	_
35-15	7284-7287	the	_	_
35-16	7288-7300	localization	_	_
35-17	7301-7308	results	_	_
35-18	7309-7312	due	_	_
35-19	7313-7315	to	_	_
35-20	7316-7325	imperfect	_	_
35-21	7326-7336	similarity	_	_
35-22	7337-7348	calculation	_	_
35-23	7348-7349	.	_	_

#Text=In such cases, we discard and ignore such historical failures.    ### Global interpretation The selected time-series features are listed as follows: !
36-1	7350-7352	In	_	_
36-2	7353-7357	such	_	_
36-3	7358-7363	cases	_	_
36-4	7363-7364	,	_	_
36-5	7365-7367	we	_	_
36-6	7368-7375	discard	_	_
36-7	7376-7379	and	_	_
36-8	7380-7386	ignore	_	_
36-9	7387-7391	such	_	_
36-10	7392-7402	historical	_	_
36-11	7403-7411	failures	_	_
36-12	7411-7412	.	_	_
36-13	7416-7417	#	_	_
36-14	7417-7418	#	_	_
36-15	7418-7419	#	_	_
36-16	7420-7426	Global	_	_
36-17	7427-7441	interpretation	_	_
36-18	7442-7445	The	_	_
36-19	7446-7454	selected	_	_
36-20	7455-7466	time-series	_	_
36-21	7467-7475	features	_	_
36-22	7476-7479	are	_	_
36-23	7480-7486	listed	_	_
36-24	7487-7489	as	_	_
36-25	7490-7497	follows	_	_
36-26	7497-7498	:	_	_
36-27	7499-7500	!	_	_

#Text=\[the list of selected time-series features\](figures/global\_interpretation\_time\_series\_features.png)
37-1	7500-7501	\[	_	_
37-2	7501-7504	the	_	_
37-3	7505-7509	list	_	_
37-4	7510-7512	of	_	_
37-5	7513-7521	selected	_	_
37-6	7522-7533	time-series	_	_
37-7	7534-7542	features	_	_
37-8	7542-7543	\]	_	_
37-9	7543-7544	(	_	_
37-10	7544-7551	figures	_	_
37-11	7551-7552	/	_	_
37-12	7552-7598	global\_interpretation\_time\_series\_features.png	_	_
37-13	7598-7599	)	_	_