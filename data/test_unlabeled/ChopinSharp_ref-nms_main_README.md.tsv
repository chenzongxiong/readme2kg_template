#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=# Ref-NMS Official codebase for AAAI 2021 paper \["Ref-NMS: Breaking Proposal Bottlenecks in Two-Stage Referring Expression Grounding"\](https://arxiv.org/abs/2009.01449).  ## Prerequisites The following dependencies should be enough.
1-1	0-1	#	_	_
1-2	2-9	Ref-NMS	_	_
1-3	10-18	Official	_	_
1-4	19-27	codebase	_	_
1-5	28-31	for	_	_
1-6	32-36	AAAI	_	_
1-7	37-41	2021	_	_
1-8	42-47	paper	_	_
1-9	48-49	\[	_	_
1-10	49-50	"	_	_
1-11	50-57	Ref-NMS	_	_
1-12	57-58	:	_	_
1-13	59-67	Breaking	_	_
1-14	68-76	Proposal	_	_
1-15	77-88	Bottlenecks	_	_
1-16	89-91	in	_	_
1-17	92-101	Two-Stage	_	_
1-18	102-111	Referring	_	_
1-19	112-122	Expression	_	_
1-20	123-132	Grounding	_	_
1-21	132-133	"	_	_
1-22	133-134	\]	_	_
1-23	134-135	(	_	_
1-24	135-140	https	_	_
1-25	140-141	:	_	_
1-26	141-142	/	_	_
1-27	142-143	/	_	_
1-28	143-152	arxiv.org	_	_
1-29	152-153	/	_	_
1-30	153-156	abs	_	_
1-31	156-157	/	_	_
1-32	157-167	2009.01449	_	_
1-33	167-168	)	_	_
1-34	168-169	.	_	_
1-35	171-172	#	_	_
1-36	172-173	#	_	_
1-37	174-187	Prerequisites	_	_
1-38	188-191	The	_	_
1-39	192-201	following	_	_
1-40	202-214	dependencies	_	_
1-41	215-221	should	_	_
1-42	222-224	be	_	_
1-43	225-231	enough	_	_
1-44	231-232	.	_	_

#Text=See \[environment.yml\](environment.yml) for complete environment settings. - python 3.7.6 - pytorch 1.1.0 - torchvision 0.3.0 - tensorboard 2.1.0 - spacy 2.2.3  ## Data Preparation Follow instructions in `data/README.md` to setup `data` directory.
2-1	233-236	See	_	_
2-2	237-238	\[	_	_
2-3	238-253	environment.yml	_	_
2-4	253-254	\]	_	_
2-5	254-255	(	_	_
2-6	255-270	environment.yml	_	_
2-7	270-271	)	_	_
2-8	272-275	for	_	_
2-9	276-284	complete	_	_
2-10	285-296	environment	_	_
2-11	297-305	settings	_	_
2-12	305-306	.	_	_
2-13	307-308	-	_	_
2-14	309-315	python	_	_
2-15	316-321	3.7.6	_	_
2-16	322-323	-	_	_
2-17	324-331	pytorch	_	_
2-18	332-337	1.1.0	_	_
2-19	338-339	-	_	_
2-20	340-351	torchvision	_	_
2-21	352-357	0.3.0	_	_
2-22	358-359	-	_	_
2-23	360-371	tensorboard	_	_
2-24	372-377	2.1.0	_	_
2-25	378-379	-	_	_
2-26	380-385	spacy	_	_
2-27	386-391	2.2.3	_	_
2-28	393-394	#	_	_
2-29	394-395	#	_	_
2-30	396-400	Data	_	_
2-31	401-412	Preparation	_	_
2-32	413-419	Follow	_	_
2-33	420-432	instructions	_	_
2-34	433-435	in	_	_
2-35	436-437	`	_	_
2-36	437-441	data	_	_
2-37	441-442	/	_	_
2-38	442-451	README.md	_	_
2-39	451-452	`	_	_
2-40	453-455	to	_	_
2-41	456-461	setup	_	_
2-42	462-463	`	_	_
2-43	463-467	data	_	_
2-44	467-468	`	_	_
2-45	469-478	directory	_	_
2-46	478-479	.	_	_

#Text=Run following script to setup `cache` directory: ``` sh scripts/prepare\_data.sh ``` This should generate following files under `cache` directory: - vocabulary file: `std\_vocab\_<dataset>\_<split\_by>.txt` - selected GloVe feature: `std\_glove\_<dataset>\_<split\_by>.npy` - referring expression database: `std\_refdb\_<dataset>\_<split\_by>.json` - critical objects database: `std\_ctxdb\_<dataset>\_<split\_by>.json`   ## Train \*\*Train with binary XE loss:\*\* ``` PYTHONPATH=$PWD python tools/train\_att\_vanilla.py --dataset refcoco --split-by unc ```  \*\*Train with ranking loss:\*\* ``` PYTHONPATH=$PWD python tools/train\_att\_rank.py --dataset refcoco --split-by unc ```  We use tensorboard to monitor the training process.
3-1	482-485	Run	_	_
3-2	486-495	following	_	_
3-3	496-502	script	_	_
3-4	503-505	to	_	_
3-5	506-511	setup	_	_
3-6	512-513	`	_	_
3-7	513-518	cache	_	_
3-8	518-519	`	_	_
3-9	520-529	directory	_	_
3-10	529-530	:	_	_
3-11	531-532	`	_	_
3-12	532-533	`	_	_
3-13	533-534	`	_	_
3-14	535-537	sh	_	_
3-15	538-545	scripts	_	_
3-16	545-546	/	_	_
3-17	546-561	prepare\_data.sh	_	_
3-18	562-563	`	_	_
3-19	563-564	`	_	_
3-20	564-565	`	_	_
3-21	566-570	This	_	_
3-22	571-577	should	_	_
3-23	578-586	generate	_	_
3-24	587-596	following	_	_
3-25	597-602	files	_	_
3-26	603-608	under	_	_
3-27	609-610	`	_	_
3-28	610-615	cache	_	_
3-29	615-616	`	_	_
3-30	617-626	directory	_	_
3-31	626-627	:	_	_
3-32	628-629	-	_	_
3-33	630-640	vocabulary	_	_
3-34	641-645	file	_	_
3-35	645-646	:	_	_
3-36	647-648	`	_	_
3-37	648-657	std\_vocab	_	_
3-38	657-658	\_	_	_
3-39	658-659	<	_	_
3-40	659-666	dataset	_	_
3-41	666-667	>	_	_
3-42	667-668	\_	_	_
3-43	668-669	<	_	_
3-44	669-677	split\_by	_	_
3-45	677-678	>	_	_
3-46	678-679	.	_	_
3-47	679-682	txt	_	_
3-48	682-683	`	_	_
3-49	684-685	-	_	_
3-50	686-694	selected	_	_
3-51	695-700	GloVe	_	_
3-52	701-708	feature	_	_
3-53	708-709	:	_	_
3-54	710-711	`	_	_
3-55	711-720	std\_glove	_	_
3-56	720-721	\_	_	_
3-57	721-722	<	_	_
3-58	722-729	dataset	_	_
3-59	729-730	>	_	_
3-60	730-731	\_	_	_
3-61	731-732	<	_	_
3-62	732-740	split\_by	_	_
3-63	740-741	>	_	_
3-64	741-742	.	_	_
3-65	742-745	npy	_	_
3-66	745-746	`	_	_
3-67	747-748	-	_	_
3-68	749-758	referring	_	_
3-69	759-769	expression	_	_
3-70	770-778	database	_	_
3-71	778-779	:	_	_
3-72	780-781	`	_	_
3-73	781-790	std\_refdb	_	_
3-74	790-791	\_	_	_
3-75	791-792	<	_	_
3-76	792-799	dataset	_	_
3-77	799-800	>	_	_
3-78	800-801	\_	_	_
3-79	801-802	<	_	_
3-80	802-810	split\_by	_	_
3-81	810-811	>	_	_
3-82	811-812	.	_	_
3-83	812-816	json	_	_
3-84	816-817	`	_	_
3-85	818-819	-	_	_
3-86	820-828	critical	_	_
3-87	829-836	objects	_	_
3-88	837-845	database	_	_
3-89	845-846	:	_	_
3-90	847-848	`	_	_
3-91	848-857	std\_ctxdb	_	_
3-92	857-858	\_	_	_
3-93	858-859	<	_	_
3-94	859-866	dataset	_	_
3-95	866-867	>	_	_
3-96	867-868	\_	_	_
3-97	868-869	<	_	_
3-98	869-877	split\_by	_	_
3-99	877-878	>	_	_
3-100	878-879	.	_	_
3-101	879-883	json	_	_
3-102	883-884	`	_	_
3-103	887-888	#	_	_
3-104	888-889	#	_	_
3-105	890-895	Train	_	_
3-106	896-897	\*	_	_
3-107	897-898	\*	_	_
3-108	898-903	Train	_	_
3-109	904-908	with	_	_
3-110	909-915	binary	_	_
3-111	916-918	XE	_	_
3-112	919-923	loss	_	_
3-113	923-924	:	_	_
3-114	924-925	\*	_	_
3-115	925-926	\*	_	_
3-116	927-928	`	_	_
3-117	928-929	`	_	_
3-118	929-930	`	_	_
3-119	931-941	PYTHONPATH	_	_
3-120	941-942	=	_	_
3-121	942-943	$	_	_
3-122	943-946	PWD	_	_
3-123	947-953	python	_	_
3-124	954-959	tools	_	_
3-125	959-960	/	_	_
3-126	960-980	train\_att\_vanilla.py	_	_
3-127	981-982	-	_	_
3-128	982-983	-	_	_
3-129	983-990	dataset	_	_
3-130	991-998	refcoco	_	_
3-131	999-1000	-	_	_
3-132	1000-1001	-	_	_
3-133	1001-1009	split-by	_	_
3-134	1010-1013	unc	_	_
3-135	1014-1015	`	_	_
3-136	1015-1016	`	_	_
3-137	1016-1017	`	_	_
3-138	1019-1020	\*	_	_
3-139	1020-1021	\*	_	_
3-140	1021-1026	Train	_	_
3-141	1027-1031	with	_	_
3-142	1032-1039	ranking	_	_
3-143	1040-1044	loss	_	_
3-144	1044-1045	:	_	_
3-145	1045-1046	\*	_	_
3-146	1046-1047	\*	_	_
3-147	1048-1049	`	_	_
3-148	1049-1050	`	_	_
3-149	1050-1051	`	_	_
3-150	1052-1062	PYTHONPATH	_	_
3-151	1062-1063	=	_	_
3-152	1063-1064	$	_	_
3-153	1064-1067	PWD	_	_
3-154	1068-1074	python	_	_
3-155	1075-1080	tools	_	_
3-156	1080-1081	/	_	_
3-157	1081-1098	train\_att\_rank.py	_	_
3-158	1099-1100	-	_	_
3-159	1100-1101	-	_	_
3-160	1101-1108	dataset	_	_
3-161	1109-1116	refcoco	_	_
3-162	1117-1118	-	_	_
3-163	1118-1119	-	_	_
3-164	1119-1127	split-by	_	_
3-165	1128-1131	unc	_	_
3-166	1132-1133	`	_	_
3-167	1133-1134	`	_	_
3-168	1134-1135	`	_	_
3-169	1137-1139	We	_	_
3-170	1140-1143	use	_	_
3-171	1144-1155	tensorboard	_	_
3-172	1156-1158	to	_	_
3-173	1159-1166	monitor	_	_
3-174	1167-1170	the	_	_
3-175	1171-1179	training	_	_
3-176	1180-1187	process	_	_
3-177	1187-1188	.	_	_

#Text=The log file can be found in `tb` folder.  ## Evaluate Recall \*\*Save Ref-NMS proposals:\*\* ``` PYTHONPATH=$PWD python tools/save\_ref\_nms\_proposals.py --dataset refcoco --split-by unc --tid <tid> --m <loss\_type> ``` `<loss\_type>` can be either `att\_vanilla` for binary XE loss or `att\_rank` for rank loss.
4-1	1189-1192	The	_	_
4-2	1193-1196	log	_	_
4-3	1197-1201	file	_	_
4-4	1202-1205	can	_	_
4-5	1206-1208	be	_	_
4-6	1209-1214	found	_	_
4-7	1215-1217	in	_	_
4-8	1218-1219	`	_	_
4-9	1219-1221	tb	_	_
4-10	1221-1222	`	_	_
4-11	1223-1229	folder	_	_
4-12	1229-1230	.	_	_
4-13	1232-1233	#	_	_
4-14	1233-1234	#	_	_
4-15	1235-1243	Evaluate	_	_
4-16	1244-1250	Recall	_	_
4-17	1251-1252	\*	_	_
4-18	1252-1253	\*	_	_
4-19	1253-1257	Save	_	_
4-20	1258-1265	Ref-NMS	_	_
4-21	1266-1275	proposals	_	_
4-22	1275-1276	:	_	_
4-23	1276-1277	\*	_	_
4-24	1277-1278	\*	_	_
4-25	1279-1280	`	_	_
4-26	1280-1281	`	_	_
4-27	1281-1282	`	_	_
4-28	1283-1293	PYTHONPATH	_	_
4-29	1293-1294	=	_	_
4-30	1294-1295	$	_	_
4-31	1295-1298	PWD	_	_
4-32	1299-1305	python	_	_
4-33	1306-1311	tools	_	_
4-34	1311-1312	/	_	_
4-35	1312-1337	save\_ref\_nms\_proposals.py	_	_
4-36	1338-1339	-	_	_
4-37	1339-1340	-	_	_
4-38	1340-1347	dataset	_	_
4-39	1348-1355	refcoco	_	_
4-40	1356-1357	-	_	_
4-41	1357-1358	-	_	_
4-42	1358-1366	split-by	_	_
4-43	1367-1370	unc	_	_
4-44	1371-1372	-	_	_
4-45	1372-1373	-	_	_
4-46	1373-1376	tid	_	_
4-47	1377-1378	<	_	_
4-48	1378-1381	tid	_	_
4-49	1381-1382	>	_	_
4-50	1383-1384	-	_	_
4-51	1384-1385	-	_	_
4-52	1385-1386	m	_	_
4-53	1387-1388	<	_	_
4-54	1388-1397	loss\_type	_	_
4-55	1397-1398	>	_	_
4-56	1399-1400	`	_	_
4-57	1400-1401	`	_	_
4-58	1401-1402	`	_	_
4-59	1403-1404	`	_	_
4-60	1404-1405	<	_	_
4-61	1405-1414	loss\_type	_	_
4-62	1414-1415	>	_	_
4-63	1415-1416	`	_	_
4-64	1417-1420	can	_	_
4-65	1421-1423	be	_	_
4-66	1424-1430	either	_	_
4-67	1431-1432	`	_	_
4-68	1432-1443	att\_vanilla	_	_
4-69	1443-1444	`	_	_
4-70	1445-1448	for	_	_
4-71	1449-1455	binary	_	_
4-72	1456-1458	XE	_	_
4-73	1459-1463	loss	_	_
4-74	1464-1466	or	_	_
4-75	1467-1468	`	_	_
4-76	1468-1476	att\_rank	_	_
4-77	1476-1477	`	_	_
4-78	1478-1481	for	_	_
4-79	1482-1486	rank	_	_
4-80	1487-1491	loss	_	_
4-81	1491-1492	.	_	_

#Text=\*\*Evaluate recall on referent object:\*\* ``` PYTHONPATH=$PWD python tools/eval\_proposal\_hit\_rate.py --m <loss\_type> --dataset refcoco --split-by unc --tid <tid> --conf <conf> ``` `conf` parameter is the score threshold used to filter Ref-NMS proposals.
5-1	1494-1495	\*	_	_
5-2	1495-1496	\*	_	_
5-3	1496-1504	Evaluate	_	_
5-4	1505-1511	recall	_	_
5-5	1512-1514	on	_	_
5-6	1515-1523	referent	_	_
5-7	1524-1530	object	_	_
5-8	1530-1531	:	_	_
5-9	1531-1532	\*	_	_
5-10	1532-1533	\*	_	_
5-11	1534-1535	`	_	_
5-12	1535-1536	`	_	_
5-13	1536-1537	`	_	_
5-14	1538-1548	PYTHONPATH	_	_
5-15	1548-1549	=	_	_
5-16	1549-1550	$	_	_
5-17	1550-1553	PWD	_	_
5-18	1554-1560	python	_	_
5-19	1561-1566	tools	_	_
5-20	1566-1567	/	_	_
5-21	1567-1592	eval\_proposal\_hit\_rate.py	_	_
5-22	1593-1594	-	_	_
5-23	1594-1595	-	_	_
5-24	1595-1596	m	_	_
5-25	1597-1598	<	_	_
5-26	1598-1607	loss\_type	_	_
5-27	1607-1608	>	_	_
5-28	1609-1610	-	_	_
5-29	1610-1611	-	_	_
5-30	1611-1618	dataset	_	_
5-31	1619-1626	refcoco	_	_
5-32	1627-1628	-	_	_
5-33	1628-1629	-	_	_
5-34	1629-1637	split-by	_	_
5-35	1638-1641	unc	_	_
5-36	1642-1643	-	_	_
5-37	1643-1644	-	_	_
5-38	1644-1647	tid	_	_
5-39	1648-1649	<	_	_
5-40	1649-1652	tid	_	_
5-41	1652-1653	>	_	_
5-42	1654-1655	-	_	_
5-43	1655-1656	-	_	_
5-44	1656-1660	conf	_	_
5-45	1661-1662	<	_	_
5-46	1662-1666	conf	_	_
5-47	1666-1667	>	_	_
5-48	1668-1669	`	_	_
5-49	1669-1670	`	_	_
5-50	1670-1671	`	_	_
5-51	1672-1673	`	_	_
5-52	1673-1677	conf	_	_
5-53	1677-1678	`	_	_
5-54	1679-1688	parameter	_	_
5-55	1689-1691	is	_	_
5-56	1692-1695	the	_	_
5-57	1696-1701	score	_	_
5-58	1702-1711	threshold	_	_
5-59	1712-1716	used	_	_
5-60	1717-1719	to	_	_
5-61	1720-1726	filter	_	_
5-62	1727-1734	Ref-NMS	_	_
5-63	1735-1744	proposals	_	_
5-64	1744-1745	.	_	_

#Text=It should be picked properly so that the recall of the referent is high while the number of proposals per expression is around 8-10.
6-1	1746-1748	It	_	_
6-2	1749-1755	should	_	_
6-3	1756-1758	be	_	_
6-4	1759-1765	picked	_	_
6-5	1766-1774	properly	_	_
6-6	1775-1777	so	_	_
6-7	1778-1782	that	_	_
6-8	1783-1786	the	_	_
6-9	1787-1793	recall	_	_
6-10	1794-1796	of	_	_
6-11	1797-1800	the	_	_
6-12	1801-1809	referent	_	_
6-13	1810-1812	is	_	_
6-14	1813-1817	high	_	_
6-15	1818-1823	while	_	_
6-16	1824-1827	the	_	_
6-17	1828-1834	number	_	_
6-18	1835-1837	of	_	_
6-19	1838-1847	proposals	_	_
6-20	1848-1851	per	_	_
6-21	1852-1862	expression	_	_
6-22	1863-1865	is	_	_
6-23	1866-1872	around	_	_
6-24	1873-1874	8	_	_
6-25	1874-1875	-	_	_
6-26	1875-1877	10	_	_
6-27	1877-1878	.	_	_

#Text=\*\*Evaluate recall on critical objects:\*\* ``` PYTHONPATH=$PWD python tools/eval\_proposal\_ctx\_recall.py --m <loss\_type> --dataset refcoco --split-by unc --tid <tid> --conf <conf> ```  ## Evaluate REG Performance Save MAttNet-style detection file: ``` PYTHONPATH=$PWD python tools/save\_matt\_dets.py --dataset refcoco --split-by unc --m <loss\_type> --tid <tid> --conf <conf> ``` This script will save all the detection information needed for downstream REG evaluation to `output/matt\_dets\_<loss\_type>\_<tid>\_<dataset>\_<split\_by>\_<top\_N>.json`.
7-1	1880-1881	\*	_	_
7-2	1881-1882	\*	_	_
7-3	1882-1890	Evaluate	_	_
7-4	1891-1897	recall	_	_
7-5	1898-1900	on	_	_
7-6	1901-1909	critical	_	_
7-7	1910-1917	objects	_	_
7-8	1917-1918	:	_	_
7-9	1918-1919	\*	_	_
7-10	1919-1920	\*	_	_
7-11	1921-1922	`	_	_
7-12	1922-1923	`	_	_
7-13	1923-1924	`	_	_
7-14	1925-1935	PYTHONPATH	_	_
7-15	1935-1936	=	_	_
7-16	1936-1937	$	_	_
7-17	1937-1940	PWD	_	_
7-18	1941-1947	python	_	_
7-19	1948-1953	tools	_	_
7-20	1953-1954	/	_	_
7-21	1954-1981	eval\_proposal\_ctx\_recall.py	_	_
7-21	1972-1978	recall	_	_
7-22	1982-1983	-	_	_
7-23	1983-1984	-	_	_
7-24	1984-1985	m	_	_
7-25	1986-1987	<	_	_
7-26	1987-1996	loss\_type	_	_
7-27	1996-1997	>	_	_
7-28	1998-1999	-	_	_
7-29	1999-2000	-	_	_
7-30	2000-2007	dataset	_	_
7-31	2008-2015	refcoco	_	_
7-32	2016-2017	-	_	_
7-33	2017-2018	-	_	_
7-34	2018-2026	split-by	_	_
7-35	2027-2030	unc	_	_
7-36	2031-2032	-	_	_
7-37	2032-2033	-	_	_
7-38	2033-2036	tid	_	_
7-39	2037-2038	<	_	_
7-40	2038-2041	tid	_	_
7-41	2041-2042	>	_	_
7-42	2043-2044	-	_	_
7-43	2044-2045	-	_	_
7-44	2045-2049	conf	_	_
7-45	2050-2051	<	_	_
7-46	2051-2055	conf	_	_
7-47	2055-2056	>	_	_
7-48	2057-2058	`	_	_
7-49	2058-2059	`	_	_
7-50	2059-2060	`	_	_
7-51	2062-2063	#	_	_
7-52	2063-2064	#	_	_
7-53	2065-2073	Evaluate	_	_
7-54	2074-2077	REG	_	_
7-55	2078-2089	Performance	_	_
7-56	2090-2094	Save	_	_
7-57	2095-2108	MAttNet-style	_	_
7-58	2109-2118	detection	_	_
7-59	2119-2123	file	_	_
7-60	2123-2124	:	_	_
7-61	2125-2126	`	_	_
7-62	2126-2127	`	_	_
7-63	2127-2128	`	_	_
7-64	2129-2139	PYTHONPATH	_	_
7-65	2139-2140	=	_	_
7-66	2140-2141	$	_	_
7-67	2141-2144	PWD	_	_
7-68	2145-2151	python	_	_
7-69	2152-2157	tools	_	_
7-70	2157-2158	/	_	_
7-71	2158-2175	save\_matt\_dets.py	_	_
7-72	2176-2177	-	_	_
7-73	2177-2178	-	_	_
7-74	2178-2185	dataset	_	_
7-75	2186-2193	refcoco	_	_
7-76	2194-2195	-	_	_
7-77	2195-2196	-	_	_
7-78	2196-2204	split-by	_	_
7-79	2205-2208	unc	_	_
7-80	2209-2210	-	_	_
7-81	2210-2211	-	_	_
7-82	2211-2212	m	_	_
7-83	2213-2214	<	_	_
7-84	2214-2223	loss\_type	_	_
7-85	2223-2224	>	_	_
7-86	2225-2226	-	_	_
7-87	2226-2227	-	_	_
7-88	2227-2230	tid	_	_
7-89	2231-2232	<	_	_
7-90	2232-2235	tid	_	_
7-91	2235-2236	>	_	_
7-92	2237-2238	-	_	_
7-93	2238-2239	-	_	_
7-94	2239-2243	conf	_	_
7-95	2244-2245	<	_	_
7-96	2245-2249	conf	_	_
7-97	2249-2250	>	_	_
7-98	2251-2252	`	_	_
7-99	2252-2253	`	_	_
7-100	2253-2254	`	_	_
7-101	2255-2259	This	_	_
7-102	2260-2266	script	_	_
7-103	2267-2271	will	_	_
7-104	2272-2276	save	_	_
7-105	2277-2280	all	_	_
7-106	2281-2284	the	_	_
7-107	2285-2294	detection	_	_
7-108	2295-2306	information	_	_
7-109	2307-2313	needed	_	_
7-110	2314-2317	for	_	_
7-111	2318-2328	downstream	_	_
7-112	2329-2332	REG	_	_
7-113	2333-2343	evaluation	_	_
7-114	2344-2346	to	_	_
7-115	2347-2348	`	_	_
7-116	2348-2354	output	_	_
7-117	2354-2355	/	_	_
7-118	2355-2364	matt\_dets	_	_
7-119	2364-2365	\_	_	_
7-120	2365-2366	<	_	_
7-121	2366-2375	loss\_type	_	_
7-122	2375-2376	>	_	_
7-123	2376-2377	\_	_	_
7-124	2377-2378	<	_	_
7-125	2378-2381	tid	_	_
7-126	2381-2382	>	_	_
7-127	2382-2383	\_	_	_
7-128	2383-2384	<	_	_
7-129	2384-2391	dataset	_	_
7-130	2391-2392	>	_	_
7-131	2392-2393	\_	_	_
7-132	2393-2394	<	_	_
7-133	2394-2402	split\_by	_	_
7-134	2402-2403	>	_	_
7-135	2403-2404	\_	_	_
7-136	2404-2405	<	_	_
7-137	2405-2410	top\_N	_	_
7-138	2410-2411	>	_	_
7-139	2411-2412	.	_	_
7-140	2412-2416	json	_	_
7-141	2416-2417	`	_	_
7-142	2417-2418	.	_	_

#Text=We provide altered version of \[MAttNet\](https://github.com/ChopinSharp/MAttNet) and \[CM-A-E\](https://github.com/ChopinSharp/CM-Erase-REG) for downstream REG task evaluation.
8-1	2420-2422	We	_	_
8-2	2423-2430	provide	_	_
8-3	2431-2438	altered	_	_
8-4	2439-2446	version	_	_
8-5	2447-2449	of	_	_
8-6	2450-2451	\[	_	_
8-7	2451-2458	MAttNet	_	_
8-8	2458-2459	\]	_	_
8-9	2459-2460	(	_	_
8-10	2460-2465	https	_	_
8-11	2465-2466	:	_	_
8-12	2466-2467	/	_	_
8-13	2467-2468	/	_	_
8-14	2468-2478	github.com	_	_
8-15	2478-2479	/	_	_
8-16	2479-2490	ChopinSharp	_	_
8-17	2490-2491	/	_	_
8-18	2491-2498	MAttNet	_	_
8-19	2498-2499	)	_	_
8-20	2500-2503	and	_	_
8-21	2504-2505	\[	_	_
8-22	2505-2511	CM-A-E	_	_
8-23	2511-2512	\]	_	_
8-24	2512-2513	(	_	_
8-25	2513-2518	https	_	_
8-26	2518-2519	:	_	_
8-27	2519-2520	/	_	_
8-28	2520-2521	/	_	_
8-29	2521-2531	github.com	_	_
8-30	2531-2532	/	_	_
8-31	2532-2543	ChopinSharp	_	_
8-32	2543-2544	/	_	_
8-33	2544-2556	CM-Erase-REG	_	_
8-34	2556-2557	)	_	_
8-35	2558-2561	for	_	_
8-36	2562-2572	downstream	_	_
8-37	2573-2576	REG	_	_
8-38	2577-2581	task	_	_
8-39	2582-2592	evaluation	_	_
8-40	2592-2593	.	_	_

#Text=First, follow the README in each repository to reproduce the original reported results as baseline (c.f.
9-1	2596-2601	First	_	_
9-2	2601-2602	,	_	_
9-3	2603-2609	follow	_	_
9-4	2610-2613	the	_	_
9-5	2614-2620	README	_	_
9-6	2621-2623	in	_	_
9-7	2624-2628	each	_	_
9-8	2629-2639	repository	_	_
9-9	2640-2642	to	_	_
9-10	2643-2652	reproduce	_	_
9-11	2653-2656	the	_	_
9-12	2657-2665	original	_	_
9-13	2666-2674	reported	_	_
9-14	2675-2682	results	_	_
9-15	2683-2685	as	_	_
9-16	2686-2694	baseline	_	_
9-17	2695-2696	(	_	_
9-18	2696-2699	c.f	_	_
9-19	2699-2700	.	_	_

#Text=Table 2 in our paper).
10-1	2701-2706	Table	_	_
10-2	2707-2708	2	_	_
10-3	2709-2711	in	_	_
10-4	2712-2715	our	_	_
10-5	2716-2721	paper	_	_
10-6	2721-2722	)	_	_
10-7	2722-2723	.	_	_

#Text=Then, run the following commands to evaluate on REC and RES task: ``` # Evaluate REC performance python tools/extract\_mrcn\_ref\_feats.py --dataset refcoco --splitBy unc --tid <tid> --top-N 0 --m <loss\_type> python tools/eval\_ref.py --dataset refcoco --splitBy unc --tid <tid> --top-N 0 --m <loss\_type> # Evaluate RES performance python tools/run\_propose\_to\_mask.py --dataset refcoco --splitBy unc --tid <tid> --top-N 0 --m <loss\_type> python tools/eval\_ref\_masks.py --dataset refcoco --splitBy unc --tid <tid> --top-N 0 --m <loss\_type> --save ```  ## Pretrained Models We provide pre-trained model weights as long as the corresponding \*\*MAttNet-style detection file\*\* (note the MattNet-style detection files can be directly used to evaluate downstream REG task performance).
11-1	2724-2728	Then	_	_
11-2	2728-2729	,	_	_
11-3	2730-2733	run	_	_
11-4	2734-2737	the	_	_
11-5	2738-2747	following	_	_
11-6	2748-2756	commands	_	_
11-7	2757-2759	to	_	_
11-8	2760-2768	evaluate	_	_
11-9	2769-2771	on	_	_
11-10	2772-2775	REC	_	_
11-11	2776-2779	and	_	_
11-12	2780-2783	RES	_	_
11-13	2784-2788	task	_	_
11-14	2788-2789	:	_	_
11-15	2790-2791	`	_	_
11-16	2791-2792	`	_	_
11-17	2792-2793	`	_	_
11-18	2794-2795	#	_	_
11-19	2796-2804	Evaluate	_	_
11-20	2805-2808	REC	_	_
11-21	2809-2820	performance	_	_
11-22	2821-2827	python	_	_
11-23	2828-2833	tools	_	_
11-24	2833-2834	/	_	_
11-25	2834-2859	extract\_mrcn\_ref\_feats.py	_	_
11-26	2860-2861	-	_	_
11-27	2861-2862	-	_	_
11-28	2862-2869	dataset	_	_
11-29	2870-2877	refcoco	_	_
11-30	2878-2879	-	_	_
11-31	2879-2880	-	_	_
11-32	2880-2887	splitBy	_	_
11-33	2888-2891	unc	_	_
11-34	2892-2893	-	_	_
11-35	2893-2894	-	_	_
11-36	2894-2897	tid	_	_
11-37	2898-2899	<	_	_
11-38	2899-2902	tid	_	_
11-39	2902-2903	>	_	_
11-40	2904-2905	-	_	_
11-41	2905-2906	-	_	_
11-42	2906-2911	top-N	_	_
11-43	2912-2913	0	_	_
11-44	2914-2915	-	_	_
11-45	2915-2916	-	_	_
11-46	2916-2917	m	_	_
11-47	2918-2919	<	_	_
11-48	2919-2928	loss\_type	_	_
11-49	2928-2929	>	_	_
11-50	2930-2936	python	_	_
11-51	2937-2942	tools	_	_
11-52	2942-2943	/	_	_
11-53	2943-2954	eval\_ref.py	_	_
11-54	2955-2956	-	_	_
11-55	2956-2957	-	_	_
11-56	2957-2964	dataset	_	_
11-57	2965-2972	refcoco	_	_
11-58	2973-2974	-	_	_
11-59	2974-2975	-	_	_
11-60	2975-2982	splitBy	_	_
11-61	2983-2986	unc	_	_
11-62	2987-2988	-	_	_
11-63	2988-2989	-	_	_
11-64	2989-2992	tid	_	_
11-65	2993-2994	<	_	_
11-66	2994-2997	tid	_	_
11-67	2997-2998	>	_	_
11-68	2999-3000	-	_	_
11-69	3000-3001	-	_	_
11-70	3001-3006	top-N	_	_
11-71	3007-3008	0	_	_
11-72	3009-3010	-	_	_
11-73	3010-3011	-	_	_
11-74	3011-3012	m	_	_
11-75	3013-3014	<	_	_
11-76	3014-3023	loss\_type	_	_
11-77	3023-3024	>	_	_
11-78	3025-3026	#	_	_
11-79	3027-3035	Evaluate	_	_
11-80	3036-3039	RES	_	_
11-81	3040-3051	performance	_	_
11-82	3052-3058	python	_	_
11-83	3059-3064	tools	_	_
11-84	3064-3065	/	_	_
11-85	3065-3087	run\_propose\_to\_mask.py	_	_
11-86	3088-3089	-	_	_
11-87	3089-3090	-	_	_
11-88	3090-3097	dataset	_	_
11-89	3098-3105	refcoco	_	_
11-90	3106-3107	-	_	_
11-91	3107-3108	-	_	_
11-92	3108-3115	splitBy	_	_
11-93	3116-3119	unc	_	_
11-94	3120-3121	-	_	_
11-95	3121-3122	-	_	_
11-96	3122-3125	tid	_	_
11-97	3126-3127	<	_	_
11-98	3127-3130	tid	_	_
11-99	3130-3131	>	_	_
11-100	3132-3133	-	_	_
11-101	3133-3134	-	_	_
11-102	3134-3139	top-N	_	_
11-103	3140-3141	0	_	_
11-104	3142-3143	-	_	_
11-105	3143-3144	-	_	_
11-106	3144-3145	m	_	_
11-107	3146-3147	<	_	_
11-108	3147-3156	loss\_type	_	_
11-109	3156-3157	>	_	_
11-110	3158-3164	python	_	_
11-111	3165-3170	tools	_	_
11-112	3170-3171	/	_	_
11-113	3171-3188	eval\_ref\_masks.py	_	_
11-114	3189-3190	-	_	_
11-115	3190-3191	-	_	_
11-116	3191-3198	dataset	_	_
11-117	3199-3206	refcoco	_	_
11-118	3207-3208	-	_	_
11-119	3208-3209	-	_	_
11-120	3209-3216	splitBy	_	_
11-121	3217-3220	unc	_	_
11-122	3221-3222	-	_	_
11-123	3222-3223	-	_	_
11-124	3223-3226	tid	_	_
11-125	3227-3228	<	_	_
11-126	3228-3231	tid	_	_
11-127	3231-3232	>	_	_
11-128	3233-3234	-	_	_
11-129	3234-3235	-	_	_
11-130	3235-3240	top-N	_	_
11-131	3241-3242	0	_	_
11-132	3243-3244	-	_	_
11-133	3244-3245	-	_	_
11-134	3245-3246	m	_	_
11-135	3247-3248	<	_	_
11-136	3248-3257	loss\_type	_	_
11-137	3257-3258	>	_	_
11-138	3259-3260	-	_	_
11-139	3260-3261	-	_	_
11-140	3261-3265	save	_	_
11-141	3266-3267	`	_	_
11-142	3267-3268	`	_	_
11-143	3268-3269	`	_	_
11-144	3271-3272	#	_	_
11-145	3272-3273	#	_	_
11-146	3274-3284	Pretrained	_	_
11-147	3285-3291	Models	_	_
11-148	3292-3294	We	_	_
11-149	3295-3302	provide	_	_
11-150	3303-3314	pre-trained	_	_
11-151	3315-3320	model	_	_
11-152	3321-3328	weights	_	_
11-153	3329-3331	as	_	_
11-154	3332-3336	long	_	_
11-155	3337-3339	as	_	_
11-156	3340-3343	the	_	_
11-157	3344-3357	corresponding	_	_
11-158	3358-3359	\*	_	_
11-159	3359-3360	\*	_	_
11-160	3360-3373	MAttNet-style	_	_
11-161	3374-3383	detection	_	_
11-162	3384-3388	file	_	_
11-163	3388-3389	\*	_	_
11-164	3389-3390	\*	_	_
11-165	3391-3392	(	_	_
11-166	3392-3396	note	_	_
11-167	3397-3400	the	_	_
11-168	3401-3414	MattNet-style	_	_
11-169	3415-3424	detection	_	_
11-170	3425-3430	files	_	_
11-171	3431-3434	can	_	_
11-172	3435-3437	be	_	_
11-173	3438-3446	directly	_	_
11-174	3447-3451	used	_	_
11-175	3452-3454	to	_	_
11-176	3455-3463	evaluate	_	_
11-177	3464-3474	downstream	_	_
11-178	3475-3478	REG	_	_
11-179	3479-3483	task	_	_
11-180	3484-3495	performance	_	_
11-181	3495-3496	)	_	_
11-182	3496-3497	.	_	_

#Text=With these files, one can easily reproduce our reported results.
12-1	3498-3502	With	_	_
12-2	3503-3508	these	_	_
12-3	3509-3514	files	_	_
12-4	3514-3515	,	_	_
12-5	3516-3519	one	_	_
12-6	3520-3523	can	_	_
12-7	3524-3530	easily	_	_
12-8	3531-3540	reproduce	_	_
12-9	3541-3544	our	_	_
12-10	3545-3553	reported	_	_
12-11	3554-3561	results	_	_
12-12	3561-3562	.	_	_

#Text=\[\[Google Drive\]\](https://drive.google.com/drive/folders/1BPqWW0LrAEBFna7b-ORF2TcrY7K\_DDvM?
13-1	3564-3565	\[	_	_
13-2	3565-3566	\[	_	_
13-3	3566-3572	Google	_	_
13-4	3573-3578	Drive	_	_
13-5	3578-3579	\]	_	_
13-6	3579-3580	\]	_	_
13-7	3580-3581	(	_	_
13-8	3581-3586	https	_	_
13-9	3586-3587	:	_	_
13-10	3587-3588	/	_	_
13-11	3588-3589	/	_	_
13-12	3589-3605	drive.google.com	_	_
13-13	3605-3606	/	_	_
13-14	3606-3611	drive	_	_
13-15	3611-3612	/	_	_
13-16	3612-3619	folders	_	_
13-17	3619-3620	/	_	_
13-18	3620-3653	1BPqWW0LrAEBFna7b-ORF2TcrY7K\_DDvM	_	_
13-19	3653-3654	?	_	_

#Text=usp=sharing) \[\[Baidu Disk\]\](https://pan.baidu.com/s/1G4k7APKSUs-\_5StXoYaNrA) (extraction code: 5a9r)  ## Citation ``` @inproceedings{chen2021ref,   title={Ref-NMS: Breaking Proposal Bottlenecks in Two-Stage Referring Expression Grounding},   author={Chen, Long and Ma, Wenbo and Xiao, Jun and Zhang, Hanwang and Chang, Shih-Fu},   booktitle={AAAI},   year={2021} } ```
14-1	3654-3657	usp	_	_
14-2	3657-3658	=	_	_
14-3	3658-3665	sharing	_	_
14-4	3665-3666	)	_	_
14-5	3667-3668	\[	_	_
14-6	3668-3669	\[	_	_
14-7	3669-3674	Baidu	_	_
14-8	3675-3679	Disk	_	_
14-9	3679-3680	\]	_	_
14-10	3680-3681	\]	_	_
14-11	3681-3682	(	_	_
14-12	3682-3687	https	_	_
14-13	3687-3688	:	_	_
14-14	3688-3689	/	_	_
14-15	3689-3690	/	_	_
14-16	3690-3703	pan.baidu.com	_	_
14-17	3703-3704	/	_	_
14-18	3704-3705	s	_	_
14-19	3705-3706	/	_	_
14-20	3706-3717	1G4k7APKSUs	_	_
14-21	3717-3718	-	_	_
14-22	3718-3719	\_	_	_
14-23	3719-3729	5StXoYaNrA	_	_
14-24	3729-3730	)	_	_
14-25	3731-3732	(	_	_
14-26	3732-3742	extraction	_	_
14-27	3743-3747	code	_	_
14-28	3747-3748	:	_	_
14-29	3749-3753	5a9r	_	_
14-30	3753-3754	)	_	_
14-31	3756-3757	#	_	_
14-32	3757-3758	#	_	_
14-33	3759-3767	Citation	_	_
14-34	3768-3769	`	_	_
14-35	3769-3770	`	_	_
14-36	3770-3771	`	_	_
14-37	3772-3773	@	_	_
14-38	3773-3786	inproceedings	_	_
14-39	3786-3787	{	_	_
14-40	3787-3798	chen2021ref	_	_
14-41	3798-3799	,	_	_
14-42	3802-3807	title	_	_
14-43	3807-3808	=	_	_
14-44	3808-3809	{	_	_
14-45	3809-3816	Ref-NMS	_	_
14-46	3816-3817	:	_	_
14-47	3818-3826	Breaking	_	_
14-48	3827-3835	Proposal	_	_
14-49	3836-3847	Bottlenecks	_	_
14-50	3848-3850	in	_	_
14-51	3851-3860	Two-Stage	_	_
14-52	3861-3870	Referring	_	_
14-53	3871-3881	Expression	_	_
14-54	3882-3891	Grounding	_	_
14-55	3891-3892	}	_	_
14-56	3892-3893	,	_	_
14-57	3896-3902	author	_	_
14-58	3902-3903	=	_	_
14-59	3903-3904	{	_	_
14-60	3904-3908	Chen	_	_
14-61	3908-3909	,	_	_
14-62	3910-3914	Long	_	_
14-63	3915-3918	and	_	_
14-64	3919-3921	Ma	_	_
14-65	3921-3922	,	_	_
14-66	3923-3928	Wenbo	_	_
14-67	3929-3932	and	_	_
14-68	3933-3937	Xiao	_	_
14-69	3937-3938	,	_	_
14-70	3939-3942	Jun	_	_
14-71	3943-3946	and	_	_
14-72	3947-3952	Zhang	_	_
14-73	3952-3953	,	_	_
14-74	3954-3961	Hanwang	_	_
14-75	3962-3965	and	_	_
14-76	3966-3971	Chang	_	_
14-77	3971-3972	,	_	_
14-78	3973-3980	Shih-Fu	_	_
14-79	3980-3981	}	_	_
14-80	3981-3982	,	_	_
14-81	3985-3994	booktitle	_	_
14-82	3994-3995	=	_	_
14-83	3995-3996	{	_	_
14-84	3996-4000	AAAI	_	_
14-85	4000-4001	}	_	_
14-86	4001-4002	,	_	_
14-87	4005-4009	year	_	_
14-88	4009-4010	=	_	_
14-89	4010-4011	{	_	_
14-90	4011-4015	2021	_	_
14-91	4015-4016	}	_	_
14-92	4017-4018	}	_	_
14-93	4019-4020	`	_	_
14-94	4020-4021	`	_	_
14-95	4021-4022	`	_	_