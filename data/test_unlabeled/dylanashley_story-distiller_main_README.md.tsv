#FORMAT=WebAnno TSV 3.3
#T_SP=de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity|identifier|value


#Text=# story-distiller  \[!
1-1	0-1	#	_	_
1-2	2-17	story-distiller	_	_
1-3	19-20	\[	_	_
1-4	20-21	!	_	_

#Text=\[Code style: black\](https://img.shields.io/badge/code%20style-black-000000.svg)\](https://github.com/psf/black)  This project attempts to embed a story into a music playlist by sorting the playlist (i.e., sequencing it) so that the order of the music follows a narrative arc.
2-1	21-22	\[	_	_
2-2	22-26	Code	_	_
2-3	27-32	style	_	_
2-4	32-33	:	_	_
2-5	34-39	black	_	_
2-6	39-40	\]	_	_
2-7	40-41	(	_	_
2-8	41-46	https	_	_
2-9	46-47	:	_	_
2-10	47-48	/	_	_
2-11	48-49	/	_	_
2-12	49-63	img.shields.io	_	_
2-13	63-64	/	_	_
2-14	64-69	badge	_	_
2-15	69-70	/	_	_
2-16	70-74	code	_	_
2-17	74-75	%	_	_
2-18	75-88	20style-black	_	_
2-19	88-89	-	_	_
2-20	89-95	000000	_	_
2-21	95-96	.	_	_
2-22	96-99	svg	_	_
2-23	99-100	)	_	_
2-24	100-101	\]	_	_
2-25	101-102	(	_	_
2-26	102-107	https	_	_
2-27	107-108	:	_	_
2-28	108-109	/	_	_
2-29	109-110	/	_	_
2-30	110-120	github.com	_	_
2-31	120-121	/	_	_
2-32	121-124	psf	_	_
2-33	124-125	/	_	_
2-34	125-130	black	_	_
2-35	130-131	)	_	_
2-36	133-137	This	_	_
2-37	138-145	project	_	_
2-38	146-154	attempts	_	_
2-39	155-157	to	_	_
2-40	158-163	embed	_	_
2-41	164-165	a	_	_
2-42	166-171	story	_	_
2-43	172-176	into	_	_
2-44	177-178	a	_	_
2-45	179-184	music	_	_
2-46	185-193	playlist	_	_
2-47	194-196	by	_	_
2-48	197-204	sorting	_	_
2-49	205-208	the	_	_
2-50	209-217	playlist	_	_
2-51	218-219	(	_	_
2-52	219-222	i.e	_	_
2-53	222-223	.	_	_
2-54	223-224	,	_	_
2-55	225-235	sequencing	_	_
2-56	236-238	it	_	_
2-57	238-239	)	_	_
2-58	240-242	so	_	_
2-59	243-247	that	_	_
2-60	248-251	the	_	_
2-61	252-257	order	_	_
2-62	258-260	of	_	_
2-63	261-264	the	_	_
2-64	265-270	music	_	_
2-65	271-278	follows	_	_
2-66	279-280	a	_	_
2-67	281-290	narrative	_	_
2-68	291-294	arc	_	_
2-69	294-295	.	_	_

#Text=The music tracks are fitted to a fixed narrative template based on the output of a machine learning model, which itself distills each track down to its narrative essence.
3-1	296-299	The	_	_
3-2	300-305	music	_	_
3-3	306-312	tracks	_	_
3-4	313-316	are	_	_
3-5	317-323	fitted	_	_
3-6	324-326	to	_	_
3-7	327-328	a	_	_
3-8	329-334	fixed	_	_
3-9	335-344	narrative	_	_
3-10	345-353	template	_	_
3-11	354-359	based	_	_
3-12	360-362	on	_	_
3-13	363-366	the	_	_
3-14	367-373	output	_	_
3-15	374-376	of	_	_
3-16	377-378	a	_	_
3-17	379-386	machine	_	_
3-18	387-395	learning	_	_
3-19	396-401	model	_	_
3-20	401-402	,	_	_
3-21	403-408	which	_	_
3-22	409-415	itself	_	_
3-23	416-424	distills	_	_
3-24	425-429	each	_	_
3-25	430-435	track	_	_
3-26	436-440	down	_	_
3-27	441-443	to	_	_
3-28	444-447	its	_	_
3-29	448-457	narrative	_	_
3-30	458-465	essence	_	_
3-31	465-466	.	_	_

#Text=For more information on narrative essence and how it generalizes to other forms of media, see \*On the Distillation of Stories for Transferring Narrative Arcs in Collections of Independent Media\* by Dylan R.
4-1	467-470	For	_	_
4-2	471-475	more	_	_
4-3	476-487	information	_	_
4-4	488-490	on	_	_
4-5	491-500	narrative	_	_
4-6	501-508	essence	_	_
4-7	509-512	and	_	_
4-8	513-516	how	_	_
4-9	517-519	it	_	_
4-10	520-531	generalizes	_	_
4-11	532-534	to	_	_
4-12	535-540	other	_	_
4-13	541-546	forms	_	_
4-14	547-549	of	_	_
4-15	550-555	media	_	_
4-16	555-556	,	_	_
4-17	557-560	see	_	_
4-18	561-562	\*	_	_
4-19	562-564	On	_	_
4-20	565-568	the	_	_
4-21	569-581	Distillation	_	_
4-22	582-584	of	_	_
4-23	585-592	Stories	_	_
4-24	593-596	for	_	_
4-25	597-609	Transferring	_	_
4-26	610-619	Narrative	_	_
4-27	620-624	Arcs	_	_
4-28	625-627	in	_	_
4-29	628-639	Collections	_	_
4-30	640-642	of	_	_
4-31	643-654	Independent	_	_
4-32	655-660	Media	_	_
4-33	660-661	\*	_	_
4-34	662-664	by	_	_
4-35	665-670	Dylan	_	_
4-36	671-672	R	_	_
4-37	672-673	.	_	_

#Text=Ashley, Vincent Herrmann, Zachary Friggstad, and Jürgen Schmidhuber.   ## Installation  This project is implemented in \[Python\](https://www.python.org/) and uses models learned with \[PyTorch\](https://pytorch.org).
5-1	674-680	Ashley	_	_
5-2	680-681	,	_	_
5-3	682-689	Vincent	_	_
5-4	690-698	Herrmann	_	_
5-5	698-699	,	_	_
5-6	700-707	Zachary	_	_
5-7	708-717	Friggstad	_	_
5-8	717-718	,	_	_
5-9	719-722	and	_	_
5-10	723-729	Jürgen	_	_
5-11	730-741	Schmidhuber	_	_
5-12	741-742	.	_	_
5-13	745-746	#	_	_
5-14	746-747	#	_	_
5-15	748-760	Installation	_	_
5-16	762-766	This	_	_
5-17	767-774	project	_	_
5-18	775-777	is	_	_
5-19	778-789	implemented	_	_
5-20	790-792	in	_	_
5-21	793-794	\[	_	_
5-22	794-800	Python	_	_
5-23	800-801	\]	_	_
5-24	801-802	(	_	_
5-25	802-807	https	_	_
5-26	807-808	:	_	_
5-27	808-809	/	_	_
5-28	809-810	/	_	_
5-29	810-824	www.python.org	_	_
5-29	814-820	python	_	_
5-30	824-825	/	_	_
5-31	825-826	)	_	_
5-32	827-830	and	_	_
5-33	831-835	uses	_	_
5-34	836-842	models	_	_
5-35	843-850	learned	_	_
5-36	851-855	with	_	_
5-37	856-857	\[	_	_
5-38	857-864	PyTorch	_	_
5-39	864-865	\]	_	_
5-40	865-866	(	_	_
5-41	866-871	https	_	_
5-42	871-872	:	_	_
5-43	872-873	/	_	_
5-44	873-874	/	_	_
5-45	874-885	pytorch.org	_	_
5-45	874-881	pytorch	_	_
5-46	885-886	)	_	_
5-47	886-887	.	_	_

#Text=Before installation, first, ensure you have a recent version of Python and pip, then clone the repository using the `--sparse` option: ```bash git clone --sparse git@github.com:dylanashley/story-distiller.git ```  Afterwards, install the Python dependencies using pip: ```bash pip install -r requirements.txt ```  To use the full suite of file types supported by the tool, it is also necessary to separately install the \[ffmpeg\](https://ffmpeg.org/) tool by following the instructions for your operating system provided on \[their website\](https://ffmpeg.org/download.html).
6-1	889-895	Before	_	_
6-2	896-908	installation	_	_
6-3	908-909	,	_	_
6-4	910-915	first	_	_
6-5	915-916	,	_	_
6-6	917-923	ensure	_	_
6-7	924-927	you	_	_
6-8	928-932	have	_	_
6-9	933-934	a	_	_
6-10	935-941	recent	_	_
6-11	942-949	version	_	_
6-12	950-952	of	_	_
6-13	953-959	Python	_	_
6-14	960-963	and	_	_
6-15	964-967	pip	_	_
6-16	967-968	,	_	_
6-17	969-973	then	_	_
6-18	974-979	clone	_	_
6-19	980-983	the	_	_
6-20	984-994	repository	_	_
6-21	995-1000	using	_	_
6-22	1001-1004	the	_	_
6-23	1005-1006	`	_	_
6-24	1006-1007	-	_	_
6-25	1007-1008	-	_	_
6-26	1008-1014	sparse	_	_
6-27	1014-1015	`	_	_
6-28	1016-1022	option	_	_
6-29	1022-1023	:	_	_
6-30	1024-1025	`	_	_
6-31	1025-1026	`	_	_
6-32	1026-1027	`	_	_
6-33	1027-1031	bash	_	_
6-34	1032-1035	git	_	_
6-35	1036-1041	clone	_	_
6-36	1042-1043	-	_	_
6-37	1043-1044	-	_	_
6-38	1044-1050	sparse	_	_
6-39	1051-1054	git	_	_
6-40	1054-1055	@	_	_
6-41	1055-1065	github.com	_	_
6-42	1065-1066	:	_	_
6-43	1066-1077	dylanashley	_	_
6-44	1077-1078	/	_	_
6-45	1078-1097	story-distiller.git	_	_
6-46	1098-1099	`	_	_
6-47	1099-1100	`	_	_
6-48	1100-1101	`	_	_
6-49	1103-1113	Afterwards	_	_
6-50	1113-1114	,	_	_
6-51	1115-1122	install	_	_
6-52	1123-1126	the	_	_
6-53	1127-1133	Python	_	_
6-54	1134-1146	dependencies	_	_
6-55	1147-1152	using	_	_
6-56	1153-1156	pip	_	_
6-57	1156-1157	:	_	_
6-58	1158-1159	`	_	_
6-59	1159-1160	`	_	_
6-60	1160-1161	`	_	_
6-61	1161-1165	bash	_	_
6-62	1166-1169	pip	_	_
6-63	1170-1177	install	_	_
6-64	1178-1179	-	_	_
6-65	1179-1180	r	_	_
6-66	1181-1197	requirements.txt	_	_
6-67	1198-1199	`	_	_
6-68	1199-1200	`	_	_
6-69	1200-1201	`	_	_
6-70	1203-1205	To	_	_
6-71	1206-1209	use	_	_
6-72	1210-1213	the	_	_
6-73	1214-1218	full	_	_
6-74	1219-1224	suite	_	_
6-75	1225-1227	of	_	_
6-76	1228-1232	file	_	_
6-77	1233-1238	types	_	_
6-78	1239-1248	supported	_	_
6-79	1249-1251	by	_	_
6-80	1252-1255	the	_	_
6-81	1256-1260	tool	_	_
6-82	1260-1261	,	_	_
6-83	1262-1264	it	_	_
6-84	1265-1267	is	_	_
6-85	1268-1272	also	_	_
6-86	1273-1282	necessary	_	_
6-87	1283-1285	to	_	_
6-88	1286-1296	separately	_	_
6-89	1297-1304	install	_	_
6-90	1305-1308	the	_	_
6-91	1309-1310	\[	_	_
6-92	1310-1316	ffmpeg	_	_
6-93	1316-1317	\]	_	_
6-94	1317-1318	(	_	_
6-95	1318-1323	https	_	_
6-96	1323-1324	:	_	_
6-97	1324-1325	/	_	_
6-98	1325-1326	/	_	_
6-99	1326-1336	ffmpeg.org	_	_
6-99	1326-1332	ffmpeg	_	_
6-100	1336-1337	/	_	_
6-101	1337-1338	)	_	_
6-102	1339-1343	tool	_	_
6-103	1344-1346	by	_	_
6-104	1347-1356	following	_	_
6-105	1357-1360	the	_	_
6-106	1361-1373	instructions	_	_
6-107	1374-1377	for	_	_
6-108	1378-1382	your	_	_
6-109	1383-1392	operating	_	_
6-110	1393-1399	system	_	_
6-111	1400-1408	provided	_	_
6-112	1409-1411	on	_	_
6-113	1412-1413	\[	_	_
6-114	1413-1418	their	_	_
6-115	1419-1426	website	_	_
6-116	1426-1427	\]	_	_
6-117	1427-1428	(	_	_
6-118	1428-1433	https	_	_
6-119	1433-1434	:	_	_
6-120	1434-1435	/	_	_
6-121	1435-1436	/	_	_
6-122	1436-1446	ffmpeg.org	_	_
6-122	1436-1442	ffmpeg	_	_
6-123	1446-1447	/	_	_
6-124	1447-1460	download.html	_	_
6-125	1460-1461	)	_	_
6-126	1461-1462	.	_	_

#Text=You can now run the tool by directly executing the `\_\_main\_\_.py` file, or—if you're using Linux or macOS—you can use the makefile to compile and then install an executable Python zip archive: ```bash make all sudo make install ```   ## Command-line Tool Usage  To run the program, execute it while passing the audio files as command-line arguments: ```bash sdistil files \[files ...\] >> playlist.txt ```  \[librosa\](https://librosa.org/doc/latest/index.html) is used to process the audio files, so most common audio file types are supported.
7-1	1464-1467	You	_	_
7-2	1468-1471	can	_	_
7-3	1472-1475	now	_	_
7-4	1476-1479	run	_	_
7-5	1480-1483	the	_	_
7-6	1484-1488	tool	_	_
7-7	1489-1491	by	_	_
7-8	1492-1500	directly	_	_
7-9	1501-1510	executing	_	_
7-10	1511-1514	the	_	_
7-11	1515-1516	`	_	_
7-12	1516-1517	\_	_	_
7-13	1517-1518	\_	_	_
7-14	1518-1522	main	_	_
7-15	1522-1523	\_	_	_
7-16	1523-1524	\_	_	_
7-17	1524-1525	.	_	_
7-18	1525-1527	py	_	_
7-19	1527-1528	`	_	_
7-20	1529-1533	file	_	_
7-21	1533-1534	,	_	_
7-22	1535-1540	or—if	_	_
7-23	1541-1547	you're	_	_
7-24	1548-1553	using	_	_
7-25	1554-1559	Linux	_	_
7-26	1560-1562	or	_	_
7-27	1563-1572	macOS—you	_	_
7-27	1563-1568	macOS	_	_
7-28	1573-1576	can	_	_
7-29	1577-1580	use	_	_
7-30	1581-1584	the	_	_
7-31	1585-1593	makefile	_	_
7-32	1594-1596	to	_	_
7-33	1597-1604	compile	_	_
7-34	1605-1608	and	_	_
7-35	1609-1613	then	_	_
7-36	1614-1621	install	_	_
7-37	1622-1624	an	_	_
7-38	1625-1635	executable	_	_
7-39	1636-1642	Python	_	_
7-40	1643-1646	zip	_	_
7-41	1647-1654	archive	_	_
7-42	1654-1655	:	_	_
7-43	1656-1657	`	_	_
7-44	1657-1658	`	_	_
7-45	1658-1659	`	_	_
7-46	1659-1663	bash	_	_
7-47	1664-1668	make	_	_
7-48	1669-1672	all	_	_
7-49	1673-1677	sudo	_	_
7-50	1678-1682	make	_	_
7-51	1683-1690	install	_	_
7-52	1691-1692	`	_	_
7-53	1692-1693	`	_	_
7-54	1693-1694	`	_	_
7-55	1697-1698	#	_	_
7-56	1698-1699	#	_	_
7-57	1700-1712	Command-line	_	_
7-58	1713-1717	Tool	_	_
7-59	1718-1723	Usage	_	_
7-60	1725-1727	To	_	_
7-61	1728-1731	run	_	_
7-62	1732-1735	the	_	_
7-63	1736-1743	program	_	_
7-64	1743-1744	,	_	_
7-65	1745-1752	execute	_	_
7-66	1753-1755	it	_	_
7-67	1756-1761	while	_	_
7-68	1762-1769	passing	_	_
7-69	1770-1773	the	_	_
7-70	1774-1779	audio	_	_
7-71	1780-1785	files	_	_
7-72	1786-1788	as	_	_
7-73	1789-1801	command-line	_	_
7-74	1802-1811	arguments	_	_
7-75	1811-1812	:	_	_
7-76	1813-1814	`	_	_
7-77	1814-1815	`	_	_
7-78	1815-1816	`	_	_
7-79	1816-1820	bash	_	_
7-80	1821-1828	sdistil	_	_
7-81	1829-1834	files	_	_
7-82	1835-1836	\[	_	_
7-83	1836-1841	files	_	_
7-84	1842-1843	.	_	_
7-85	1843-1844	.	_	_
7-86	1844-1845	.	_	_
7-87	1845-1846	\]	_	_
7-88	1847-1848	>	_	_
7-89	1848-1849	>	_	_
7-90	1850-1862	playlist.txt	_	_
7-91	1863-1864	`	_	_
7-92	1864-1865	`	_	_
7-93	1865-1866	`	_	_
7-94	1868-1869	\[	_	_
7-95	1869-1876	librosa	_	_
7-96	1876-1877	\]	_	_
7-97	1877-1878	(	_	_
7-98	1878-1883	https	_	_
7-99	1883-1884	:	_	_
7-100	1884-1885	/	_	_
7-101	1885-1886	/	_	_
7-102	1886-1897	librosa.org	_	_
7-102	1886-1893	librosa	_	_
7-103	1897-1898	/	_	_
7-104	1898-1901	doc	_	_
7-105	1901-1902	/	_	_
7-106	1902-1908	latest	_	_
7-107	1908-1909	/	_	_
7-108	1909-1919	index.html	_	_
7-109	1919-1920	)	_	_
7-110	1921-1923	is	_	_
7-111	1924-1928	used	_	_
7-112	1929-1931	to	_	_
7-113	1932-1939	process	_	_
7-114	1940-1943	the	_	_
7-115	1944-1949	audio	_	_
7-116	1950-1955	files	_	_
7-117	1955-1956	,	_	_
7-118	1957-1959	so	_	_
7-119	1960-1964	most	_	_
7-120	1965-1971	common	_	_
7-121	1972-1977	audio	_	_
7-122	1978-1982	file	_	_
7-123	1983-1988	types	_	_
7-124	1989-1992	are	_	_
7-125	1993-2002	supported	_	_
7-126	2002-2003	.	_	_

#Text=If you want to try out a different template, pass the `-t` argument to the program with the template file as an argument.
8-1	2005-2007	If	_	_
8-2	2008-2011	you	_	_
8-3	2012-2016	want	_	_
8-4	2017-2019	to	_	_
8-5	2020-2023	try	_	_
8-6	2024-2027	out	_	_
8-7	2028-2029	a	_	_
8-8	2030-2039	different	_	_
8-9	2040-2048	template	_	_
8-10	2048-2049	,	_	_
8-11	2050-2054	pass	_	_
8-12	2055-2058	the	_	_
8-13	2059-2060	`	_	_
8-14	2060-2061	-	_	_
8-15	2061-2062	t	_	_
8-16	2062-2063	`	_	_
8-17	2064-2072	argument	_	_
8-18	2073-2075	to	_	_
8-19	2076-2079	the	_	_
8-20	2080-2087	program	_	_
8-21	2088-2092	with	_	_
8-22	2093-2096	the	_	_
8-23	2097-2105	template	_	_
8-24	2106-2110	file	_	_
8-25	2111-2113	as	_	_
8-26	2114-2116	an	_	_
8-27	2117-2125	argument	_	_
8-28	2125-2126	.	_	_

#Text=Several learned templates are included in the templates directory:  !
9-1	2127-2134	Several	_	_
9-2	2135-2142	learned	_	_
9-3	2143-2152	templates	_	_
9-4	2153-2156	are	_	_
9-5	2157-2165	included	_	_
9-6	2166-2168	in	_	_
9-7	2169-2172	the	_	_
9-8	2173-2182	templates	_	_
9-9	2183-2192	directory	_	_
9-10	2192-2193	:	_	_
9-11	2195-2196	!	_	_

#Text=\[templates.jpg\](https://github.com/dylanashley/story-distiller/blob/main/templates.jpg?
10-1	2196-2197	\[	_	_
10-2	2197-2210	templates.jpg	_	_
10-3	2210-2211	\]	_	_
10-4	2211-2212	(	_	_
10-5	2212-2217	https	_	_
10-6	2217-2218	:	_	_
10-7	2218-2219	/	_	_
10-8	2219-2220	/	_	_
10-9	2220-2230	github.com	_	_
10-10	2230-2231	/	_	_
10-11	2231-2242	dylanashley	_	_
10-12	2242-2243	/	_	_
10-13	2243-2258	story-distiller	_	_
10-14	2258-2259	/	_	_
10-15	2259-2263	blob	_	_
10-16	2263-2264	/	_	_
10-17	2264-2268	main	_	_
10-18	2268-2269	/	_	_
10-19	2269-2282	templates.jpg	_	_
10-20	2282-2283	?	_	_

#Text=raw=true)   ## Web App Usage  To run the web app, simply execute the `app.py` file: ```bash .
11-1	2283-2286	raw	_	_
11-2	2286-2287	=	_	_
11-3	2287-2291	true	_	_
11-4	2291-2292	)	_	_
11-5	2295-2296	#	_	_
11-6	2296-2297	#	_	_
11-7	2298-2301	Web	_	_
11-8	2302-2305	App	_	_
11-9	2306-2311	Usage	_	_
11-10	2313-2315	To	_	_
11-11	2316-2319	run	_	_
11-12	2320-2323	the	_	_
11-13	2324-2327	web	_	_
11-14	2328-2331	app	_	_
11-15	2331-2332	,	_	_
11-16	2333-2339	simply	_	_
11-17	2340-2347	execute	_	_
11-18	2348-2351	the	_	_
11-19	2352-2353	`	_	_
11-20	2353-2359	app.py	_	_
11-21	2359-2360	`	_	_
11-22	2361-2365	file	_	_
11-23	2365-2366	:	_	_
11-24	2367-2368	`	_	_
11-25	2368-2369	`	_	_
11-26	2369-2370	`	_	_
11-27	2370-2374	bash	_	_
11-28	2375-2376	.	_	_

#Text=/app.py ```   ## Extras  In addition to the above, this repository also includes all the code needed to reproduce the results presented in \*On the Distillation of Stories for Transferring Narrative Arcs in Collections of Independent Media\* by Dylan R.
12-1	2376-2377	/	_	_
12-2	2377-2383	app.py	_	_
12-3	2384-2385	`	_	_
12-4	2385-2386	`	_	_
12-5	2386-2387	`	_	_
12-6	2390-2391	#	_	_
12-7	2391-2392	#	_	_
12-8	2393-2399	Extras	_	_
12-9	2401-2403	In	_	_
12-10	2404-2412	addition	_	_
12-11	2413-2415	to	_	_
12-12	2416-2419	the	_	_
12-13	2420-2425	above	_	_
12-14	2425-2426	,	_	_
12-15	2427-2431	this	_	_
12-16	2432-2442	repository	_	_
12-17	2443-2447	also	_	_
12-18	2448-2456	includes	_	_
12-19	2457-2460	all	_	_
12-20	2461-2464	the	_	_
12-21	2465-2469	code	_	_
12-22	2470-2476	needed	_	_
12-23	2477-2479	to	_	_
12-24	2480-2489	reproduce	_	_
12-25	2490-2493	the	_	_
12-26	2494-2501	results	_	_
12-27	2502-2511	presented	_	_
12-28	2512-2514	in	_	_
12-29	2515-2516	\*	_	_
12-30	2516-2518	On	_	_
12-31	2519-2522	the	_	_
12-32	2523-2535	Distillation	_	_
12-33	2536-2538	of	_	_
12-34	2539-2546	Stories	_	_
12-35	2547-2550	for	_	_
12-36	2551-2563	Transferring	_	_
12-37	2564-2573	Narrative	_	_
12-38	2574-2578	Arcs	_	_
12-39	2579-2581	in	_	_
12-40	2582-2593	Collections	_	_
12-41	2594-2596	of	_	_
12-42	2597-2608	Independent	_	_
12-43	2609-2614	Media	_	_
12-44	2614-2615	\*	_	_
12-45	2616-2618	by	_	_
12-46	2619-2624	Dylan	_	_
12-47	2625-2626	R	_	_
12-48	2626-2627	.	_	_

#Text=Ashley, Vincent Herrmann, Zachary Friggstad, and Jürgen Schmidhuber.
13-1	2628-2634	Ashley	_	_
13-2	2634-2635	,	_	_
13-3	2636-2643	Vincent	_	_
13-4	2644-2652	Herrmann	_	_
13-5	2652-2653	,	_	_
13-6	2654-2661	Zachary	_	_
13-7	2662-2671	Friggstad	_	_
13-8	2671-2672	,	_	_
13-9	2673-2676	and	_	_
13-10	2677-2683	Jürgen	_	_
13-11	2684-2695	Schmidhuber	_	_
13-12	2695-2696	.	_	_

#Text=In particular, it includes - the scripts needed to learn the PyTorch models for extracting the narrative essence from either music albums (`album\_extractor.py`) or movie frames (`movie\_extractor.py`) and compute the lower bounds for the mutual information of the different features, - the scripts for learning a set of template curves from scalar descriptions of items in a set of collections (`template\_learner.py`), - the code that can fit the scalar descriptions of items in a collection to a given template curve (`fit\_values` in `\_\_main\_\_.py`), - the preprocessed album data used to train the original PyTorch models for the music albums (`data/`), and - the learned PyTorch models and template curves (`results/`).
14-1	2697-2699	In	_	_
14-2	2700-2710	particular	_	_
14-3	2710-2711	,	_	_
14-4	2712-2714	it	_	_
14-5	2715-2723	includes	_	_
14-6	2724-2725	-	_	_
14-7	2726-2729	the	_	_
14-8	2730-2737	scripts	_	_
14-9	2738-2744	needed	_	_
14-10	2745-2747	to	_	_
14-11	2748-2753	learn	_	_
14-12	2754-2757	the	_	_
14-13	2758-2765	PyTorch	_	_
14-14	2766-2772	models	_	_
14-15	2773-2776	for	_	_
14-16	2777-2787	extracting	_	_
14-17	2788-2791	the	_	_
14-18	2792-2801	narrative	_	_
14-19	2802-2809	essence	_	_
14-20	2810-2814	from	_	_
14-21	2815-2821	either	_	_
14-22	2822-2827	music	_	_
14-23	2828-2834	albums	_	_
14-24	2835-2836	(	_	_
14-25	2836-2837	`	_	_
14-26	2837-2855	album\_extractor.py	_	_
14-27	2855-2856	`	_	_
14-28	2856-2857	)	_	_
14-29	2858-2860	or	_	_
14-30	2861-2866	movie	_	_
14-31	2867-2873	frames	_	_
14-32	2874-2875	(	_	_
14-33	2875-2876	`	_	_
14-34	2876-2894	movie\_extractor.py	_	_
14-35	2894-2895	`	_	_
14-36	2895-2896	)	_	_
14-37	2897-2900	and	_	_
14-38	2901-2908	compute	_	_
14-39	2909-2912	the	_	_
14-40	2913-2918	lower	_	_
14-41	2919-2925	bounds	_	_
14-42	2926-2929	for	_	_
14-43	2930-2933	the	_	_
14-44	2934-2940	mutual	_	_
14-45	2941-2952	information	_	_
14-46	2953-2955	of	_	_
14-47	2956-2959	the	_	_
14-48	2960-2969	different	_	_
14-49	2970-2978	features	_	_
14-50	2978-2979	,	_	_
14-51	2980-2981	-	_	_
14-52	2982-2985	the	_	_
14-53	2986-2993	scripts	_	_
14-54	2994-2997	for	_	_
14-55	2998-3006	learning	_	_
14-56	3007-3008	a	_	_
14-57	3009-3012	set	_	_
14-58	3013-3015	of	_	_
14-59	3016-3024	template	_	_
14-60	3025-3031	curves	_	_
14-61	3032-3036	from	_	_
14-62	3037-3043	scalar	_	_
14-63	3044-3056	descriptions	_	_
14-64	3057-3059	of	_	_
14-65	3060-3065	items	_	_
14-66	3066-3068	in	_	_
14-67	3069-3070	a	_	_
14-68	3071-3074	set	_	_
14-69	3075-3077	of	_	_
14-70	3078-3089	collections	_	_
14-71	3090-3091	(	_	_
14-72	3091-3092	`	_	_
14-73	3092-3111	template\_learner.py	_	_
14-74	3111-3112	`	_	_
14-75	3112-3113	)	_	_
14-76	3113-3114	,	_	_
14-77	3115-3116	-	_	_
14-78	3117-3120	the	_	_
14-79	3121-3125	code	_	_
14-80	3126-3130	that	_	_
14-81	3131-3134	can	_	_
14-82	3135-3138	fit	_	_
14-83	3139-3142	the	_	_
14-84	3143-3149	scalar	_	_
14-85	3150-3162	descriptions	_	_
14-86	3163-3165	of	_	_
14-87	3166-3171	items	_	_
14-88	3172-3174	in	_	_
14-89	3175-3176	a	_	_
14-90	3177-3187	collection	_	_
14-91	3188-3190	to	_	_
14-92	3191-3192	a	_	_
14-93	3193-3198	given	_	_
14-94	3199-3207	template	_	_
14-95	3208-3213	curve	_	_
14-96	3214-3215	(	_	_
14-97	3215-3216	`	_	_
14-98	3216-3226	fit\_values	_	_
14-99	3226-3227	`	_	_
14-100	3228-3230	in	_	_
14-101	3231-3232	`	_	_
14-102	3232-3233	\_	_	_
14-103	3233-3234	\_	_	_
14-104	3234-3238	main	_	_
14-105	3238-3239	\_	_	_
14-106	3239-3240	\_	_	_
14-107	3240-3241	.	_	_
14-108	3241-3243	py	_	_
14-109	3243-3244	`	_	_
14-110	3244-3245	)	_	_
14-111	3245-3246	,	_	_
14-112	3247-3248	-	_	_
14-113	3249-3252	the	_	_
14-114	3253-3265	preprocessed	_	_
14-115	3266-3271	album	_	_
14-116	3272-3276	data	_	_
14-117	3277-3281	used	_	_
14-118	3282-3284	to	_	_
14-119	3285-3290	train	_	_
14-120	3291-3294	the	_	_
14-121	3295-3303	original	_	_
14-122	3304-3311	PyTorch	_	_
14-123	3312-3318	models	_	_
14-124	3319-3322	for	_	_
14-125	3323-3326	the	_	_
14-126	3327-3332	music	_	_
14-127	3333-3339	albums	_	_
14-128	3340-3341	(	_	_
14-129	3341-3342	`	_	_
14-130	3342-3346	data	_	_
14-131	3346-3347	/	_	_
14-132	3347-3348	`	_	_
14-133	3348-3349	)	_	_
14-134	3349-3350	,	_	_
14-135	3351-3354	and	_	_
14-136	3355-3356	-	_	_
14-137	3357-3360	the	_	_
14-138	3361-3368	learned	_	_
14-139	3369-3376	PyTorch	_	_
14-140	3377-3383	models	_	_
14-141	3384-3387	and	_	_
14-142	3388-3396	template	_	_
14-143	3397-3403	curves	_	_
14-144	3404-3405	(	_	_
14-145	3405-3406	`	_	_
14-146	3406-3413	results	_	_
14-147	3413-3414	/	_	_
14-148	3414-3415	`	_	_
14-149	3415-3416	)	_	_
14-150	3416-3417	.	_	_

#Text=Note that to obtain the preprocessed data and the learned PyTorch models and template curves, you will have to clone the repository without using the `--sparse` option: ```bash git clone git@github.com:dylanashley/story-distiller.git ```  At this time, the raw data used to train the movie frame extractor is not possible to release due to copyright issues.
15-1	3419-3423	Note	_	_
15-2	3424-3428	that	_	_
15-3	3429-3431	to	_	_
15-4	3432-3438	obtain	_	_
15-5	3439-3442	the	_	_
15-6	3443-3455	preprocessed	_	_
15-7	3456-3460	data	_	_
15-8	3461-3464	and	_	_
15-9	3465-3468	the	_	_
15-10	3469-3476	learned	_	_
15-11	3477-3484	PyTorch	_	_
15-12	3485-3491	models	_	_
15-13	3492-3495	and	_	_
15-14	3496-3504	template	_	_
15-15	3505-3511	curves	_	_
15-16	3511-3512	,	_	_
15-17	3513-3516	you	_	_
15-18	3517-3521	will	_	_
15-19	3522-3526	have	_	_
15-20	3527-3529	to	_	_
15-21	3530-3535	clone	_	_
15-22	3536-3539	the	_	_
15-23	3540-3550	repository	_	_
15-24	3551-3558	without	_	_
15-25	3559-3564	using	_	_
15-26	3565-3568	the	_	_
15-27	3569-3570	`	_	_
15-28	3570-3571	-	_	_
15-29	3571-3572	-	_	_
15-30	3572-3578	sparse	_	_
15-31	3578-3579	`	_	_
15-32	3580-3586	option	_	_
15-33	3586-3587	:	_	_
15-34	3588-3589	`	_	_
15-35	3589-3590	`	_	_
15-36	3590-3591	`	_	_
15-37	3591-3595	bash	_	_
15-38	3596-3599	git	_	_
15-39	3600-3605	clone	_	_
15-40	3606-3609	git	_	_
15-41	3609-3610	@	_	_
15-42	3610-3620	github.com	_	_
15-43	3620-3621	:	_	_
15-44	3621-3632	dylanashley	_	_
15-45	3632-3633	/	_	_
15-46	3633-3652	story-distiller.git	_	_
15-47	3653-3654	`	_	_
15-48	3654-3655	`	_	_
15-49	3655-3656	`	_	_
15-50	3658-3660	At	_	_
15-51	3661-3665	this	_	_
15-52	3666-3670	time	_	_
15-53	3670-3671	,	_	_
15-54	3672-3675	the	_	_
15-55	3676-3679	raw	_	_
15-56	3680-3684	data	_	_
15-57	3685-3689	used	_	_
15-58	3690-3692	to	_	_
15-59	3693-3698	train	_	_
15-60	3699-3702	the	_	_
15-61	3703-3708	movie	_	_
15-62	3709-3714	frame	_	_
15-63	3715-3724	extractor	_	_
15-64	3725-3727	is	_	_
15-65	3728-3731	not	_	_
15-66	3732-3740	possible	_	_
15-67	3741-3743	to	_	_
15-68	3744-3751	release	_	_
15-69	3752-3755	due	_	_
15-70	3756-3758	to	_	_
15-71	3759-3768	copyright	_	_
15-72	3769-3775	issues	_	_
15-73	3775-3776	.	_	_

#Text=However, `movie\_extractor.py` should work on any similar collection with minimal changes.
16-1	3777-3784	However	_	_
16-2	3784-3785	,	_	_
16-3	3786-3787	`	_	_
16-4	3787-3805	movie\_extractor.py	_	_
16-5	3805-3806	`	_	_
16-6	3807-3813	should	_	_
16-7	3814-3818	work	_	_
16-8	3819-3821	on	_	_
16-9	3822-3825	any	_	_
16-10	3826-3833	similar	_	_
16-11	3834-3844	collection	_	_
16-12	3845-3849	with	_	_
16-13	3850-3857	minimal	_	_
16-14	3858-3865	changes	_	_
16-15	3865-3866	.	_	_

#Text=Preprocessing to extract CLIP features from images can be done straightforwardly using the \[official implementation\](https://github.com/openai/CLIP).
17-1	3867-3880	Preprocessing	_	_
17-2	3881-3883	to	_	_
17-3	3884-3891	extract	_	_
17-4	3892-3896	CLIP	_	_
17-5	3897-3905	features	_	_
17-6	3906-3910	from	_	_
17-7	3911-3917	images	_	_
17-8	3918-3921	can	_	_
17-9	3922-3924	be	_	_
17-10	3925-3929	done	_	_
17-11	3930-3947	straightforwardly	_	_
17-12	3948-3953	using	_	_
17-13	3954-3957	the	_	_
17-14	3958-3959	\[	_	_
17-15	3959-3967	official	_	_
17-16	3968-3982	implementation	_	_
17-17	3982-3983	\]	_	_
17-18	3983-3984	(	_	_
17-19	3984-3989	https	_	_
17-20	3989-3990	:	_	_
17-21	3990-3991	/	_	_
17-22	3991-3992	/	_	_
17-23	3992-4002	github.com	_	_
17-24	4002-4003	/	_	_
17-25	4003-4009	openai	_	_
17-26	4009-4010	/	_	_
17-27	4010-4014	CLIP	_	_
17-28	4014-4015	)	_	_
17-29	4015-4016	.	_	_